
lab_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000530  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007c8  080007c8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080007c8  080007c8  000017c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080007cc  080007cc  000017cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000004  24000000  080007d0  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000004  080007d4  00002004  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000024  080007d4  00002024  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000025c8  00000000  00000000  00002032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000005a4  00000000  00000000  000045fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000288  00000000  00000000  00004ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000001d5  00000000  00000000  00004e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00033e21  00000000  00000000  00004ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00002a2d  00000000  00000000  00038e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014ebf1  00000000  00000000  0003b84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0018a43c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000008e8  00000000  00000000  0018a480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005e  00000000  00000000  0018ad68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000004 	.word	0x24000004
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080007b0 	.word	0x080007b0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000008 	.word	0x24000008
 80002d4:	080007b0 	.word	0x080007b0

080002d8 <delay>:

void GPIO_Init(GPIO_device *gpio, uint32_t pin, uint32_t mode, uint32_t otype, uint32_t speed, uint32_t pupd);
void GPIO_WritePin(GPIO_device *gpio, uint32_t pin, uint32_t value);
uint32_t GPIO_ReadPin(GPIO_device *gpio, uint32_t pin);

void delay(uint32_t delay) {
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < delay; i++) {}
 80002e0:	2300      	movs	r3, #0
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	e002      	b.n	80002ec <delay+0x14>
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	3301      	adds	r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d8f8      	bhi.n	80002e6 <delay+0xe>
}
 80002f4:	bf00      	nop
 80002f6:	bf00      	nop
 80002f8:	3714      	adds	r7, #20
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
	...

08000304 <main>:

int main(void) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af02      	add	r7, sp, #8
	GPIOC_CLK_ENABLE();
 800030a:	4b4c      	ldr	r3, [pc, #304]	@ (800043c <main+0x138>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a4b      	ldr	r2, [pc, #300]	@ (800043c <main+0x138>)
 8000310:	f043 0304 	orr.w	r3, r3, #4
 8000314:	6013      	str	r3, [r2, #0]
	GPIOD_CLK_ENABLE();
 8000316:	4b49      	ldr	r3, [pc, #292]	@ (800043c <main+0x138>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a48      	ldr	r2, [pc, #288]	@ (800043c <main+0x138>)
 800031c:	f043 0308 	orr.w	r3, r3, #8
 8000320:	6013      	str	r3, [r2, #0]
	GPIOI_CLK_ENABLE();
 8000322:	4b46      	ldr	r3, [pc, #280]	@ (800043c <main+0x138>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a45      	ldr	r2, [pc, #276]	@ (800043c <main+0x138>)
 8000328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800032c:	6013      	str	r3, [r2, #0]
	GPIOJ_CLK_ENABLE();
 800032e:	4b43      	ldr	r3, [pc, #268]	@ (800043c <main+0x138>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a42      	ldr	r2, [pc, #264]	@ (800043c <main+0x138>)
 8000334:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000338:	6013      	str	r3, [r2, #0]

	GPIO_Init(GPIOD, 3, GPIO_MODE_OUTPUT, GPIO_OUTPUT_TYPE_PUSH_PULL, GPIO_SPEED_LOW, GPIO_NO_PULL);
 800033a:	2300      	movs	r3, #0
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2300      	movs	r3, #0
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	2300      	movs	r3, #0
 8000344:	2201      	movs	r2, #1
 8000346:	2103      	movs	r1, #3
 8000348:	483d      	ldr	r0, [pc, #244]	@ (8000440 <main+0x13c>)
 800034a:	f000 f883 	bl	8000454 <GPIO_Init>
	GPIO_Init(GPIOI, 13, GPIO_MODE_OUTPUT, GPIO_OUTPUT_TYPE_PUSH_PULL, GPIO_SPEED_LOW, GPIO_NO_PULL);
 800034e:	2300      	movs	r3, #0
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	2300      	movs	r3, #0
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	2300      	movs	r3, #0
 8000358:	2201      	movs	r2, #1
 800035a:	210d      	movs	r1, #13
 800035c:	4839      	ldr	r0, [pc, #228]	@ (8000444 <main+0x140>)
 800035e:	f000 f879 	bl	8000454 <GPIO_Init>
	GPIO_Init(GPIOJ, 2, GPIO_MODE_OUTPUT, GPIO_OUTPUT_TYPE_OPEN_DRAIN, GPIO_SPEED_LOW, GPIO_PULL_UP);
 8000362:	2301      	movs	r3, #1
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2300      	movs	r3, #0
 8000368:	9300      	str	r3, [sp, #0]
 800036a:	2301      	movs	r3, #1
 800036c:	2201      	movs	r2, #1
 800036e:	2102      	movs	r1, #2
 8000370:	4835      	ldr	r0, [pc, #212]	@ (8000448 <main+0x144>)
 8000372:	f000 f86f 	bl	8000454 <GPIO_Init>
	GPIO_Init(GPIOC, 13, GPIO_MODE_INPUT, GPIO_OUTPUT_TYPE_PUSH_PULL, GPIO_SPEED_LOW, GPIO_NO_PULL);
 8000376:	2300      	movs	r3, #0
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	2300      	movs	r3, #0
 800037c:	9300      	str	r3, [sp, #0]
 800037e:	2300      	movs	r3, #0
 8000380:	2200      	movs	r2, #0
 8000382:	210d      	movs	r1, #13
 8000384:	4831      	ldr	r0, [pc, #196]	@ (800044c <main+0x148>)
 8000386:	f000 f865 	bl	8000454 <GPIO_Init>

	while(1) {
		if (GPIO_ReadPin(GPIOC, 13)) {
 800038a:	210d      	movs	r1, #13
 800038c:	482f      	ldr	r0, [pc, #188]	@ (800044c <main+0x148>)
 800038e:	f000 f8df 	bl	8000550 <GPIO_ReadPin>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d041      	beq.n	800041c <main+0x118>
			GPIO_WritePin(GPIOD, 3, 1);
 8000398:	2201      	movs	r2, #1
 800039a:	2103      	movs	r1, #3
 800039c:	4828      	ldr	r0, [pc, #160]	@ (8000440 <main+0x13c>)
 800039e:	f000 f8b8 	bl	8000512 <GPIO_WritePin>

			delay(1000000);
 80003a2:	482b      	ldr	r0, [pc, #172]	@ (8000450 <main+0x14c>)
 80003a4:	f7ff ff98 	bl	80002d8 <delay>

			GPIO_WritePin(GPIOD, 3, 0);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2103      	movs	r1, #3
 80003ac:	4824      	ldr	r0, [pc, #144]	@ (8000440 <main+0x13c>)
 80003ae:	f000 f8b0 	bl	8000512 <GPIO_WritePin>
			GPIO_WritePin(GPIOJ, 2, 0);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2102      	movs	r1, #2
 80003b6:	4824      	ldr	r0, [pc, #144]	@ (8000448 <main+0x144>)
 80003b8:	f000 f8ab 	bl	8000512 <GPIO_WritePin>

			delay(1000000);
 80003bc:	4824      	ldr	r0, [pc, #144]	@ (8000450 <main+0x14c>)
 80003be:	f7ff ff8b 	bl	80002d8 <delay>

			GPIO_WritePin(GPIOJ, 2, 1);
 80003c2:	2201      	movs	r2, #1
 80003c4:	2102      	movs	r1, #2
 80003c6:	4820      	ldr	r0, [pc, #128]	@ (8000448 <main+0x144>)
 80003c8:	f000 f8a3 	bl	8000512 <GPIO_WritePin>
			GPIO_WritePin(GPIOI, 13, 0);
 80003cc:	2200      	movs	r2, #0
 80003ce:	210d      	movs	r1, #13
 80003d0:	481c      	ldr	r0, [pc, #112]	@ (8000444 <main+0x140>)
 80003d2:	f000 f89e 	bl	8000512 <GPIO_WritePin>

			delay(1000000);
 80003d6:	481e      	ldr	r0, [pc, #120]	@ (8000450 <main+0x14c>)
 80003d8:	f7ff ff7e 	bl	80002d8 <delay>

			GPIO_WritePin(GPIOI, 13, 1);
 80003dc:	2201      	movs	r2, #1
 80003de:	210d      	movs	r1, #13
 80003e0:	4818      	ldr	r0, [pc, #96]	@ (8000444 <main+0x140>)
 80003e2:	f000 f896 	bl	8000512 <GPIO_WritePin>
			GPIO_WritePin(GPIOJ, 2, 0);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2102      	movs	r1, #2
 80003ea:	4817      	ldr	r0, [pc, #92]	@ (8000448 <main+0x144>)
 80003ec:	f000 f891 	bl	8000512 <GPIO_WritePin>

			delay(1000000);
 80003f0:	4817      	ldr	r0, [pc, #92]	@ (8000450 <main+0x14c>)
 80003f2:	f7ff ff71 	bl	80002d8 <delay>

			GPIO_WritePin(GPIOJ, 2, 1);
 80003f6:	2201      	movs	r2, #1
 80003f8:	2102      	movs	r1, #2
 80003fa:	4813      	ldr	r0, [pc, #76]	@ (8000448 <main+0x144>)
 80003fc:	f000 f889 	bl	8000512 <GPIO_WritePin>
			GPIO_WritePin(GPIOD, 3, 1);
 8000400:	2201      	movs	r2, #1
 8000402:	2103      	movs	r1, #3
 8000404:	480e      	ldr	r0, [pc, #56]	@ (8000440 <main+0x13c>)
 8000406:	f000 f884 	bl	8000512 <GPIO_WritePin>

			delay(1000000);
 800040a:	4811      	ldr	r0, [pc, #68]	@ (8000450 <main+0x14c>)
 800040c:	f7ff ff64 	bl	80002d8 <delay>

			GPIO_WritePin(GPIOD, 3, 0);
 8000410:	2200      	movs	r2, #0
 8000412:	2103      	movs	r1, #3
 8000414:	480a      	ldr	r0, [pc, #40]	@ (8000440 <main+0x13c>)
 8000416:	f000 f87c 	bl	8000512 <GPIO_WritePin>
 800041a:	e7b6      	b.n	800038a <main+0x86>
		} else {
			GPIO_WritePin(GPIOD, 3, 0);
 800041c:	2200      	movs	r2, #0
 800041e:	2103      	movs	r1, #3
 8000420:	4807      	ldr	r0, [pc, #28]	@ (8000440 <main+0x13c>)
 8000422:	f000 f876 	bl	8000512 <GPIO_WritePin>
			GPIO_WritePin(GPIOI, 13, 1);
 8000426:	2201      	movs	r2, #1
 8000428:	210d      	movs	r1, #13
 800042a:	4806      	ldr	r0, [pc, #24]	@ (8000444 <main+0x140>)
 800042c:	f000 f871 	bl	8000512 <GPIO_WritePin>
			GPIO_WritePin(GPIOJ, 2, 1);
 8000430:	2201      	movs	r2, #1
 8000432:	2102      	movs	r1, #2
 8000434:	4804      	ldr	r0, [pc, #16]	@ (8000448 <main+0x144>)
 8000436:	f000 f86c 	bl	8000512 <GPIO_WritePin>
		if (GPIO_ReadPin(GPIOC, 13)) {
 800043a:	e7a6      	b.n	800038a <main+0x86>
 800043c:	580244e0 	.word	0x580244e0
 8000440:	58020c00 	.word	0x58020c00
 8000444:	58022000 	.word	0x58022000
 8000448:	58022400 	.word	0x58022400
 800044c:	58020800 	.word	0x58020800
 8000450:	000f4240 	.word	0x000f4240

08000454 <GPIO_Init>:
		}
	}
}

void GPIO_Init(GPIO_device *gpio, uint32_t pin, uint32_t mode, uint32_t otype, uint32_t speed, uint32_t pupd) {
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	60f8      	str	r0, [r7, #12]
 800045c:	60b9      	str	r1, [r7, #8]
 800045e:	607a      	str	r2, [r7, #4]
 8000460:	603b      	str	r3, [r7, #0]
    gpio->MODER = gpio->MODER & ~(3 << (2 * pin));
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	68ba      	ldr	r2, [r7, #8]
 8000468:	0052      	lsls	r2, r2, #1
 800046a:	2103      	movs	r1, #3
 800046c:	fa01 f202 	lsl.w	r2, r1, r2
 8000470:	43d2      	mvns	r2, r2
 8000472:	401a      	ands	r2, r3
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	601a      	str	r2, [r3, #0]
    gpio->MODER = gpio->MODER | (mode << (2 * pin));
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	005b      	lsls	r3, r3, #1
 8000480:	6879      	ldr	r1, [r7, #4]
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	431a      	orrs	r2, r3
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	601a      	str	r2, [r3, #0]

    gpio->OTYPER = gpio->OTYPER & ~(1 << pin);
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	2101      	movs	r1, #1
 8000492:	68ba      	ldr	r2, [r7, #8]
 8000494:	fa01 f202 	lsl.w	r2, r1, r2
 8000498:	43d2      	mvns	r2, r2
 800049a:	401a      	ands	r2, r3
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	605a      	str	r2, [r3, #4]
    gpio->OTYPER = gpio->OTYPER | (otype << pin);
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	685a      	ldr	r2, [r3, #4]
 80004a4:	6839      	ldr	r1, [r7, #0]
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ac:	431a      	orrs	r2, r3
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	605a      	str	r2, [r3, #4]

    gpio->OSPEEDR = gpio->OSPEEDR & ~(3 << (2 * pin));
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	689b      	ldr	r3, [r3, #8]
 80004b6:	68ba      	ldr	r2, [r7, #8]
 80004b8:	0052      	lsls	r2, r2, #1
 80004ba:	2103      	movs	r1, #3
 80004bc:	fa01 f202 	lsl.w	r2, r1, r2
 80004c0:	43d2      	mvns	r2, r2
 80004c2:	401a      	ands	r2, r3
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	609a      	str	r2, [r3, #8]
    gpio->OSPEEDR = gpio->OSPEEDR | (speed << (2 * pin));
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	689a      	ldr	r2, [r3, #8]
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	69b9      	ldr	r1, [r7, #24]
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	431a      	orrs	r2, r3
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	609a      	str	r2, [r3, #8]

    gpio->PUPDR = gpio->PUPDR & ~(3 << (2 * pin));
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	68ba      	ldr	r2, [r7, #8]
 80004e2:	0052      	lsls	r2, r2, #1
 80004e4:	2103      	movs	r1, #3
 80004e6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ea:	43d2      	mvns	r2, r2
 80004ec:	401a      	ands	r2, r3
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	60da      	str	r2, [r3, #12]
    gpio->PUPDR = gpio->PUPDR | (pupd << (2 * pin));
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	68da      	ldr	r2, [r3, #12]
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	69f9      	ldr	r1, [r7, #28]
 80004fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000500:	431a      	orrs	r2, r3
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	60da      	str	r2, [r3, #12]
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <GPIO_WritePin>:

void GPIO_WritePin(GPIO_device *gpio, uint32_t pin, uint32_t value) {
 8000512:	b480      	push	{r7}
 8000514:	b085      	sub	sp, #20
 8000516:	af00      	add	r7, sp, #0
 8000518:	60f8      	str	r0, [r7, #12]
 800051a:	60b9      	str	r1, [r7, #8]
 800051c:	607a      	str	r2, [r7, #4]
    if (value == 1) {
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d107      	bne.n	8000534 <GPIO_WritePin+0x22>
      gpio->BSRR = 1 << pin;
 8000524:	2201      	movs	r2, #1
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	fa02 f303 	lsl.w	r3, r2, r3
 800052c:	461a      	mov	r2, r3
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	619a      	str	r2, [r3, #24]
    } else {
      gpio->BSRR = 1 << (pin + 16);
    }
}
 8000532:	e007      	b.n	8000544 <GPIO_WritePin+0x32>
      gpio->BSRR = 1 << (pin + 16);
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	3310      	adds	r3, #16
 8000538:	2201      	movs	r2, #1
 800053a:	fa02 f303 	lsl.w	r3, r2, r3
 800053e:	461a      	mov	r2, r3
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	619a      	str	r2, [r3, #24]
}
 8000544:	bf00      	nop
 8000546:	3714      	adds	r7, #20
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <GPIO_ReadPin>:

uint32_t GPIO_ReadPin(GPIO_device *gpio, uint32_t pin) {
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
    if (gpio->IDR & (1 << pin)) {
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	691b      	ldr	r3, [r3, #16]
 800055e:	2101      	movs	r1, #1
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	fa01 f202 	lsl.w	r2, r1, r2
 8000566:	4013      	ands	r3, r2
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <GPIO_ReadPin+0x20>
      return 1;
 800056c:	2301      	movs	r3, #1
 800056e:	e000      	b.n	8000572 <GPIO_ReadPin+0x22>
    } else {
      return 0;
 8000570:	2300      	movs	r3, #0
    }
}
 8000572:	4618      	mov	r0, r3
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000582:	bf00      	nop
 8000584:	e7fd      	b.n	8000582 <NMI_Handler+0x4>

08000586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058a:	bf00      	nop
 800058c:	e7fd      	b.n	800058a <HardFault_Handler+0x4>

0800058e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000592:	bf00      	nop
 8000594:	e7fd      	b.n	8000592 <MemManage_Handler+0x4>

08000596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800059a:	bf00      	nop
 800059c:	e7fd      	b.n	800059a <BusFault_Handler+0x4>

0800059e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a2:	bf00      	nop
 80005a4:	e7fd      	b.n	80005a2 <UsageFault_Handler+0x4>

080005a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d4:	f000 f8b4 	bl	8000740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b37      	ldr	r3, [pc, #220]	@ (80006c0 <SystemInit+0xe4>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005e6:	4a36      	ldr	r2, [pc, #216]	@ (80006c0 <SystemInit+0xe4>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b34      	ldr	r3, [pc, #208]	@ (80006c4 <SystemInit+0xe8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b31      	ldr	r3, [pc, #196]	@ (80006c4 <SystemInit+0xe8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a2f      	ldr	r2, [pc, #188]	@ (80006c4 <SystemInit+0xe8>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b2e      	ldr	r3, [pc, #184]	@ (80006c8 <SystemInit+0xec>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a2d      	ldr	r2, [pc, #180]	@ (80006c8 <SystemInit+0xec>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <SystemInit+0xec>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2a      	ldr	r3, [pc, #168]	@ (80006c8 <SystemInit+0xec>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	4929      	ldr	r1, [pc, #164]	@ (80006c8 <SystemInit+0xec>)
 8000624:	4b29      	ldr	r3, [pc, #164]	@ (80006cc <SystemInit+0xf0>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b26      	ldr	r3, [pc, #152]	@ (80006c4 <SystemInit+0xe8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b23      	ldr	r3, [pc, #140]	@ (80006c4 <SystemInit+0xe8>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a21      	ldr	r2, [pc, #132]	@ (80006c4 <SystemInit+0xe8>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <SystemInit+0xec>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <SystemInit+0xec>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <SystemInit+0xec>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <SystemInit+0xec>)
 800065a:	4a1d      	ldr	r2, [pc, #116]	@ (80006d0 <SystemInit+0xf4>)
 800065c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1a      	ldr	r3, [pc, #104]	@ (80006c8 <SystemInit+0xec>)
 8000660:	4a1c      	ldr	r2, [pc, #112]	@ (80006d4 <SystemInit+0xf8>)
 8000662:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <SystemInit+0xec>)
 8000666:	4a1c      	ldr	r2, [pc, #112]	@ (80006d8 <SystemInit+0xfc>)
 8000668:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <SystemInit+0xec>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <SystemInit+0xec>)
 8000672:	4a19      	ldr	r2, [pc, #100]	@ (80006d8 <SystemInit+0xfc>)
 8000674:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <SystemInit+0xec>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <SystemInit+0xec>)
 800067e:	4a16      	ldr	r2, [pc, #88]	@ (80006d8 <SystemInit+0xfc>)
 8000680:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <SystemInit+0xec>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <SystemInit+0xec>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0e      	ldr	r2, [pc, #56]	@ (80006c8 <SystemInit+0xec>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <SystemInit+0xec>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069a:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <SystemInit+0x100>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <SystemInit+0x104>)
 80006a0:	4013      	ands	r3, r2
 80006a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006a6:	d202      	bcs.n	80006ae <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <SystemInit+0x108>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <SystemInit+0x10c>)
 80006b0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	e000ed00 	.word	0xe000ed00
 80006c4:	52002000 	.word	0x52002000
 80006c8:	58024400 	.word	0x58024400
 80006cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d0:	02020200 	.word	0x02020200
 80006d4:	01ff0000 	.word	0x01ff0000
 80006d8:	01010280 	.word	0x01010280
 80006dc:	5c001000 	.word	0x5c001000
 80006e0:	ffff0000 	.word	0xffff0000
 80006e4:	51008108 	.word	0x51008108
 80006e8:	52004000 	.word	0x52004000

080006ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80006ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000724 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006f0:	f7ff ff74 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f4:	480c      	ldr	r0, [pc, #48]	@ (8000728 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006f6:	490d      	ldr	r1, [pc, #52]	@ (800072c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000730 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006fc:	e002      	b.n	8000704 <LoopCopyDataInit>

080006fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000702:	3304      	adds	r3, #4

08000704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000708:	d3f9      	bcc.n	80006fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070a:	4a0a      	ldr	r2, [pc, #40]	@ (8000734 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800070c:	4c0a      	ldr	r4, [pc, #40]	@ (8000738 <LoopFillZerobss+0x22>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000710:	e001      	b.n	8000716 <LoopFillZerobss>

08000712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000714:	3204      	adds	r2, #4

08000716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000718:	d3fb      	bcc.n	8000712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800071a:	f000 f825 	bl	8000768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800071e:	f7ff fdf1 	bl	8000304 <main>
  bx  lr
 8000722:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000724:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000728:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800072c:	24000004 	.word	0x24000004
  ldr r2, =_sidata
 8000730:	080007d0 	.word	0x080007d0
  ldr r2, =_sbss
 8000734:	24000004 	.word	0x24000004
  ldr r4, =_ebss
 8000738:	24000024 	.word	0x24000024

0800073c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800073c:	e7fe      	b.n	800073c <ADC3_IRQHandler>
	...

08000740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000744:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <HAL_IncTick+0x20>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <HAL_IncTick+0x24>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4413      	add	r3, r2
 8000750:	4a04      	ldr	r2, [pc, #16]	@ (8000764 <HAL_IncTick+0x24>)
 8000752:	6013      	str	r3, [r2, #0]
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	24000000 	.word	0x24000000
 8000764:	24000020 	.word	0x24000020

08000768 <__libc_init_array>:
 8000768:	b570      	push	{r4, r5, r6, lr}
 800076a:	4d0d      	ldr	r5, [pc, #52]	@ (80007a0 <__libc_init_array+0x38>)
 800076c:	4c0d      	ldr	r4, [pc, #52]	@ (80007a4 <__libc_init_array+0x3c>)
 800076e:	1b64      	subs	r4, r4, r5
 8000770:	10a4      	asrs	r4, r4, #2
 8000772:	2600      	movs	r6, #0
 8000774:	42a6      	cmp	r6, r4
 8000776:	d109      	bne.n	800078c <__libc_init_array+0x24>
 8000778:	4d0b      	ldr	r5, [pc, #44]	@ (80007a8 <__libc_init_array+0x40>)
 800077a:	4c0c      	ldr	r4, [pc, #48]	@ (80007ac <__libc_init_array+0x44>)
 800077c:	f000 f818 	bl	80007b0 <_init>
 8000780:	1b64      	subs	r4, r4, r5
 8000782:	10a4      	asrs	r4, r4, #2
 8000784:	2600      	movs	r6, #0
 8000786:	42a6      	cmp	r6, r4
 8000788:	d105      	bne.n	8000796 <__libc_init_array+0x2e>
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000790:	4798      	blx	r3
 8000792:	3601      	adds	r6, #1
 8000794:	e7ee      	b.n	8000774 <__libc_init_array+0xc>
 8000796:	f855 3b04 	ldr.w	r3, [r5], #4
 800079a:	4798      	blx	r3
 800079c:	3601      	adds	r6, #1
 800079e:	e7f2      	b.n	8000786 <__libc_init_array+0x1e>
 80007a0:	080007c8 	.word	0x080007c8
 80007a4:	080007c8 	.word	0x080007c8
 80007a8:	080007c8 	.word	0x080007c8
 80007ac:	080007cc 	.word	0x080007cc

080007b0 <_init>:
 80007b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007b2:	bf00      	nop
 80007b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007b6:	bc08      	pop	{r3}
 80007b8:	469e      	mov	lr, r3
 80007ba:	4770      	bx	lr

080007bc <_fini>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	bf00      	nop
 80007c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007c2:	bc08      	pop	{r3}
 80007c4:	469e      	mov	lr, r3
 80007c6:	4770      	bx	lr
