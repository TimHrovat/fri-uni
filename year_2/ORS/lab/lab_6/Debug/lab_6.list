
lab_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004368  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004608  08004608  00005608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080046c8  080046c8  000056c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080046d0  080046d0  000056d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080046d4  080046d4  000056d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  080046d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000238  24000060  08004738  00006060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000298  08004738  00006298  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e2d6  00000000  00000000  0000608e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001ac2  00000000  00000000  00014364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000978  00000000  00000000  00015e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000752  00000000  00000000  000167a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035b0c  00000000  00000000  00016ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000d2bd  00000000  00000000  0004c9fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001576f2  00000000  00000000  00059cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b13ad  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002bc4  00000000  00000000  001b13f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005e  00000000  00000000  001b3fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080045f0 	.word	0x080045f0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	080045f0 	.word	0x080045f0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b09a      	sub	sp, #104	@ 0x68
 8000684:	af00      	add	r7, sp, #0
  MPU_Config();
 8000686:	f000 f95f 	bl	8000948 <MPU_Config>
  HAL_Init();
 800068a:	f000 fbad 	bl	8000de8 <HAL_Init>
  SystemClock_Config();
 800068e:	f000 f8f1 	bl	8000874 <SystemClock_Config>

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	4b71      	ldr	r3, [pc, #452]	@ (8000858 <main+0x1d8>)
 8000694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000698:	4a6f      	ldr	r2, [pc, #444]	@ (8000858 <main+0x1d8>)
 800069a:	f043 0302 	orr.w	r3, r3, #2
 800069e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006a2:	4b6d      	ldr	r3, [pc, #436]	@ (8000858 <main+0x1d8>)
 80006a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006a8:	f003 0302 	and.w	r3, r3, #2
 80006ac:	617b      	str	r3, [r7, #20]
 80006ae:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_USART3_CLK_ENABLE();
 80006b0:	4b69      	ldr	r3, [pc, #420]	@ (8000858 <main+0x1d8>)
 80006b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80006b6:	4a68      	ldr	r2, [pc, #416]	@ (8000858 <main+0x1d8>)
 80006b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80006c0:	4b65      	ldr	r3, [pc, #404]	@ (8000858 <main+0x1d8>)
 80006c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80006c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ce:	4b62      	ldr	r3, [pc, #392]	@ (8000858 <main+0x1d8>)
 80006d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d4:	4a60      	ldr	r2, [pc, #384]	@ (8000858 <main+0x1d8>)
 80006d6:	f043 0308 	orr.w	r3, r3, #8
 80006da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006de:	4b5e      	ldr	r3, [pc, #376]	@ (8000858 <main+0x1d8>)
 80006e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e4:	f003 0308 	and.w	r3, r3, #8
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006ec:	4b5a      	ldr	r3, [pc, #360]	@ (8000858 <main+0x1d8>)
 80006ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f2:	4a59      	ldr	r2, [pc, #356]	@ (8000858 <main+0x1d8>)
 80006f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006fc:	4b56      	ldr	r3, [pc, #344]	@ (8000858 <main+0x1d8>)
 80006fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000702:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800070a:	4b53      	ldr	r3, [pc, #332]	@ (8000858 <main+0x1d8>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000710:	4a51      	ldr	r2, [pc, #324]	@ (8000858 <main+0x1d8>)
 8000712:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000716:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800071a:	4b4f      	ldr	r3, [pc, #316]	@ (8000858 <main+0x1d8>)
 800071c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  GPIO_InitTypeDef init_structure = {0};
 8000728:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  init_structure.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 8000738:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800073c:	657b      	str	r3, [r7, #84]	@ 0x54
  init_structure.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	65bb      	str	r3, [r7, #88]	@ 0x58
  init_structure.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	65fb      	str	r3, [r7, #92]	@ 0x5c
  init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	663b      	str	r3, [r7, #96]	@ 0x60
  init_structure.Alternate = GPIO_AF7_USART3;
 800074a:	2307      	movs	r3, #7
 800074c:	667b      	str	r3, [r7, #100]	@ 0x64
  HAL_GPIO_Init(GPIOB, &init_structure);
 800074e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000752:	4619      	mov	r1, r3
 8000754:	4841      	ldr	r0, [pc, #260]	@ (800085c <main+0x1dc>)
 8000756:	f000 fd6d 	bl	8001234 <HAL_GPIO_Init>

  uart.Instance = USART3;
 800075a:	4b41      	ldr	r3, [pc, #260]	@ (8000860 <main+0x1e0>)
 800075c:	4a41      	ldr	r2, [pc, #260]	@ (8000864 <main+0x1e4>)
 800075e:	601a      	str	r2, [r3, #0]
  uart.Init.BaudRate = 115200;
 8000760:	4b3f      	ldr	r3, [pc, #252]	@ (8000860 <main+0x1e0>)
 8000762:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000766:	605a      	str	r2, [r3, #4]
  uart.Init.WordLength = UART_WORDLENGTH_8B;
 8000768:	4b3d      	ldr	r3, [pc, #244]	@ (8000860 <main+0x1e0>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  uart.Init.StopBits = UART_STOPBITS_1;
 800076e:	4b3c      	ldr	r3, [pc, #240]	@ (8000860 <main+0x1e0>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  uart.Init.Parity = UART_PARITY_NONE;
 8000774:	4b3a      	ldr	r3, [pc, #232]	@ (8000860 <main+0x1e0>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  uart.Init.Mode = UART_MODE_TX_RX;
 800077a:	4b39      	ldr	r3, [pc, #228]	@ (8000860 <main+0x1e0>)
 800077c:	220c      	movs	r2, #12
 800077e:	615a      	str	r2, [r3, #20]
  uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000780:	4b37      	ldr	r3, [pc, #220]	@ (8000860 <main+0x1e0>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  HAL_UART_Init(&uart);
 8000786:	4836      	ldr	r0, [pc, #216]	@ (8000860 <main+0x1e0>)
 8000788:	f002 f9fc 	bl	8002b84 <HAL_UART_Init>

  __HAL_UART_ENABLE_IT(&uart, UART_IT_RXNE);
 800078c:	4b34      	ldr	r3, [pc, #208]	@ (8000860 <main+0x1e0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	4b33      	ldr	r3, [pc, #204]	@ (8000860 <main+0x1e0>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f042 0220 	orr.w	r2, r2, #32
 800079a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriority(USART3_IRQn, 10, 10);
 800079c:	220a      	movs	r2, #10
 800079e:	210a      	movs	r1, #10
 80007a0:	2027      	movs	r0, #39	@ 0x27
 80007a2:	f000 fc9a 	bl	80010da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80007a6:	2027      	movs	r0, #39	@ 0x27
 80007a8:	f000 fcb1 	bl	800110e <HAL_NVIC_EnableIRQ>

  // green led
  GPIO_InitTypeDef led_pd3 = {0};
 80007ac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  led_pd3.Pin = GPIO_PIN_3;
 80007bc:	2308      	movs	r3, #8
 80007be:	643b      	str	r3, [r7, #64]	@ 0x40
  led_pd3.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	647b      	str	r3, [r7, #68]	@ 0x44
  led_pd3.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  led_pd3.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOD, &led_pd3);
 80007cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007d0:	4619      	mov	r1, r3
 80007d2:	4825      	ldr	r0, [pc, #148]	@ (8000868 <main+0x1e8>)
 80007d4:	f000 fd2e 	bl	8001234 <HAL_GPIO_Init>

  // green led
  GPIO_InitTypeDef led_pj2 = {0};
 80007d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  led_pj2.Pin = GPIO_PIN_2;
 80007e8:	2304      	movs	r3, #4
 80007ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  led_pj2.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	633b      	str	r3, [r7, #48]	@ 0x30
  led_pj2.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	637b      	str	r3, [r7, #52]	@ 0x34
  led_pj2.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOJ, &led_pj2);
 80007f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007fc:	4619      	mov	r1, r3
 80007fe:	481b      	ldr	r0, [pc, #108]	@ (800086c <main+0x1ec>)
 8000800:	f000 fd18 	bl	8001234 <HAL_GPIO_Init>

  // red led
  GPIO_InitTypeDef led_pi13 = {0};
 8000804:	f107 0318 	add.w	r3, r7, #24
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  led_pi13.Pin = GPIO_PIN_13;
 8000814:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000818:	61bb      	str	r3, [r7, #24]
  led_pi13.Mode = GPIO_MODE_OUTPUT_OD;
 800081a:	2311      	movs	r3, #17
 800081c:	61fb      	str	r3, [r7, #28]
  led_pi13.Pull = GPIO_PULLUP;
 800081e:	2301      	movs	r3, #1
 8000820:	623b      	str	r3, [r7, #32]
  led_pi13.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &led_pi13);
 8000826:	f107 0318 	add.w	r3, r7, #24
 800082a:	4619      	mov	r1, r3
 800082c:	4810      	ldr	r0, [pc, #64]	@ (8000870 <main+0x1f0>)
 800082e:	f000 fd01 	bl	8001234 <HAL_GPIO_Init>

  // turn all leds off
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2108      	movs	r1, #8
 8000836:	480c      	ldr	r0, [pc, #48]	@ (8000868 <main+0x1e8>)
 8000838:	f000 feac 	bl	8001594 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2104      	movs	r1, #4
 8000840:	480a      	ldr	r0, [pc, #40]	@ (800086c <main+0x1ec>)
 8000842:	f000 fea7 	bl	8001594 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_SET);
 8000846:	2201      	movs	r2, #1
 8000848:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800084c:	4808      	ldr	r0, [pc, #32]	@ (8000870 <main+0x1f0>)
 800084e:	f000 fea1 	bl	8001594 <HAL_GPIO_WritePin>

  while (1)
 8000852:	bf00      	nop
 8000854:	e7fd      	b.n	8000852 <main+0x1d2>
 8000856:	bf00      	nop
 8000858:	58024400 	.word	0x58024400
 800085c:	58020400 	.word	0x58020400
 8000860:	2400007c 	.word	0x2400007c
 8000864:	40004800 	.word	0x40004800
 8000868:	58020c00 	.word	0x58020c00
 800086c:	58022400 	.word	0x58022400
 8000870:	58022000 	.word	0x58022000

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b09c      	sub	sp, #112	@ 0x70
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087e:	224c      	movs	r2, #76	@ 0x4c
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f003 fa34 	bl	8003cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2220      	movs	r2, #32
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f003 fa2e 	bl	8003cf0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000894:	2002      	movs	r0, #2
 8000896:	f000 fe97 	bl	80015c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b28      	ldr	r3, [pc, #160]	@ (8000940 <SystemClock_Config+0xcc>)
 80008a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008a2:	4a27      	ldr	r2, [pc, #156]	@ (8000940 <SystemClock_Config+0xcc>)
 80008a4:	f023 0301 	bic.w	r3, r3, #1
 80008a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008aa:	4b25      	ldr	r3, [pc, #148]	@ (8000940 <SystemClock_Config+0xcc>)
 80008ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	4b23      	ldr	r3, [pc, #140]	@ (8000944 <SystemClock_Config+0xd0>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008bc:	4a21      	ldr	r2, [pc, #132]	@ (8000944 <SystemClock_Config+0xd0>)
 80008be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <SystemClock_Config+0xd0>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008d0:	bf00      	nop
 80008d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <SystemClock_Config+0xd0>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008de:	d1f8      	bne.n	80008d2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e0:	2302      	movs	r3, #2
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e8:	2340      	movs	r3, #64	@ 0x40
 80008ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fea1 	bl	800163c <HAL_RCC_OscConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000900:	f000 f84e 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000904:	233f      	movs	r3, #63	@ 0x3f
 8000906:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000908:	2300      	movs	r3, #0
 800090a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2101      	movs	r1, #1
 8000928:	4618      	mov	r0, r3
 800092a:	f001 fae1 	bl	8001ef0 <HAL_RCC_ClockConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000934:	f000 f834 	bl	80009a0 <Error_Handler>
  }
}
 8000938:	bf00      	nop
 800093a:	3770      	adds	r7, #112	@ 0x70
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	58000400 	.word	0x58000400
 8000944:	58024800 	.word	0x58024800

08000948 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800094e:	463b      	mov	r3, r7
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800095a:	f000 fbf3 	bl	8001144 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800095e:	2301      	movs	r3, #1
 8000960:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000962:	2300      	movs	r3, #0
 8000964:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800096a:	231f      	movs	r3, #31
 800096c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800096e:	2387      	movs	r3, #135	@ 0x87
 8000970:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000972:	2300      	movs	r3, #0
 8000974:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000976:	2300      	movs	r3, #0
 8000978:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800097a:	2301      	movs	r3, #1
 800097c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800097e:	2301      	movs	r3, #1
 8000980:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000982:	2300      	movs	r3, #0
 8000984:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800098a:	463b      	mov	r3, r7
 800098c:	4618      	mov	r0, r3
 800098e:	f000 fc11 	bl	80011b4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000992:	2004      	movs	r0, #4
 8000994:	f000 fbee 	bl	8001174 <HAL_MPU_Enable>

}
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <Error_Handler+0x8>

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <HAL_MspInit+0x30>)
 80009b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009b8:	4a08      	ldr	r2, [pc, #32]	@ (80009dc <HAL_MspInit+0x30>)
 80009ba:	f043 0302 	orr.w	r3, r3, #2
 80009be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_MspInit+0x30>)
 80009c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009c8:	f003 0302 	and.w	r3, r3, #2
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	58024400 	.word	0x58024400

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <NMI_Handler+0x4>

080009e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <MemManage_Handler+0x4>

080009f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a36:	f000 fa49 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <USART3_IRQHandler>:
uint8_t rx_index;
uint8_t led_status[3];

void ProcessCommand(uint8_t *command);

void USART3_IRQHandler() {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
  if (__HAL_UART_GET_IT(&uart, UART_IT_RXNE)) {
 8000a46:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <USART3_IRQHandler+0x58>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	69db      	ldr	r3, [r3, #28]
 8000a4c:	f003 0320 	and.w	r3, r3, #32
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d01c      	beq.n	8000a8e <USART3_IRQHandler+0x4e>
    uint8_t received_char = USART3->RDR;
 8000a54:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <USART3_IRQHandler+0x5c>)
 8000a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a58:	71fb      	strb	r3, [r7, #7]

    // Če prejmemo '\r', procesiramo ukaz
    if (received_char == '\r') {
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b0d      	cmp	r3, #13
 8000a5e:	d10c      	bne.n	8000a7a <USART3_IRQHandler+0x3a>
      rx_buffer[rx_index] = '\0';  // Dodaj konec stringa
 8000a60:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <USART3_IRQHandler+0x60>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <USART3_IRQHandler+0x64>)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	5499      	strb	r1, [r3, r2]
      ProcessCommand(rx_buffer);
 8000a6c:	480d      	ldr	r0, [pc, #52]	@ (8000aa4 <USART3_IRQHandler+0x64>)
 8000a6e:	f000 f81b 	bl	8000aa8 <ProcessCommand>
      rx_index = 0;  // Ponastavi buffer
 8000a72:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <USART3_IRQHandler+0x60>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
    } else {
      // Shrani znak v buffer
      rx_buffer[rx_index++] = received_char;
    }
  }
}
 8000a78:	e009      	b.n	8000a8e <USART3_IRQHandler+0x4e>
      rx_buffer[rx_index++] = received_char;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <USART3_IRQHandler+0x60>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	1c5a      	adds	r2, r3, #1
 8000a80:	b2d1      	uxtb	r1, r2
 8000a82:	4a07      	ldr	r2, [pc, #28]	@ (8000aa0 <USART3_IRQHandler+0x60>)
 8000a84:	7011      	strb	r1, [r2, #0]
 8000a86:	4619      	mov	r1, r3
 8000a88:	4a06      	ldr	r2, [pc, #24]	@ (8000aa4 <USART3_IRQHandler+0x64>)
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	5453      	strb	r3, [r2, r1]
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2400007c 	.word	0x2400007c
 8000a9c:	40004800 	.word	0x40004800
 8000aa0:	24000142 	.word	0x24000142
 8000aa4:	24000110 	.word	0x24000110

08000aa8 <ProcessCommand>:

void ProcessCommand(uint8_t *command) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	@ 0x28
 8000aac:	af02      	add	r7, sp, #8
 8000aae:	6078      	str	r0, [r7, #4]
  if (strncmp((char *)command, "LED 1 ON", 8) == 0) {
 8000ab0:	2208      	movs	r2, #8
 8000ab2:	494b      	ldr	r1, [pc, #300]	@ (8000be0 <ProcessCommand+0x138>)
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f003 f909 	bl	8003ccc <strncmp>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d108      	bne.n	8000ad2 <ProcessCommand+0x2a>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2108      	movs	r1, #8
 8000ac4:	4847      	ldr	r0, [pc, #284]	@ (8000be4 <ProcessCommand+0x13c>)
 8000ac6:	f000 fd65 	bl	8001594 <HAL_GPIO_WritePin>
    led_status[0] = 1;
 8000aca:	4b47      	ldr	r3, [pc, #284]	@ (8000be8 <ProcessCommand+0x140>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
 8000ad0:	e055      	b.n	8000b7e <ProcessCommand+0xd6>
  } else if (strncmp((char *)command, "LED 1 OFF", 9) == 0) {
 8000ad2:	2209      	movs	r2, #9
 8000ad4:	4945      	ldr	r1, [pc, #276]	@ (8000bec <ProcessCommand+0x144>)
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f003 f8f8 	bl	8003ccc <strncmp>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d108      	bne.n	8000af4 <ProcessCommand+0x4c>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2108      	movs	r1, #8
 8000ae6:	483f      	ldr	r0, [pc, #252]	@ (8000be4 <ProcessCommand+0x13c>)
 8000ae8:	f000 fd54 	bl	8001594 <HAL_GPIO_WritePin>
    led_status[0] = 0;
 8000aec:	4b3e      	ldr	r3, [pc, #248]	@ (8000be8 <ProcessCommand+0x140>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
 8000af2:	e044      	b.n	8000b7e <ProcessCommand+0xd6>
  } else if (strncmp((char *)command, "LED 2 ON", 8) == 0) {
 8000af4:	2208      	movs	r2, #8
 8000af6:	493e      	ldr	r1, [pc, #248]	@ (8000bf0 <ProcessCommand+0x148>)
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f003 f8e7 	bl	8003ccc <strncmp>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d108      	bne.n	8000b16 <ProcessCommand+0x6e>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2104      	movs	r1, #4
 8000b08:	483a      	ldr	r0, [pc, #232]	@ (8000bf4 <ProcessCommand+0x14c>)
 8000b0a:	f000 fd43 	bl	8001594 <HAL_GPIO_WritePin>
    led_status[1] = 1;
 8000b0e:	4b36      	ldr	r3, [pc, #216]	@ (8000be8 <ProcessCommand+0x140>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	705a      	strb	r2, [r3, #1]
 8000b14:	e033      	b.n	8000b7e <ProcessCommand+0xd6>
  } else if (strncmp((char *)command, "LED 2 OFF", 9) == 0) {
 8000b16:	2209      	movs	r2, #9
 8000b18:	4937      	ldr	r1, [pc, #220]	@ (8000bf8 <ProcessCommand+0x150>)
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f003 f8d6 	bl	8003ccc <strncmp>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d108      	bne.n	8000b38 <ProcessCommand+0x90>
	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2104      	movs	r1, #4
 8000b2a:	4832      	ldr	r0, [pc, #200]	@ (8000bf4 <ProcessCommand+0x14c>)
 8000b2c:	f000 fd32 	bl	8001594 <HAL_GPIO_WritePin>
    led_status[1] = 0;
 8000b30:	4b2d      	ldr	r3, [pc, #180]	@ (8000be8 <ProcessCommand+0x140>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	705a      	strb	r2, [r3, #1]
 8000b36:	e022      	b.n	8000b7e <ProcessCommand+0xd6>
  } else if (strncmp((char *)command, "LED 3 ON", 8) == 0) {
 8000b38:	2208      	movs	r2, #8
 8000b3a:	4930      	ldr	r1, [pc, #192]	@ (8000bfc <ProcessCommand+0x154>)
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f003 f8c5 	bl	8003ccc <strncmp>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d109      	bne.n	8000b5c <ProcessCommand+0xb4>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b4e:	482c      	ldr	r0, [pc, #176]	@ (8000c00 <ProcessCommand+0x158>)
 8000b50:	f000 fd20 	bl	8001594 <HAL_GPIO_WritePin>
    led_status[2] = 1;
 8000b54:	4b24      	ldr	r3, [pc, #144]	@ (8000be8 <ProcessCommand+0x140>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	709a      	strb	r2, [r3, #2]
 8000b5a:	e010      	b.n	8000b7e <ProcessCommand+0xd6>
  } else if (strncmp((char *)command, "LED 3 OFF", 9) == 0) {
 8000b5c:	2209      	movs	r2, #9
 8000b5e:	4929      	ldr	r1, [pc, #164]	@ (8000c04 <ProcessCommand+0x15c>)
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f003 f8b3 	bl	8003ccc <strncmp>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d108      	bne.n	8000b7e <ProcessCommand+0xd6>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b72:	4823      	ldr	r0, [pc, #140]	@ (8000c00 <ProcessCommand+0x158>)
 8000b74:	f000 fd0e 	bl	8001594 <HAL_GPIO_WritePin>
    led_status[2] = 0;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <ProcessCommand+0x140>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	709a      	strb	r2, [r3, #2]
  }

  // Pošlji stanje LED
  char response[20];
  snprintf(response, sizeof(response), "LED: %s, %s, %s\r\n",
           led_status[0] ? "ON" : "OFF",
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000be8 <ProcessCommand+0x140>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
  snprintf(response, sizeof(response), "LED: %s, %s, %s\r\n",
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <ProcessCommand+0xe2>
 8000b86:	4920      	ldr	r1, [pc, #128]	@ (8000c08 <ProcessCommand+0x160>)
 8000b88:	e000      	b.n	8000b8c <ProcessCommand+0xe4>
 8000b8a:	4920      	ldr	r1, [pc, #128]	@ (8000c0c <ProcessCommand+0x164>)
           led_status[1] ? "ON" : "OFF",
 8000b8c:	4b16      	ldr	r3, [pc, #88]	@ (8000be8 <ProcessCommand+0x140>)
 8000b8e:	785b      	ldrb	r3, [r3, #1]
  snprintf(response, sizeof(response), "LED: %s, %s, %s\r\n",
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <ProcessCommand+0xf0>
 8000b94:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <ProcessCommand+0x160>)
 8000b96:	e000      	b.n	8000b9a <ProcessCommand+0xf2>
 8000b98:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <ProcessCommand+0x164>)
           led_status[2] ? "ON" : "OFF");
 8000b9a:	4a13      	ldr	r2, [pc, #76]	@ (8000be8 <ProcessCommand+0x140>)
 8000b9c:	7892      	ldrb	r2, [r2, #2]
  snprintf(response, sizeof(response), "LED: %s, %s, %s\r\n",
 8000b9e:	2a00      	cmp	r2, #0
 8000ba0:	d001      	beq.n	8000ba6 <ProcessCommand+0xfe>
 8000ba2:	4a19      	ldr	r2, [pc, #100]	@ (8000c08 <ProcessCommand+0x160>)
 8000ba4:	e000      	b.n	8000ba8 <ProcessCommand+0x100>
 8000ba6:	4a19      	ldr	r2, [pc, #100]	@ (8000c0c <ProcessCommand+0x164>)
 8000ba8:	f107 000c 	add.w	r0, r7, #12
 8000bac:	9201      	str	r2, [sp, #4]
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	4a17      	ldr	r2, [pc, #92]	@ (8000c10 <ProcessCommand+0x168>)
 8000bb4:	2114      	movs	r1, #20
 8000bb6:	f003 f855 	bl	8003c64 <sniprintf>
  HAL_UART_Transmit(&uart, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fb8e 	bl	80002e0 <strlen>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	f107 010c 	add.w	r1, r7, #12
 8000bcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bd0:	4810      	ldr	r0, [pc, #64]	@ (8000c14 <ProcessCommand+0x16c>)
 8000bd2:	f002 f831 	bl	8002c38 <HAL_UART_Transmit>
}
 8000bd6:	bf00      	nop
 8000bd8:	3720      	adds	r7, #32
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	08004608 	.word	0x08004608
 8000be4:	58020c00 	.word	0x58020c00
 8000be8:	24000144 	.word	0x24000144
 8000bec:	08004614 	.word	0x08004614
 8000bf0:	08004620 	.word	0x08004620
 8000bf4:	58022400 	.word	0x58022400
 8000bf8:	0800462c 	.word	0x0800462c
 8000bfc:	08004638 	.word	0x08004638
 8000c00:	58022000 	.word	0x58022000
 8000c04:	08004644 	.word	0x08004644
 8000c08:	08004650 	.word	0x08004650
 8000c0c:	08004654 	.word	0x08004654
 8000c10:	08004658 	.word	0x08004658
 8000c14:	2400007c 	.word	0x2400007c

08000c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a14      	ldr	r2, [pc, #80]	@ (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c34:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	@ (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c48:	f003 f85a 	bl	8003d00 <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <_sbrk+0x64>)
 8000c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	24080000 	.word	0x24080000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	24000148 	.word	0x24000148
 8000c80:	24000298 	.word	0x24000298

08000c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c88:	4b37      	ldr	r3, [pc, #220]	@ (8000d68 <SystemInit+0xe4>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c8e:	4a36      	ldr	r2, [pc, #216]	@ (8000d68 <SystemInit+0xe4>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c98:	4b34      	ldr	r3, [pc, #208]	@ (8000d6c <SystemInit+0xe8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 030f 	and.w	r3, r3, #15
 8000ca0:	2b06      	cmp	r3, #6
 8000ca2:	d807      	bhi.n	8000cb4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ca4:	4b31      	ldr	r3, [pc, #196]	@ (8000d6c <SystemInit+0xe8>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f023 030f 	bic.w	r3, r3, #15
 8000cac:	4a2f      	ldr	r2, [pc, #188]	@ (8000d6c <SystemInit+0xe8>)
 8000cae:	f043 0307 	orr.w	r3, r3, #7
 8000cb2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000cb4:	4b2e      	ldr	r3, [pc, #184]	@ (8000d70 <SystemInit+0xec>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a2d      	ldr	r2, [pc, #180]	@ (8000d70 <SystemInit+0xec>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8000d70 <SystemInit+0xec>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000d70 <SystemInit+0xec>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	4929      	ldr	r1, [pc, #164]	@ (8000d70 <SystemInit+0xec>)
 8000ccc:	4b29      	ldr	r3, [pc, #164]	@ (8000d74 <SystemInit+0xf0>)
 8000cce:	4013      	ands	r3, r2
 8000cd0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cd2:	4b26      	ldr	r3, [pc, #152]	@ (8000d6c <SystemInit+0xe8>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0308 	and.w	r3, r3, #8
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d007      	beq.n	8000cee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cde:	4b23      	ldr	r3, [pc, #140]	@ (8000d6c <SystemInit+0xe8>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f023 030f 	bic.w	r3, r3, #15
 8000ce6:	4a21      	ldr	r2, [pc, #132]	@ (8000d6c <SystemInit+0xe8>)
 8000ce8:	f043 0307 	orr.w	r3, r3, #7
 8000cec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000cee:	4b20      	ldr	r3, [pc, #128]	@ (8000d70 <SystemInit+0xec>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d70 <SystemInit+0xec>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000d70 <SystemInit+0xec>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	@ (8000d70 <SystemInit+0xec>)
 8000d02:	4a1d      	ldr	r2, [pc, #116]	@ (8000d78 <SystemInit+0xf4>)
 8000d04:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	@ (8000d70 <SystemInit+0xec>)
 8000d08:	4a1c      	ldr	r2, [pc, #112]	@ (8000d7c <SystemInit+0xf8>)
 8000d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d0c:	4b18      	ldr	r3, [pc, #96]	@ (8000d70 <SystemInit+0xec>)
 8000d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000d80 <SystemInit+0xfc>)
 8000d10:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d12:	4b17      	ldr	r3, [pc, #92]	@ (8000d70 <SystemInit+0xec>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d18:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <SystemInit+0xec>)
 8000d1a:	4a19      	ldr	r2, [pc, #100]	@ (8000d80 <SystemInit+0xfc>)
 8000d1c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	@ (8000d70 <SystemInit+0xec>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d24:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <SystemInit+0xec>)
 8000d26:	4a16      	ldr	r2, [pc, #88]	@ (8000d80 <SystemInit+0xfc>)
 8000d28:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <SystemInit+0xec>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <SystemInit+0xec>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0e      	ldr	r2, [pc, #56]	@ (8000d70 <SystemInit+0xec>)
 8000d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <SystemInit+0xec>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <SystemInit+0x100>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <SystemInit+0x104>)
 8000d48:	4013      	ands	r3, r2
 8000d4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d4e:	d202      	bcs.n	8000d56 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000d50:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <SystemInit+0x108>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <SystemInit+0x10c>)
 8000d58:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d5c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00
 8000d6c:	52002000 	.word	0x52002000
 8000d70:	58024400 	.word	0x58024400
 8000d74:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d78:	02020200 	.word	0x02020200
 8000d7c:	01ff0000 	.word	0x01ff0000
 8000d80:	01010280 	.word	0x01010280
 8000d84:	5c001000 	.word	0x5c001000
 8000d88:	ffff0000 	.word	0xffff0000
 8000d8c:	51008108 	.word	0x51008108
 8000d90:	52004000 	.word	0x52004000

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d98:	f7ff ff74 	bl	8000c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d9c:	480c      	ldr	r0, [pc, #48]	@ (8000dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d9e:	490d      	ldr	r1, [pc, #52]	@ (8000dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000da0:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db4:	4c0a      	ldr	r4, [pc, #40]	@ (8000de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f002 ffa3 	bl	8003d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fc5b 	bl	8000680 <main>
  bx  lr
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dcc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000dd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000dd4:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8000dd8:	080046d8 	.word	0x080046d8
  ldr r2, =_sbss
 8000ddc:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8000de0:	24000298 	.word	0x24000298

08000de4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC3_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dee:	2003      	movs	r0, #3
 8000df0:	f000 f968 	bl	80010c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000df4:	f001 fa32 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <HAL_Init+0x68>)
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	0a1b      	lsrs	r3, r3, #8
 8000e00:	f003 030f 	and.w	r3, r3, #15
 8000e04:	4913      	ldr	r1, [pc, #76]	@ (8000e54 <HAL_Init+0x6c>)
 8000e06:	5ccb      	ldrb	r3, [r1, r3]
 8000e08:	f003 031f 	and.w	r3, r3, #31
 8000e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <HAL_Init+0x68>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e54 <HAL_Init+0x6c>)
 8000e1c:	5cd3      	ldrb	r3, [r2, r3]
 8000e1e:	f003 031f 	and.w	r3, r3, #31
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	fa22 f303 	lsr.w	r3, r2, r3
 8000e28:	4a0b      	ldr	r2, [pc, #44]	@ (8000e58 <HAL_Init+0x70>)
 8000e2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e5c <HAL_Init+0x74>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e32:	200f      	movs	r0, #15
 8000e34:	f000 f814 	bl	8000e60 <HAL_InitTick>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e002      	b.n	8000e48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e42:	f7ff fdb3 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	58024400 	.word	0x58024400
 8000e54:	0800466c 	.word	0x0800466c
 8000e58:	24000004 	.word	0x24000004
 8000e5c:	24000000 	.word	0x24000000

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e68:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <HAL_InitTick+0x60>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e021      	b.n	8000eb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e74:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <HAL_InitTick+0x64>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <HAL_InitTick+0x60>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f94d 	bl	800112a <HAL_SYSTICK_Config>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00e      	b.n	8000eb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d80a      	bhi.n	8000eb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ea8:	f000 f917 	bl	80010da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eac:	4a06      	ldr	r2, [pc, #24]	@ (8000ec8 <HAL_InitTick+0x68>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2400000c 	.word	0x2400000c
 8000ec4:	24000000 	.word	0x24000000
 8000ec8:	24000008 	.word	0x24000008

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	@ (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	2400000c 	.word	0x2400000c
 8000ef0:	2400014c 	.word	0x2400014c

08000ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	@ (8000f08 <HAL_GetTick+0x14>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	2400014c 	.word	0x2400014c

08000f0c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f10:	4b03      	ldr	r3, [pc, #12]	@ (8000f20 <HAL_GetREVID+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	0c1b      	lsrs	r3, r3, #16
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	5c001000 	.word	0x5c001000

08000f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f34:	4b0b      	ldr	r3, [pc, #44]	@ (8000f64 <__NVIC_SetPriorityGrouping+0x40>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	@ (8000f64 <__NVIC_SetPriorityGrouping+0x40>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00
 8000f68:	05fa0000 	.word	0x05fa0000

08000f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f70:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <__NVIC_GetPriorityGrouping+0x18>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	f003 0307 	and.w	r3, r3, #7
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	db0b      	blt.n	8000fb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	f003 021f 	and.w	r2, r3, #31
 8000fa0:	4907      	ldr	r1, [pc, #28]	@ (8000fc0 <__NVIC_EnableIRQ+0x38>)
 8000fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	2001      	movs	r0, #1
 8000faa:	fa00 f202 	lsl.w	r2, r0, r2
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e100 	.word	0xe000e100

08000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	@ (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	@ (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	@ 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf28      	it	cs
 8001036:	2304      	movcs	r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3304      	adds	r3, #4
 800103e:	2b06      	cmp	r3, #6
 8001040:	d902      	bls.n	8001048 <NVIC_EncodePriority+0x30>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b03      	subs	r3, #3
 8001046:	e000      	b.n	800104a <NVIC_EncodePriority+0x32>
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001060:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43d9      	mvns	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4313      	orrs	r3, r2
         );
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	@ 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001090:	d301      	bcc.n	8001096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001092:	2301      	movs	r3, #1
 8001094:	e00f      	b.n	80010b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001096:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <SysTick_Config+0x40>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109e:	210f      	movs	r1, #15
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010a4:	f7ff ff8e 	bl	8000fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <SysTick_Config+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <SysTick_Config+0x40>)
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff29 	bl	8000f24 <__NVIC_SetPriorityGrouping>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010e8:	f7ff ff40 	bl	8000f6c <__NVIC_GetPriorityGrouping>
 80010ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	6978      	ldr	r0, [r7, #20]
 80010f4:	f7ff ff90 	bl	8001018 <NVIC_EncodePriority>
 80010f8:	4602      	mov	r2, r0
 80010fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff5f 	bl	8000fc4 <__NVIC_SetPriority>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001118:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff33 	bl	8000f88 <__NVIC_EnableIRQ>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffa4 	bl	8001080 <SysTick_Config>
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001148:	f3bf 8f5f 	dmb	sy
}
 800114c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800114e:	4b07      	ldr	r3, [pc, #28]	@ (800116c <HAL_MPU_Disable+0x28>)
 8001150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001152:	4a06      	ldr	r2, [pc, #24]	@ (800116c <HAL_MPU_Disable+0x28>)
 8001154:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001158:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800115a:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <HAL_MPU_Disable+0x2c>)
 800115c:	2200      	movs	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00
 8001170:	e000ed90 	.word	0xe000ed90

08001174 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800117c:	4a0b      	ldr	r2, [pc, #44]	@ (80011ac <HAL_MPU_Enable+0x38>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001186:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <HAL_MPU_Enable+0x3c>)
 8001188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800118a:	4a09      	ldr	r2, [pc, #36]	@ (80011b0 <HAL_MPU_Enable+0x3c>)
 800118c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001190:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001192:	f3bf 8f4f 	dsb	sy
}
 8001196:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001198:	f3bf 8f6f 	isb	sy
}
 800119c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000ed90 	.word	0xe000ed90
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	785a      	ldrb	r2, [r3, #1]
 80011c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001230 <HAL_MPU_ConfigRegion+0x7c>)
 80011c2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80011c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <HAL_MPU_ConfigRegion+0x7c>)
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	4a19      	ldr	r2, [pc, #100]	@ (8001230 <HAL_MPU_ConfigRegion+0x7c>)
 80011ca:	f023 0301 	bic.w	r3, r3, #1
 80011ce:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80011d0:	4a17      	ldr	r2, [pc, #92]	@ (8001230 <HAL_MPU_ConfigRegion+0x7c>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7b1b      	ldrb	r3, [r3, #12]
 80011dc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7adb      	ldrb	r3, [r3, #11]
 80011e2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	7a9b      	ldrb	r3, [r3, #10]
 80011ea:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	7b5b      	ldrb	r3, [r3, #13]
 80011f2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	7b9b      	ldrb	r3, [r3, #14]
 80011fa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7bdb      	ldrb	r3, [r3, #15]
 8001202:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001204:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7a5b      	ldrb	r3, [r3, #9]
 800120a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800120c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7a1b      	ldrb	r3, [r3, #8]
 8001212:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001214:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	7812      	ldrb	r2, [r2, #0]
 800121a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800121c:	4a04      	ldr	r2, [pc, #16]	@ (8001230 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800121e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001220:	6113      	str	r3, [r2, #16]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed90 	.word	0xe000ed90

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	@ 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001242:	4b89      	ldr	r3, [pc, #548]	@ (8001468 <HAL_GPIO_Init+0x234>)
 8001244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001246:	e194      	b.n	8001572 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	2101      	movs	r1, #1
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	fa01 f303 	lsl.w	r3, r1, r3
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 8186 	beq.w	800156c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b01      	cmp	r3, #1
 800126a:	d005      	beq.n	8001278 <HAL_GPIO_Init+0x44>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d130      	bne.n	80012da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ae:	2201      	movs	r2, #1
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	f003 0201 	and.w	r2, r3, #1
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	d017      	beq.n	8001316 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	2203      	movs	r2, #3
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d123      	bne.n	800136a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	08da      	lsrs	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3208      	adds	r2, #8
 800132a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	691a      	ldr	r2, [r3, #16]
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	08da      	lsrs	r2, r3, #3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3208      	adds	r2, #8
 8001364:	69b9      	ldr	r1, [r7, #24]
 8001366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	2203      	movs	r2, #3
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0203 	and.w	r2, r3, #3
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 80e0 	beq.w	800156c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ac:	4b2f      	ldr	r3, [pc, #188]	@ (800146c <HAL_GPIO_Init+0x238>)
 80013ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013b2:	4a2e      	ldr	r2, [pc, #184]	@ (800146c <HAL_GPIO_Init+0x238>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013bc:	4b2b      	ldr	r3, [pc, #172]	@ (800146c <HAL_GPIO_Init+0x238>)
 80013be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ca:	4a29      	ldr	r2, [pc, #164]	@ (8001470 <HAL_GPIO_Init+0x23c>)
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	3302      	adds	r3, #2
 80013d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	220f      	movs	r2, #15
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a20      	ldr	r2, [pc, #128]	@ (8001474 <HAL_GPIO_Init+0x240>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d052      	beq.n	800149c <HAL_GPIO_Init+0x268>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001478 <HAL_GPIO_Init+0x244>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d031      	beq.n	8001462 <HAL_GPIO_Init+0x22e>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a1e      	ldr	r2, [pc, #120]	@ (800147c <HAL_GPIO_Init+0x248>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d02b      	beq.n	800145e <HAL_GPIO_Init+0x22a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a1d      	ldr	r2, [pc, #116]	@ (8001480 <HAL_GPIO_Init+0x24c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d025      	beq.n	800145a <HAL_GPIO_Init+0x226>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a1c      	ldr	r2, [pc, #112]	@ (8001484 <HAL_GPIO_Init+0x250>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d01f      	beq.n	8001456 <HAL_GPIO_Init+0x222>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a1b      	ldr	r2, [pc, #108]	@ (8001488 <HAL_GPIO_Init+0x254>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d019      	beq.n	8001452 <HAL_GPIO_Init+0x21e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a1a      	ldr	r2, [pc, #104]	@ (800148c <HAL_GPIO_Init+0x258>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d013      	beq.n	800144e <HAL_GPIO_Init+0x21a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a19      	ldr	r2, [pc, #100]	@ (8001490 <HAL_GPIO_Init+0x25c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d00d      	beq.n	800144a <HAL_GPIO_Init+0x216>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a18      	ldr	r2, [pc, #96]	@ (8001494 <HAL_GPIO_Init+0x260>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d007      	beq.n	8001446 <HAL_GPIO_Init+0x212>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a17      	ldr	r2, [pc, #92]	@ (8001498 <HAL_GPIO_Init+0x264>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d101      	bne.n	8001442 <HAL_GPIO_Init+0x20e>
 800143e:	2309      	movs	r3, #9
 8001440:	e02d      	b.n	800149e <HAL_GPIO_Init+0x26a>
 8001442:	230a      	movs	r3, #10
 8001444:	e02b      	b.n	800149e <HAL_GPIO_Init+0x26a>
 8001446:	2308      	movs	r3, #8
 8001448:	e029      	b.n	800149e <HAL_GPIO_Init+0x26a>
 800144a:	2307      	movs	r3, #7
 800144c:	e027      	b.n	800149e <HAL_GPIO_Init+0x26a>
 800144e:	2306      	movs	r3, #6
 8001450:	e025      	b.n	800149e <HAL_GPIO_Init+0x26a>
 8001452:	2305      	movs	r3, #5
 8001454:	e023      	b.n	800149e <HAL_GPIO_Init+0x26a>
 8001456:	2304      	movs	r3, #4
 8001458:	e021      	b.n	800149e <HAL_GPIO_Init+0x26a>
 800145a:	2303      	movs	r3, #3
 800145c:	e01f      	b.n	800149e <HAL_GPIO_Init+0x26a>
 800145e:	2302      	movs	r3, #2
 8001460:	e01d      	b.n	800149e <HAL_GPIO_Init+0x26a>
 8001462:	2301      	movs	r3, #1
 8001464:	e01b      	b.n	800149e <HAL_GPIO_Init+0x26a>
 8001466:	bf00      	nop
 8001468:	58000080 	.word	0x58000080
 800146c:	58024400 	.word	0x58024400
 8001470:	58000400 	.word	0x58000400
 8001474:	58020000 	.word	0x58020000
 8001478:	58020400 	.word	0x58020400
 800147c:	58020800 	.word	0x58020800
 8001480:	58020c00 	.word	0x58020c00
 8001484:	58021000 	.word	0x58021000
 8001488:	58021400 	.word	0x58021400
 800148c:	58021800 	.word	0x58021800
 8001490:	58021c00 	.word	0x58021c00
 8001494:	58022000 	.word	0x58022000
 8001498:	58022400 	.word	0x58022400
 800149c:	2300      	movs	r3, #0
 800149e:	69fa      	ldr	r2, [r7, #28]
 80014a0:	f002 0203 	and.w	r2, r2, #3
 80014a4:	0092      	lsls	r2, r2, #2
 80014a6:	4093      	lsls	r3, r2
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ae:	4938      	ldr	r1, [pc, #224]	@ (8001590 <HAL_GPIO_Init+0x35c>)
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	089b      	lsrs	r3, r3, #2
 80014b4:	3302      	adds	r3, #2
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80014e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80014ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001510:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	3301      	adds	r3, #1
 8001570:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa22 f303 	lsr.w	r3, r2, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	f47f ae63 	bne.w	8001248 <HAL_GPIO_Init+0x14>
  }
}
 8001582:	bf00      	nop
 8001584:	bf00      	nop
 8001586:	3724      	adds	r7, #36	@ 0x24
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	58000400 	.word	0x58000400

08001594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	807b      	strh	r3, [r7, #2]
 80015a0:	4613      	mov	r3, r2
 80015a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015a4:	787b      	ldrb	r3, [r7, #1]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015aa:	887a      	ldrh	r2, [r7, #2]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80015b0:	e003      	b.n	80015ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015b2:	887b      	ldrh	r3, [r7, #2]
 80015b4:	041a      	lsls	r2, r3, #16
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	619a      	str	r2, [r3, #24]
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80015d0:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <HAL_PWREx_ConfigSupply+0x70>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d00a      	beq.n	80015f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80015dc:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <HAL_PWREx_ConfigSupply+0x70>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d001      	beq.n	80015ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e01f      	b.n	800162e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e01d      	b.n	800162e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80015f2:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <HAL_PWREx_ConfigSupply+0x70>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	f023 0207 	bic.w	r2, r3, #7
 80015fa:	490f      	ldr	r1, [pc, #60]	@ (8001638 <HAL_PWREx_ConfigSupply+0x70>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4313      	orrs	r3, r2
 8001600:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001602:	f7ff fc77 	bl	8000ef4 <HAL_GetTick>
 8001606:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001608:	e009      	b.n	800161e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800160a:	f7ff fc73 	bl	8000ef4 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001618:	d901      	bls.n	800161e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e007      	b.n	800162e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800161e:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_PWREx_ConfigSupply+0x70>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001626:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800162a:	d1ee      	bne.n	800160a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	58024800 	.word	0x58024800

0800163c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08c      	sub	sp, #48	@ 0x30
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	f000 bc48 	b.w	8001ee0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 8088 	beq.w	800176e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800165e:	4b99      	ldr	r3, [pc, #612]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001666:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001668:	4b96      	ldr	r3, [pc, #600]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 800166a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800166e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001670:	2b10      	cmp	r3, #16
 8001672:	d007      	beq.n	8001684 <HAL_RCC_OscConfig+0x48>
 8001674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001676:	2b18      	cmp	r3, #24
 8001678:	d111      	bne.n	800169e <HAL_RCC_OscConfig+0x62>
 800167a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d10c      	bne.n	800169e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	4b8f      	ldr	r3, [pc, #572]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d06d      	beq.n	800176c <HAL_RCC_OscConfig+0x130>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d169      	bne.n	800176c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	f000 bc21 	b.w	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016a6:	d106      	bne.n	80016b6 <HAL_RCC_OscConfig+0x7a>
 80016a8:	4b86      	ldr	r3, [pc, #536]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a85      	ldr	r2, [pc, #532]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	e02e      	b.n	8001714 <HAL_RCC_OscConfig+0xd8>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x9c>
 80016be:	4b81      	ldr	r3, [pc, #516]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a80      	ldr	r2, [pc, #512]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	4b7e      	ldr	r3, [pc, #504]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a7d      	ldr	r2, [pc, #500]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e01d      	b.n	8001714 <HAL_RCC_OscConfig+0xd8>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016e0:	d10c      	bne.n	80016fc <HAL_RCC_OscConfig+0xc0>
 80016e2:	4b78      	ldr	r3, [pc, #480]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a77      	ldr	r2, [pc, #476]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	4b75      	ldr	r3, [pc, #468]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a74      	ldr	r2, [pc, #464]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	e00b      	b.n	8001714 <HAL_RCC_OscConfig+0xd8>
 80016fc:	4b71      	ldr	r3, [pc, #452]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a70      	ldr	r2, [pc, #448]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b6e      	ldr	r3, [pc, #440]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a6d      	ldr	r2, [pc, #436]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 800170e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d013      	beq.n	8001744 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171c:	f7ff fbea 	bl	8000ef4 <HAL_GetTick>
 8001720:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001724:	f7ff fbe6 	bl	8000ef4 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b64      	cmp	r3, #100	@ 0x64
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e3d4      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001736:	4b63      	ldr	r3, [pc, #396]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0xe8>
 8001742:	e014      	b.n	800176e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff fbd6 	bl	8000ef4 <HAL_GetTick>
 8001748:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fbd2 	bl	8000ef4 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	@ 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e3c0      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800175e:	4b59      	ldr	r3, [pc, #356]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x110>
 800176a:	e000      	b.n	800176e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80ca 	beq.w	8001910 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800177c:	4b51      	ldr	r3, [pc, #324]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001784:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001786:	4b4f      	ldr	r3, [pc, #316]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800178a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d007      	beq.n	80017a2 <HAL_RCC_OscConfig+0x166>
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	2b18      	cmp	r3, #24
 8001796:	d156      	bne.n	8001846 <HAL_RCC_OscConfig+0x20a>
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d151      	bne.n	8001846 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017a2:	4b48      	ldr	r3, [pc, #288]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d005      	beq.n	80017ba <HAL_RCC_OscConfig+0x17e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e392      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017ba:	4b42      	ldr	r3, [pc, #264]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 0219 	bic.w	r2, r3, #25
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	493f      	ldr	r1, [pc, #252]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff fb92 	bl	8000ef4 <HAL_GetTick>
 80017d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d4:	f7ff fb8e 	bl	8000ef4 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e37c      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017e6:	4b37      	ldr	r3, [pc, #220]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f2:	f7ff fb8b 	bl	8000f0c <HAL_GetREVID>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d817      	bhi.n	8001830 <HAL_RCC_OscConfig+0x1f4>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	2b40      	cmp	r3, #64	@ 0x40
 8001806:	d108      	bne.n	800181a <HAL_RCC_OscConfig+0x1de>
 8001808:	4b2e      	ldr	r3, [pc, #184]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001810:	4a2c      	ldr	r2, [pc, #176]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001812:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001816:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001818:	e07a      	b.n	8001910 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181a:	4b2a      	ldr	r3, [pc, #168]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	031b      	lsls	r3, r3, #12
 8001828:	4926      	ldr	r1, [pc, #152]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 800182a:	4313      	orrs	r3, r2
 800182c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800182e:	e06f      	b.n	8001910 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001830:	4b24      	ldr	r3, [pc, #144]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	061b      	lsls	r3, r3, #24
 800183e:	4921      	ldr	r1, [pc, #132]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001844:	e064      	b.n	8001910 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d047      	beq.n	80018de <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800184e:	4b1d      	ldr	r3, [pc, #116]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 0219 	bic.w	r2, r3, #25
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	491a      	ldr	r1, [pc, #104]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff fb48 	bl	8000ef4 <HAL_GetTick>
 8001864:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001868:	f7ff fb44 	bl	8000ef4 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e332      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800187a:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001886:	f7ff fb41 	bl	8000f0c <HAL_GetREVID>
 800188a:	4603      	mov	r3, r0
 800188c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001890:	4293      	cmp	r3, r2
 8001892:	d819      	bhi.n	80018c8 <HAL_RCC_OscConfig+0x28c>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	2b40      	cmp	r3, #64	@ 0x40
 800189a:	d108      	bne.n	80018ae <HAL_RCC_OscConfig+0x272>
 800189c:	4b09      	ldr	r3, [pc, #36]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80018a4:	4a07      	ldr	r2, [pc, #28]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80018a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018aa:	6053      	str	r3, [r2, #4]
 80018ac:	e030      	b.n	8001910 <HAL_RCC_OscConfig+0x2d4>
 80018ae:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	031b      	lsls	r3, r3, #12
 80018bc:	4901      	ldr	r1, [pc, #4]	@ (80018c4 <HAL_RCC_OscConfig+0x288>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	604b      	str	r3, [r1, #4]
 80018c2:	e025      	b.n	8001910 <HAL_RCC_OscConfig+0x2d4>
 80018c4:	58024400 	.word	0x58024400
 80018c8:	4b9a      	ldr	r3, [pc, #616]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	061b      	lsls	r3, r3, #24
 80018d6:	4997      	ldr	r1, [pc, #604]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
 80018dc:	e018      	b.n	8001910 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018de:	4b95      	ldr	r3, [pc, #596]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a94      	ldr	r2, [pc, #592]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	f7ff fb03 	bl	8000ef4 <HAL_GetTick>
 80018ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f2:	f7ff faff 	bl	8000ef4 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e2ed      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001904:	4b8b      	ldr	r3, [pc, #556]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f0      	bne.n	80018f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0310 	and.w	r3, r3, #16
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80a9 	beq.w	8001a70 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800191e:	4b85      	ldr	r3, [pc, #532]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001926:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001928:	4b82      	ldr	r3, [pc, #520]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 800192a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	2b08      	cmp	r3, #8
 8001932:	d007      	beq.n	8001944 <HAL_RCC_OscConfig+0x308>
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2b18      	cmp	r3, #24
 8001938:	d13a      	bne.n	80019b0 <HAL_RCC_OscConfig+0x374>
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b01      	cmp	r3, #1
 8001942:	d135      	bne.n	80019b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001944:	4b7b      	ldr	r3, [pc, #492]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_OscConfig+0x320>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	2b80      	cmp	r3, #128	@ 0x80
 8001956:	d001      	beq.n	800195c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e2c1      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800195c:	f7ff fad6 	bl	8000f0c <HAL_GetREVID>
 8001960:	4603      	mov	r3, r0
 8001962:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001966:	4293      	cmp	r3, r2
 8001968:	d817      	bhi.n	800199a <HAL_RCC_OscConfig+0x35e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	2b20      	cmp	r3, #32
 8001970:	d108      	bne.n	8001984 <HAL_RCC_OscConfig+0x348>
 8001972:	4b70      	ldr	r3, [pc, #448]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800197a:	4a6e      	ldr	r2, [pc, #440]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 800197c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001980:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001982:	e075      	b.n	8001a70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001984:	4b6b      	ldr	r3, [pc, #428]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	069b      	lsls	r3, r3, #26
 8001992:	4968      	ldr	r1, [pc, #416]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001998:	e06a      	b.n	8001a70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800199a:	4b66      	ldr	r3, [pc, #408]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	061b      	lsls	r3, r3, #24
 80019a8:	4962      	ldr	r1, [pc, #392]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019ae:	e05f      	b.n	8001a70 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d042      	beq.n	8001a3e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80019b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a5d      	ldr	r2, [pc, #372]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80019be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff fa96 	bl	8000ef4 <HAL_GetTick>
 80019c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80019cc:	f7ff fa92 	bl	8000ef4 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e280      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019de:	4b55      	ldr	r3, [pc, #340]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019ea:	f7ff fa8f 	bl	8000f0c <HAL_GetREVID>
 80019ee:	4603      	mov	r3, r0
 80019f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d817      	bhi.n	8001a28 <HAL_RCC_OscConfig+0x3ec>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	2b20      	cmp	r3, #32
 80019fe:	d108      	bne.n	8001a12 <HAL_RCC_OscConfig+0x3d6>
 8001a00:	4b4c      	ldr	r3, [pc, #304]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001a08:	4a4a      	ldr	r2, [pc, #296]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001a0e:	6053      	str	r3, [r2, #4]
 8001a10:	e02e      	b.n	8001a70 <HAL_RCC_OscConfig+0x434>
 8001a12:	4b48      	ldr	r3, [pc, #288]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	069b      	lsls	r3, r3, #26
 8001a20:	4944      	ldr	r1, [pc, #272]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
 8001a26:	e023      	b.n	8001a70 <HAL_RCC_OscConfig+0x434>
 8001a28:	4b42      	ldr	r3, [pc, #264]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	061b      	lsls	r3, r3, #24
 8001a36:	493f      	ldr	r1, [pc, #252]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	60cb      	str	r3, [r1, #12]
 8001a3c:	e018      	b.n	8001a70 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a3c      	ldr	r2, [pc, #240]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4a:	f7ff fa53 	bl	8000ef4 <HAL_GetTick>
 8001a4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a52:	f7ff fa4f 	bl	8000ef4 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e23d      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a64:	4b33      	ldr	r3, [pc, #204]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f0      	bne.n	8001a52 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d036      	beq.n	8001aea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d019      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a84:	4b2b      	ldr	r3, [pc, #172]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a88:	4a2a      	ldr	r2, [pc, #168]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff fa30 	bl	8000ef4 <HAL_GetTick>
 8001a94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff fa2c 	bl	8000ef4 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e21a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001aaa:	4b22      	ldr	r3, [pc, #136]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0x45c>
 8001ab6:	e018      	b.n	8001aea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001aba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001abc:	4a1d      	ldr	r2, [pc, #116]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac4:	f7ff fa16 	bl	8000ef4 <HAL_GetTick>
 8001ac8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001acc:	f7ff fa12 	bl	8000ef4 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e200      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ade:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0320 	and.w	r3, r3, #32
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d039      	beq.n	8001b6a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d01c      	beq.n	8001b38 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001afe:	4b0d      	ldr	r3, [pc, #52]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a0c      	ldr	r2, [pc, #48]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001b04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b0a:	f7ff f9f3 	bl	8000ef4 <HAL_GetTick>
 8001b0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b12:	f7ff f9ef 	bl	8000ef4 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e1dd      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b24:	4b03      	ldr	r3, [pc, #12]	@ (8001b34 <HAL_RCC_OscConfig+0x4f8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x4d6>
 8001b30:	e01b      	b.n	8001b6a <HAL_RCC_OscConfig+0x52e>
 8001b32:	bf00      	nop
 8001b34:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b38:	4b9b      	ldr	r3, [pc, #620]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a9a      	ldr	r2, [pc, #616]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001b3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b44:	f7ff f9d6 	bl	8000ef4 <HAL_GetTick>
 8001b48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b4c:	f7ff f9d2 	bl	8000ef4 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e1c0      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b5e:	4b92      	ldr	r3, [pc, #584]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 8081 	beq.w	8001c7a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b78:	4b8c      	ldr	r3, [pc, #560]	@ (8001dac <HAL_RCC_OscConfig+0x770>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a8b      	ldr	r2, [pc, #556]	@ (8001dac <HAL_RCC_OscConfig+0x770>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b84:	f7ff f9b6 	bl	8000ef4 <HAL_GetTick>
 8001b88:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8c:	f7ff f9b2 	bl	8000ef4 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	@ 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e1a0      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b9e:	4b83      	ldr	r3, [pc, #524]	@ (8001dac <HAL_RCC_OscConfig+0x770>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d106      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x584>
 8001bb2:	4b7d      	ldr	r3, [pc, #500]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb6:	4a7c      	ldr	r2, [pc, #496]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bbe:	e02d      	b.n	8001c1c <HAL_RCC_OscConfig+0x5e0>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10c      	bne.n	8001be2 <HAL_RCC_OscConfig+0x5a6>
 8001bc8:	4b77      	ldr	r3, [pc, #476]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bcc:	4a76      	ldr	r2, [pc, #472]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bce:	f023 0301 	bic.w	r3, r3, #1
 8001bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bd4:	4b74      	ldr	r3, [pc, #464]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd8:	4a73      	ldr	r2, [pc, #460]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bda:	f023 0304 	bic.w	r3, r3, #4
 8001bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8001be0:	e01c      	b.n	8001c1c <HAL_RCC_OscConfig+0x5e0>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b05      	cmp	r3, #5
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x5c8>
 8001bea:	4b6f      	ldr	r3, [pc, #444]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bee:	4a6e      	ldr	r2, [pc, #440]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bf6:	4b6c      	ldr	r3, [pc, #432]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bfa:	4a6b      	ldr	r2, [pc, #428]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c02:	e00b      	b.n	8001c1c <HAL_RCC_OscConfig+0x5e0>
 8001c04:	4b68      	ldr	r3, [pc, #416]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c08:	4a67      	ldr	r2, [pc, #412]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c0a:	f023 0301 	bic.w	r3, r3, #1
 8001c0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c10:	4b65      	ldr	r3, [pc, #404]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c14:	4a64      	ldr	r2, [pc, #400]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c16:	f023 0304 	bic.w	r3, r3, #4
 8001c1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d015      	beq.n	8001c50 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c24:	f7ff f966 	bl	8000ef4 <HAL_GetTick>
 8001c28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2c:	f7ff f962 	bl	8000ef4 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e14e      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c42:	4b59      	ldr	r3, [pc, #356]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0ee      	beq.n	8001c2c <HAL_RCC_OscConfig+0x5f0>
 8001c4e:	e014      	b.n	8001c7a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c50:	f7ff f950 	bl	8000ef4 <HAL_GetTick>
 8001c54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c58:	f7ff f94c 	bl	8000ef4 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e138      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c6e:	4b4e      	ldr	r3, [pc, #312]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1ee      	bne.n	8001c58 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 812d 	beq.w	8001ede <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c84:	4b48      	ldr	r3, [pc, #288]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c8c:	2b18      	cmp	r3, #24
 8001c8e:	f000 80bd 	beq.w	8001e0c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	f040 809e 	bne.w	8001dd8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9c:	4b42      	ldr	r3, [pc, #264]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a41      	ldr	r2, [pc, #260]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001ca2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff f924 	bl	8000ef4 <HAL_GetTick>
 8001cac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb0:	f7ff f920 	bl	8000ef4 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e10e      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cc2:	4b39      	ldr	r3, [pc, #228]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cce:	4b36      	ldr	r3, [pc, #216]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001cd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cd2:	4b37      	ldr	r3, [pc, #220]	@ (8001db0 <HAL_RCC_OscConfig+0x774>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001cde:	0112      	lsls	r2, r2, #4
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	4931      	ldr	r1, [pc, #196]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	628b      	str	r3, [r1, #40]	@ 0x28
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cec:	3b01      	subs	r3, #1
 8001cee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	025b      	lsls	r3, r3, #9
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d02:	3b01      	subs	r3, #1
 8001d04:	041b      	lsls	r3, r3, #16
 8001d06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d10:	3b01      	subs	r3, #1
 8001d12:	061b      	lsls	r3, r3, #24
 8001d14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001d18:	4923      	ldr	r1, [pc, #140]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001d1e:	4b22      	ldr	r3, [pc, #136]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d22:	4a21      	ldr	r2, [pc, #132]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d2e:	4b21      	ldr	r3, [pc, #132]	@ (8001db4 <HAL_RCC_OscConfig+0x778>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d36:	00d2      	lsls	r2, r2, #3
 8001d38:	491b      	ldr	r1, [pc, #108]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d42:	f023 020c 	bic.w	r2, r3, #12
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4a:	4917      	ldr	r1, [pc, #92]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d50:	4b15      	ldr	r3, [pc, #84]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d54:	f023 0202 	bic.w	r2, r3, #2
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5c:	4912      	ldr	r1, [pc, #72]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d62:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d66:	4a10      	ldr	r2, [pc, #64]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d72:	4a0d      	ldr	r2, [pc, #52]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001d86:	4b08      	ldr	r3, [pc, #32]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8a:	4a07      	ldr	r2, [pc, #28]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d92:	4b05      	ldr	r3, [pc, #20]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a04      	ldr	r2, [pc, #16]	@ (8001da8 <HAL_RCC_OscConfig+0x76c>)
 8001d98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9e:	f7ff f8a9 	bl	8000ef4 <HAL_GetTick>
 8001da2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001da4:	e011      	b.n	8001dca <HAL_RCC_OscConfig+0x78e>
 8001da6:	bf00      	nop
 8001da8:	58024400 	.word	0x58024400
 8001dac:	58024800 	.word	0x58024800
 8001db0:	fffffc0c 	.word	0xfffffc0c
 8001db4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db8:	f7ff f89c 	bl	8000ef4 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e08a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dca:	4b47      	ldr	r3, [pc, #284]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x77c>
 8001dd6:	e082      	b.n	8001ede <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd8:	4b43      	ldr	r3, [pc, #268]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a42      	ldr	r2, [pc, #264]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001dde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff f886 	bl	8000ef4 <HAL_GetTick>
 8001de8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7ff f882 	bl	8000ef4 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e070      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x7b0>
 8001e0a:	e068      	b.n	8001ede <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e0c:	4b36      	ldr	r3, [pc, #216]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e12:	4b35      	ldr	r3, [pc, #212]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d031      	beq.n	8001e84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	f003 0203 	and.w	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d12a      	bne.n	8001e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d122      	bne.n	8001e84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e48:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d11a      	bne.n	8001e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	0a5b      	lsrs	r3, r3, #9
 8001e52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d111      	bne.n	8001e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	0c1b      	lsrs	r3, r3, #16
 8001e64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d108      	bne.n	8001e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	0e1b      	lsrs	r3, r3, #24
 8001e76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e7e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e02b      	b.n	8001ee0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001e88:	4b17      	ldr	r3, [pc, #92]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e8c:	08db      	lsrs	r3, r3, #3
 8001e8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e92:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d01f      	beq.n	8001ede <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001e9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea2:	4a11      	ldr	r2, [pc, #68]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001ea4:	f023 0301 	bic.w	r3, r3, #1
 8001ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001eaa:	f7ff f823 	bl	8000ef4 <HAL_GetTick>
 8001eae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001eb0:	bf00      	nop
 8001eb2:	f7ff f81f 	bl	8000ef4 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d0f9      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001ec0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8001eec <HAL_RCC_OscConfig+0x8b0>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001eca:	00d2      	lsls	r2, r2, #3
 8001ecc:	4906      	ldr	r1, [pc, #24]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001ed2:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed6:	4a04      	ldr	r2, [pc, #16]	@ (8001ee8 <HAL_RCC_OscConfig+0x8ac>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3730      	adds	r7, #48	@ 0x30
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	58024400 	.word	0x58024400
 8001eec:	ffff0007 	.word	0xffff0007

08001ef0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e19c      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f04:	4b8a      	ldr	r3, [pc, #552]	@ (8002130 <HAL_RCC_ClockConfig+0x240>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d910      	bls.n	8001f34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f12:	4b87      	ldr	r3, [pc, #540]	@ (8002130 <HAL_RCC_ClockConfig+0x240>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 020f 	bic.w	r2, r3, #15
 8001f1a:	4985      	ldr	r1, [pc, #532]	@ (8002130 <HAL_RCC_ClockConfig+0x240>)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b83      	ldr	r3, [pc, #524]	@ (8002130 <HAL_RCC_ClockConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e184      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d010      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	4b7b      	ldr	r3, [pc, #492]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d908      	bls.n	8001f62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f50:	4b78      	ldr	r3, [pc, #480]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	4975      	ldr	r1, [pc, #468]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d010      	beq.n	8001f90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	4b70      	ldr	r3, [pc, #448]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d908      	bls.n	8001f90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f7e:	4b6d      	ldr	r3, [pc, #436]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	496a      	ldr	r1, [pc, #424]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d010      	beq.n	8001fbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699a      	ldr	r2, [r3, #24]
 8001fa0:	4b64      	ldr	r3, [pc, #400]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d908      	bls.n	8001fbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fac:	4b61      	ldr	r3, [pc, #388]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	495e      	ldr	r1, [pc, #376]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0320 	and.w	r3, r3, #32
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d010      	beq.n	8001fec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69da      	ldr	r2, [r3, #28]
 8001fce:	4b59      	ldr	r3, [pc, #356]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d908      	bls.n	8001fec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001fda:	4b56      	ldr	r3, [pc, #344]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4953      	ldr	r1, [pc, #332]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d010      	beq.n	800201a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	4b4d      	ldr	r3, [pc, #308]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	429a      	cmp	r2, r3
 8002006:	d908      	bls.n	800201a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002008:	4b4a      	ldr	r3, [pc, #296]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f023 020f 	bic.w	r2, r3, #15
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4947      	ldr	r1, [pc, #284]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002016:	4313      	orrs	r3, r2
 8002018:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d055      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002026:	4b43      	ldr	r3, [pc, #268]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4940      	ldr	r1, [pc, #256]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002034:	4313      	orrs	r3, r2
 8002036:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d107      	bne.n	8002050 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002040:	4b3c      	ldr	r3, [pc, #240]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d121      	bne.n	8002090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0f6      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b03      	cmp	r3, #3
 8002056:	d107      	bne.n	8002068 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002058:	4b36      	ldr	r3, [pc, #216]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d115      	bne.n	8002090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0ea      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d107      	bne.n	8002080 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002070:	4b30      	ldr	r3, [pc, #192]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d109      	bne.n	8002090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0de      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002080:	4b2c      	ldr	r3, [pc, #176]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0d6      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002090:	4b28      	ldr	r3, [pc, #160]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f023 0207 	bic.w	r2, r3, #7
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4925      	ldr	r1, [pc, #148]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020a2:	f7fe ff27 	bl	8000ef4 <HAL_GetTick>
 80020a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a8:	e00a      	b.n	80020c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020aa:	f7fe ff23 	bl	8000ef4 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e0be      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d1eb      	bne.n	80020aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d010      	beq.n	8002100 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	4b14      	ldr	r3, [pc, #80]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d208      	bcs.n	8002100 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ee:	4b11      	ldr	r3, [pc, #68]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f023 020f 	bic.w	r2, r3, #15
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	490e      	ldr	r1, [pc, #56]	@ (8002134 <HAL_RCC_ClockConfig+0x244>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002100:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <HAL_RCC_ClockConfig+0x240>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d214      	bcs.n	8002138 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <HAL_RCC_ClockConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 020f 	bic.w	r2, r3, #15
 8002116:	4906      	ldr	r1, [pc, #24]	@ (8002130 <HAL_RCC_ClockConfig+0x240>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b04      	ldr	r3, [pc, #16]	@ (8002130 <HAL_RCC_ClockConfig+0x240>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e086      	b.n	800223e <HAL_RCC_ClockConfig+0x34e>
 8002130:	52002000 	.word	0x52002000
 8002134:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d010      	beq.n	8002166 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	4b3f      	ldr	r3, [pc, #252]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002150:	429a      	cmp	r2, r3
 8002152:	d208      	bcs.n	8002166 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002154:	4b3c      	ldr	r3, [pc, #240]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	4939      	ldr	r1, [pc, #228]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002162:	4313      	orrs	r3, r2
 8002164:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d010      	beq.n	8002194 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695a      	ldr	r2, [r3, #20]
 8002176:	4b34      	ldr	r3, [pc, #208]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800217e:	429a      	cmp	r2, r3
 8002180:	d208      	bcs.n	8002194 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002182:	4b31      	ldr	r3, [pc, #196]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	492e      	ldr	r1, [pc, #184]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002190:	4313      	orrs	r3, r2
 8002192:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0310 	and.w	r3, r3, #16
 800219c:	2b00      	cmp	r3, #0
 800219e:	d010      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699a      	ldr	r2, [r3, #24]
 80021a4:	4b28      	ldr	r3, [pc, #160]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d208      	bcs.n	80021c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021b0:	4b25      	ldr	r3, [pc, #148]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4922      	ldr	r1, [pc, #136]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d010      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69da      	ldr	r2, [r3, #28]
 80021d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021da:	429a      	cmp	r2, r3
 80021dc:	d208      	bcs.n	80021f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80021de:	4b1a      	ldr	r3, [pc, #104]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	4917      	ldr	r1, [pc, #92]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021f0:	f000 f834 	bl	800225c <HAL_RCC_GetSysClockFreq>
 80021f4:	4602      	mov	r2, r0
 80021f6:	4b14      	ldr	r3, [pc, #80]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	4912      	ldr	r1, [pc, #72]	@ (800224c <HAL_RCC_ClockConfig+0x35c>)
 8002202:	5ccb      	ldrb	r3, [r1, r3]
 8002204:	f003 031f 	and.w	r3, r3, #31
 8002208:	fa22 f303 	lsr.w	r3, r2, r3
 800220c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800220e:	4b0e      	ldr	r3, [pc, #56]	@ (8002248 <HAL_RCC_ClockConfig+0x358>)
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	4a0d      	ldr	r2, [pc, #52]	@ (800224c <HAL_RCC_ClockConfig+0x35c>)
 8002218:	5cd3      	ldrb	r3, [r2, r3]
 800221a:	f003 031f 	and.w	r3, r3, #31
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
 8002224:	4a0a      	ldr	r2, [pc, #40]	@ (8002250 <HAL_RCC_ClockConfig+0x360>)
 8002226:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002228:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <HAL_RCC_ClockConfig+0x364>)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800222e:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <HAL_RCC_ClockConfig+0x368>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fe14 	bl	8000e60 <HAL_InitTick>
 8002238:	4603      	mov	r3, r0
 800223a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800223c:	7bfb      	ldrb	r3, [r7, #15]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	58024400 	.word	0x58024400
 800224c:	0800466c 	.word	0x0800466c
 8002250:	24000004 	.word	0x24000004
 8002254:	24000000 	.word	0x24000000
 8002258:	24000008 	.word	0x24000008

0800225c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	@ 0x24
 8002260:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002262:	4bb3      	ldr	r3, [pc, #716]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800226a:	2b18      	cmp	r3, #24
 800226c:	f200 8155 	bhi.w	800251a <HAL_RCC_GetSysClockFreq+0x2be>
 8002270:	a201      	add	r2, pc, #4	@ (adr r2, 8002278 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002276:	bf00      	nop
 8002278:	080022dd 	.word	0x080022dd
 800227c:	0800251b 	.word	0x0800251b
 8002280:	0800251b 	.word	0x0800251b
 8002284:	0800251b 	.word	0x0800251b
 8002288:	0800251b 	.word	0x0800251b
 800228c:	0800251b 	.word	0x0800251b
 8002290:	0800251b 	.word	0x0800251b
 8002294:	0800251b 	.word	0x0800251b
 8002298:	08002303 	.word	0x08002303
 800229c:	0800251b 	.word	0x0800251b
 80022a0:	0800251b 	.word	0x0800251b
 80022a4:	0800251b 	.word	0x0800251b
 80022a8:	0800251b 	.word	0x0800251b
 80022ac:	0800251b 	.word	0x0800251b
 80022b0:	0800251b 	.word	0x0800251b
 80022b4:	0800251b 	.word	0x0800251b
 80022b8:	08002309 	.word	0x08002309
 80022bc:	0800251b 	.word	0x0800251b
 80022c0:	0800251b 	.word	0x0800251b
 80022c4:	0800251b 	.word	0x0800251b
 80022c8:	0800251b 	.word	0x0800251b
 80022cc:	0800251b 	.word	0x0800251b
 80022d0:	0800251b 	.word	0x0800251b
 80022d4:	0800251b 	.word	0x0800251b
 80022d8:	0800230f 	.word	0x0800230f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022dc:	4b94      	ldr	r3, [pc, #592]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0320 	and.w	r3, r3, #32
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d009      	beq.n	80022fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80022e8:	4b91      	ldr	r3, [pc, #580]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	08db      	lsrs	r3, r3, #3
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	4a90      	ldr	r2, [pc, #576]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
 80022f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80022fa:	e111      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80022fc:	4b8d      	ldr	r3, [pc, #564]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022fe:	61bb      	str	r3, [r7, #24]
      break;
 8002300:	e10e      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002302:	4b8d      	ldr	r3, [pc, #564]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002304:	61bb      	str	r3, [r7, #24]
      break;
 8002306:	e10b      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002308:	4b8c      	ldr	r3, [pc, #560]	@ (800253c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800230a:	61bb      	str	r3, [r7, #24]
      break;
 800230c:	e108      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800230e:	4b88      	ldr	r3, [pc, #544]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002318:	4b85      	ldr	r3, [pc, #532]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800231a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002322:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002324:	4b82      	ldr	r3, [pc, #520]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800232e:	4b80      	ldr	r3, [pc, #512]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002332:	08db      	lsrs	r3, r3, #3
 8002334:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	fb02 f303 	mul.w	r3, r2, r3
 800233e:	ee07 3a90 	vmov	s15, r3
 8002342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002346:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80e1 	beq.w	8002514 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2b02      	cmp	r3, #2
 8002356:	f000 8083 	beq.w	8002460 <HAL_RCC_GetSysClockFreq+0x204>
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b02      	cmp	r3, #2
 800235e:	f200 80a1 	bhi.w	80024a4 <HAL_RCC_GetSysClockFreq+0x248>
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x114>
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d056      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x1c0>
 800236e:	e099      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002370:	4b6f      	ldr	r3, [pc, #444]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0320 	and.w	r3, r3, #32
 8002378:	2b00      	cmp	r3, #0
 800237a:	d02d      	beq.n	80023d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800237c:	4b6c      	ldr	r3, [pc, #432]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	08db      	lsrs	r3, r3, #3
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	4a6b      	ldr	r2, [pc, #428]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
 800238c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	ee07 3a90 	vmov	s15, r3
 8002394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	ee07 3a90 	vmov	s15, r3
 800239e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023a6:	4b62      	ldr	r3, [pc, #392]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80023ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002540 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80023d6:	e087      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	ee07 3a90 	vmov	s15, r3
 80023de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002544 <HAL_RCC_GetSysClockFreq+0x2e8>
 80023e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023ea:	4b51      	ldr	r3, [pc, #324]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f2:	ee07 3a90 	vmov	s15, r3
 80023f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80023fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002540 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800240a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800240e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002416:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800241a:	e065      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	ee07 3a90 	vmov	s15, r3
 8002422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002426:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002548 <HAL_RCC_GetSysClockFreq+0x2ec>
 800242a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800242e:	4b40      	ldr	r3, [pc, #256]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002436:	ee07 3a90 	vmov	s15, r3
 800243a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800243e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002442:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002540 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800244a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800244e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800245a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800245e:	e043      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	ee07 3a90 	vmov	s15, r3
 8002466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800246a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800254c <HAL_RCC_GetSysClockFreq+0x2f0>
 800246e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002472:	4b2f      	ldr	r3, [pc, #188]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002482:	ed97 6a02 	vldr	s12, [r7, #8]
 8002486:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002540 <HAL_RCC_GetSysClockFreq+0x2e4>
 800248a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800248e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800249a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024a2:	e021      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	ee07 3a90 	vmov	s15, r3
 80024aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002548 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80024ca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002540 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80024e8:	4b11      	ldr	r3, [pc, #68]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ec:	0a5b      	lsrs	r3, r3, #9
 80024ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024f2:	3301      	adds	r3, #1
 80024f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	ee07 3a90 	vmov	s15, r3
 80024fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002500:	edd7 6a07 	vldr	s13, [r7, #28]
 8002504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800250c:	ee17 3a90 	vmov	r3, s15
 8002510:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002512:	e005      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	61bb      	str	r3, [r7, #24]
      break;
 8002518:	e002      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800251a:	4b07      	ldr	r3, [pc, #28]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800251c:	61bb      	str	r3, [r7, #24]
      break;
 800251e:	bf00      	nop
  }

  return sysclockfreq;
 8002520:	69bb      	ldr	r3, [r7, #24]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3724      	adds	r7, #36	@ 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	58024400 	.word	0x58024400
 8002534:	03d09000 	.word	0x03d09000
 8002538:	003d0900 	.word	0x003d0900
 800253c:	017d7840 	.word	0x017d7840
 8002540:	46000000 	.word	0x46000000
 8002544:	4c742400 	.word	0x4c742400
 8002548:	4a742400 	.word	0x4a742400
 800254c:	4bbebc20 	.word	0x4bbebc20

08002550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002556:	f7ff fe81 	bl	800225c <HAL_RCC_GetSysClockFreq>
 800255a:	4602      	mov	r2, r0
 800255c:	4b10      	ldr	r3, [pc, #64]	@ (80025a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	490f      	ldr	r1, [pc, #60]	@ (80025a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002568:	5ccb      	ldrb	r3, [r1, r3]
 800256a:	f003 031f 	and.w	r3, r3, #31
 800256e:	fa22 f303 	lsr.w	r3, r2, r3
 8002572:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002574:	4b0a      	ldr	r3, [pc, #40]	@ (80025a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	4a09      	ldr	r2, [pc, #36]	@ (80025a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800257e:	5cd3      	ldrb	r3, [r2, r3]
 8002580:	f003 031f 	and.w	r3, r3, #31
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	fa22 f303 	lsr.w	r3, r2, r3
 800258a:	4a07      	ldr	r2, [pc, #28]	@ (80025a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800258c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800258e:	4a07      	ldr	r2, [pc, #28]	@ (80025ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002594:	4b04      	ldr	r3, [pc, #16]	@ (80025a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002596:	681b      	ldr	r3, [r3, #0]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	58024400 	.word	0x58024400
 80025a4:	0800466c 	.word	0x0800466c
 80025a8:	24000004 	.word	0x24000004
 80025ac:	24000000 	.word	0x24000000

080025b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80025b4:	f7ff ffcc 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	091b      	lsrs	r3, r3, #4
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	4904      	ldr	r1, [pc, #16]	@ (80025d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025c6:	5ccb      	ldrb	r3, [r1, r3]
 80025c8:	f003 031f 	and.w	r3, r3, #31
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	58024400 	.word	0x58024400
 80025d8:	0800466c 	.word	0x0800466c

080025dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80025e0:	f7ff ffb6 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	0a1b      	lsrs	r3, r3, #8
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	4904      	ldr	r1, [pc, #16]	@ (8002604 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025f2:	5ccb      	ldrb	r3, [r1, r3]
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	58024400 	.word	0x58024400
 8002604:	0800466c 	.word	0x0800466c

08002608 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800260c:	f7ff ffa0 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 8002610:	4602      	mov	r2, r0
 8002612:	4b06      	ldr	r3, [pc, #24]	@ (800262c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	091b      	lsrs	r3, r3, #4
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	4904      	ldr	r1, [pc, #16]	@ (8002630 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800261e:	5ccb      	ldrb	r3, [r1, r3]
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002628:	4618      	mov	r0, r3
 800262a:	bd80      	pop	{r7, pc}
 800262c:	58024400 	.word	0x58024400
 8002630:	0800466c 	.word	0x0800466c

08002634 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8002634:	b480      	push	{r7}
 8002636:	b089      	sub	sp, #36	@ 0x24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800263c:	4ba1      	ldr	r3, [pc, #644]	@ (80028c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800263e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8002646:	4b9f      	ldr	r3, [pc, #636]	@ (80028c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264a:	0b1b      	lsrs	r3, r3, #12
 800264c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002650:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002652:	4b9c      	ldr	r3, [pc, #624]	@ (80028c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002656:	091b      	lsrs	r3, r3, #4
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800265e:	4b99      	ldr	r3, [pc, #612]	@ (80028c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002662:	08db      	lsrs	r3, r3, #3
 8002664:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	fb02 f303 	mul.w	r3, r2, r3
 800266e:	ee07 3a90 	vmov	s15, r3
 8002672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002676:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8111 	beq.w	80028a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	2b02      	cmp	r3, #2
 8002686:	f000 8083 	beq.w	8002790 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b02      	cmp	r3, #2
 800268e:	f200 80a1 	bhi.w	80027d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d056      	beq.n	800274c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800269e:	e099      	b.n	80027d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026a0:	4b88      	ldr	r3, [pc, #544]	@ (80028c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d02d      	beq.n	8002708 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80026ac:	4b85      	ldr	r3, [pc, #532]	@ (80028c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	08db      	lsrs	r3, r3, #3
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	4a84      	ldr	r2, [pc, #528]	@ (80028c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80026b8:	fa22 f303 	lsr.w	r3, r2, r3
 80026bc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	ee07 3a90 	vmov	s15, r3
 80026c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	ee07 3a90 	vmov	s15, r3
 80026ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026d6:	4b7b      	ldr	r3, [pc, #492]	@ (80028c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80026d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026de:	ee07 3a90 	vmov	s15, r3
 80026e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80026ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80028cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80026ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002702:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002706:	e087      	b.n	8002818 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	ee07 3a90 	vmov	s15, r3
 800270e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002712:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80028d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8002716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800271a:	4b6a      	ldr	r3, [pc, #424]	@ (80028c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800271c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002722:	ee07 3a90 	vmov	s15, r3
 8002726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800272a:	ed97 6a03 	vldr	s12, [r7, #12]
 800272e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80028cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800273a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800273e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800274a:	e065      	b.n	8002818 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	ee07 3a90 	vmov	s15, r3
 8002752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002756:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80028d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800275a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800275e:	4b59      	ldr	r3, [pc, #356]	@ (80028c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800276e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002772:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80028cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800277a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800277e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800278e:	e043      	b.n	8002818 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	ee07 3a90 	vmov	s15, r3
 8002796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800279a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80028d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800279e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027a2:	4b48      	ldr	r3, [pc, #288]	@ (80028c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80027a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80027b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80028cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80027ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027d2:	e021      	b.n	8002818 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80028d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80027e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027e6:	4b37      	ldr	r3, [pc, #220]	@ (80028c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80027e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80027fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80028cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80027fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800280a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800280e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002816:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002818:	4b2a      	ldr	r3, [pc, #168]	@ (80028c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800281a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800281c:	0a5b      	lsrs	r3, r3, #9
 800281e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002822:	ee07 3a90 	vmov	s15, r3
 8002826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800282a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800282e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002832:	edd7 6a07 	vldr	s13, [r7, #28]
 8002836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800283a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800283e:	ee17 2a90 	vmov	r2, s15
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8002846:	4b1f      	ldr	r3, [pc, #124]	@ (80028c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800284a:	0c1b      	lsrs	r3, r3, #16
 800284c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002850:	ee07 3a90 	vmov	s15, r3
 8002854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002858:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800285c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002860:	edd7 6a07 	vldr	s13, [r7, #28]
 8002864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800286c:	ee17 2a90 	vmov	r2, s15
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8002874:	4b13      	ldr	r3, [pc, #76]	@ (80028c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002878:	0e1b      	lsrs	r3, r3, #24
 800287a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800287e:	ee07 3a90 	vmov	s15, r3
 8002882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002886:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800288a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800288e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800289a:	ee17 2a90 	vmov	r2, s15
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80028a2:	e008      	b.n	80028b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
}
 80028b6:	bf00      	nop
 80028b8:	3724      	adds	r7, #36	@ 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	58024400 	.word	0x58024400
 80028c8:	03d09000 	.word	0x03d09000
 80028cc:	46000000 	.word	0x46000000
 80028d0:	4c742400 	.word	0x4c742400
 80028d4:	4a742400 	.word	0x4a742400
 80028d8:	4bbebc20 	.word	0x4bbebc20

080028dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	@ 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80028e4:	4ba1      	ldr	r3, [pc, #644]	@ (8002b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80028e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80028ee:	4b9f      	ldr	r3, [pc, #636]	@ (8002b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80028f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f2:	0d1b      	lsrs	r3, r3, #20
 80028f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80028fa:	4b9c      	ldr	r3, [pc, #624]	@ (8002b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80028fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fe:	0a1b      	lsrs	r3, r3, #8
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002906:	4b99      	ldr	r3, [pc, #612]	@ (8002b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290a:	08db      	lsrs	r3, r3, #3
 800290c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	fb02 f303 	mul.w	r3, r2, r3
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800291e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8111 	beq.w	8002b4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	2b02      	cmp	r3, #2
 800292e:	f000 8083 	beq.w	8002a38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	2b02      	cmp	r3, #2
 8002936:	f200 80a1 	bhi.w	8002a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d056      	beq.n	80029f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8002946:	e099      	b.n	8002a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002948:	4b88      	ldr	r3, [pc, #544]	@ (8002b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0320 	and.w	r3, r3, #32
 8002950:	2b00      	cmp	r3, #0
 8002952:	d02d      	beq.n	80029b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002954:	4b85      	ldr	r3, [pc, #532]	@ (8002b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	08db      	lsrs	r3, r3, #3
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	4a84      	ldr	r2, [pc, #528]	@ (8002b70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
 8002964:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	ee07 3a90 	vmov	s15, r3
 8002976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800297a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800297e:	4b7b      	ldr	r3, [pc, #492]	@ (8002b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002986:	ee07 3a90 	vmov	s15, r3
 800298a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800298e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002992:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002b74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800299a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800299e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80029ae:	e087      	b.n	8002ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	ee07 3a90 	vmov	s15, r3
 80029b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002b78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80029be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029c2:	4b6a      	ldr	r3, [pc, #424]	@ (8002b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ca:	ee07 3a90 	vmov	s15, r3
 80029ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80029d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002b74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80029da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029f2:	e065      	b.n	8002ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002b7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a06:	4b59      	ldr	r3, [pc, #356]	@ (8002b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a1a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002b74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a36:	e043      	b.n	8002ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	ee07 3a90 	vmov	s15, r3
 8002a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a42:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002b80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8002a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a4a:	4b48      	ldr	r3, [pc, #288]	@ (8002b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a52:	ee07 3a90 	vmov	s15, r3
 8002a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a5e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002b74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a7a:	e021      	b.n	8002ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a86:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002b7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a8e:	4b37      	ldr	r3, [pc, #220]	@ (8002b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a96:	ee07 3a90 	vmov	s15, r3
 8002a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002aa2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002b74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002abe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8002ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8002b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac4:	0a5b      	lsrs	r3, r3, #9
 8002ac6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002aca:	ee07 3a90 	vmov	s15, r3
 8002ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ad6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002ada:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ade:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ae6:	ee17 2a90 	vmov	r2, s15
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8002aee:	4b1f      	ldr	r3, [pc, #124]	@ (8002b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	0c1b      	lsrs	r3, r3, #16
 8002af4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002af8:	ee07 3a90 	vmov	s15, r3
 8002afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b08:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b14:	ee17 2a90 	vmov	r2, s15
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8002b1c:	4b13      	ldr	r3, [pc, #76]	@ (8002b6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	0e1b      	lsrs	r3, r3, #24
 8002b22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b26:	ee07 3a90 	vmov	s15, r3
 8002b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b36:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b42:	ee17 2a90 	vmov	r2, s15
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8002b4a:	e008      	b.n	8002b5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	609a      	str	r2, [r3, #8]
}
 8002b5e:	bf00      	nop
 8002b60:	3724      	adds	r7, #36	@ 0x24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	58024400 	.word	0x58024400
 8002b70:	03d09000 	.word	0x03d09000
 8002b74:	46000000 	.word	0x46000000
 8002b78:	4c742400 	.word	0x4c742400
 8002b7c:	4a742400 	.word	0x4a742400
 8002b80:	4bbebc20 	.word	0x4bbebc20

08002b84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e042      	b.n	8002c1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d106      	bne.n	8002bae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f83b 	bl	8002c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2224      	movs	r2, #36	@ 0x24
 8002bb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0201 	bic.w	r2, r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fe28 	bl	8003824 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f8bd 	bl	8002d54 <UART_SetConfig>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e01b      	b.n	8002c1c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 fea7 	bl	8003968 <UART_CheckIdleState>
 8002c1a:	4603      	mov	r3, r0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08a      	sub	sp, #40	@ 0x28
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	4613      	mov	r3, r2
 8002c46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d17b      	bne.n	8002d4a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <HAL_UART_Transmit+0x26>
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e074      	b.n	8002d4c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2221      	movs	r2, #33	@ 0x21
 8002c6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c72:	f7fe f93f 	bl	8000ef4 <HAL_GetTick>
 8002c76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	88fa      	ldrh	r2, [r7, #6]
 8002c7c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c90:	d108      	bne.n	8002ca4 <HAL_UART_Transmit+0x6c>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d104      	bne.n	8002ca4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	e003      	b.n	8002cac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cac:	e030      	b.n	8002d10 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2180      	movs	r1, #128	@ 0x80
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 feff 	bl	8003abc <UART_WaitOnFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e03d      	b.n	8002d4c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10b      	bne.n	8002cee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ce4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	3302      	adds	r3, #2
 8002cea:	61bb      	str	r3, [r7, #24]
 8002cec:	e007      	b.n	8002cfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	781a      	ldrb	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1c8      	bne.n	8002cae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2200      	movs	r2, #0
 8002d24:	2140      	movs	r1, #64	@ 0x40
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 fec8 	bl	8003abc <UART_WaitOnFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e006      	b.n	8002d4c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e000      	b.n	8002d4c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002d4a:	2302      	movs	r3, #2
  }
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3720      	adds	r7, #32
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d58:	b092      	sub	sp, #72	@ 0x48
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	4bbe      	ldr	r3, [pc, #760]	@ (800307c <UART_SetConfig+0x328>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4ab3      	ldr	r2, [pc, #716]	@ (8003080 <UART_SetConfig+0x32c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d004      	beq.n	8002dc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	4baf      	ldr	r3, [pc, #700]	@ (8003084 <UART_SetConfig+0x330>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dda:	f023 010f 	bic.w	r1, r3, #15
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4aa6      	ldr	r2, [pc, #664]	@ (8003088 <UART_SetConfig+0x334>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d177      	bne.n	8002ee4 <UART_SetConfig+0x190>
 8002df4:	4ba5      	ldr	r3, [pc, #660]	@ (800308c <UART_SetConfig+0x338>)
 8002df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dfc:	2b28      	cmp	r3, #40	@ 0x28
 8002dfe:	d86d      	bhi.n	8002edc <UART_SetConfig+0x188>
 8002e00:	a201      	add	r2, pc, #4	@ (adr r2, 8002e08 <UART_SetConfig+0xb4>)
 8002e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e06:	bf00      	nop
 8002e08:	08002ead 	.word	0x08002ead
 8002e0c:	08002edd 	.word	0x08002edd
 8002e10:	08002edd 	.word	0x08002edd
 8002e14:	08002edd 	.word	0x08002edd
 8002e18:	08002edd 	.word	0x08002edd
 8002e1c:	08002edd 	.word	0x08002edd
 8002e20:	08002edd 	.word	0x08002edd
 8002e24:	08002edd 	.word	0x08002edd
 8002e28:	08002eb5 	.word	0x08002eb5
 8002e2c:	08002edd 	.word	0x08002edd
 8002e30:	08002edd 	.word	0x08002edd
 8002e34:	08002edd 	.word	0x08002edd
 8002e38:	08002edd 	.word	0x08002edd
 8002e3c:	08002edd 	.word	0x08002edd
 8002e40:	08002edd 	.word	0x08002edd
 8002e44:	08002edd 	.word	0x08002edd
 8002e48:	08002ebd 	.word	0x08002ebd
 8002e4c:	08002edd 	.word	0x08002edd
 8002e50:	08002edd 	.word	0x08002edd
 8002e54:	08002edd 	.word	0x08002edd
 8002e58:	08002edd 	.word	0x08002edd
 8002e5c:	08002edd 	.word	0x08002edd
 8002e60:	08002edd 	.word	0x08002edd
 8002e64:	08002edd 	.word	0x08002edd
 8002e68:	08002ec5 	.word	0x08002ec5
 8002e6c:	08002edd 	.word	0x08002edd
 8002e70:	08002edd 	.word	0x08002edd
 8002e74:	08002edd 	.word	0x08002edd
 8002e78:	08002edd 	.word	0x08002edd
 8002e7c:	08002edd 	.word	0x08002edd
 8002e80:	08002edd 	.word	0x08002edd
 8002e84:	08002edd 	.word	0x08002edd
 8002e88:	08002ecd 	.word	0x08002ecd
 8002e8c:	08002edd 	.word	0x08002edd
 8002e90:	08002edd 	.word	0x08002edd
 8002e94:	08002edd 	.word	0x08002edd
 8002e98:	08002edd 	.word	0x08002edd
 8002e9c:	08002edd 	.word	0x08002edd
 8002ea0:	08002edd 	.word	0x08002edd
 8002ea4:	08002edd 	.word	0x08002edd
 8002ea8:	08002ed5 	.word	0x08002ed5
 8002eac:	2301      	movs	r3, #1
 8002eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002eb2:	e222      	b.n	80032fa <UART_SetConfig+0x5a6>
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002eba:	e21e      	b.n	80032fa <UART_SetConfig+0x5a6>
 8002ebc:	2308      	movs	r3, #8
 8002ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002ec2:	e21a      	b.n	80032fa <UART_SetConfig+0x5a6>
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002eca:	e216      	b.n	80032fa <UART_SetConfig+0x5a6>
 8002ecc:	2320      	movs	r3, #32
 8002ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002ed2:	e212      	b.n	80032fa <UART_SetConfig+0x5a6>
 8002ed4:	2340      	movs	r3, #64	@ 0x40
 8002ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002eda:	e20e      	b.n	80032fa <UART_SetConfig+0x5a6>
 8002edc:	2380      	movs	r3, #128	@ 0x80
 8002ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002ee2:	e20a      	b.n	80032fa <UART_SetConfig+0x5a6>
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a69      	ldr	r2, [pc, #420]	@ (8003090 <UART_SetConfig+0x33c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d130      	bne.n	8002f50 <UART_SetConfig+0x1fc>
 8002eee:	4b67      	ldr	r3, [pc, #412]	@ (800308c <UART_SetConfig+0x338>)
 8002ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	2b05      	cmp	r3, #5
 8002ef8:	d826      	bhi.n	8002f48 <UART_SetConfig+0x1f4>
 8002efa:	a201      	add	r2, pc, #4	@ (adr r2, 8002f00 <UART_SetConfig+0x1ac>)
 8002efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f00:	08002f19 	.word	0x08002f19
 8002f04:	08002f21 	.word	0x08002f21
 8002f08:	08002f29 	.word	0x08002f29
 8002f0c:	08002f31 	.word	0x08002f31
 8002f10:	08002f39 	.word	0x08002f39
 8002f14:	08002f41 	.word	0x08002f41
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f1e:	e1ec      	b.n	80032fa <UART_SetConfig+0x5a6>
 8002f20:	2304      	movs	r3, #4
 8002f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f26:	e1e8      	b.n	80032fa <UART_SetConfig+0x5a6>
 8002f28:	2308      	movs	r3, #8
 8002f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f2e:	e1e4      	b.n	80032fa <UART_SetConfig+0x5a6>
 8002f30:	2310      	movs	r3, #16
 8002f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f36:	e1e0      	b.n	80032fa <UART_SetConfig+0x5a6>
 8002f38:	2320      	movs	r3, #32
 8002f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f3e:	e1dc      	b.n	80032fa <UART_SetConfig+0x5a6>
 8002f40:	2340      	movs	r3, #64	@ 0x40
 8002f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f46:	e1d8      	b.n	80032fa <UART_SetConfig+0x5a6>
 8002f48:	2380      	movs	r3, #128	@ 0x80
 8002f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f4e:	e1d4      	b.n	80032fa <UART_SetConfig+0x5a6>
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a4f      	ldr	r2, [pc, #316]	@ (8003094 <UART_SetConfig+0x340>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d130      	bne.n	8002fbc <UART_SetConfig+0x268>
 8002f5a:	4b4c      	ldr	r3, [pc, #304]	@ (800308c <UART_SetConfig+0x338>)
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	2b05      	cmp	r3, #5
 8002f64:	d826      	bhi.n	8002fb4 <UART_SetConfig+0x260>
 8002f66:	a201      	add	r2, pc, #4	@ (adr r2, 8002f6c <UART_SetConfig+0x218>)
 8002f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6c:	08002f85 	.word	0x08002f85
 8002f70:	08002f8d 	.word	0x08002f8d
 8002f74:	08002f95 	.word	0x08002f95
 8002f78:	08002f9d 	.word	0x08002f9d
 8002f7c:	08002fa5 	.word	0x08002fa5
 8002f80:	08002fad 	.word	0x08002fad
 8002f84:	2300      	movs	r3, #0
 8002f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f8a:	e1b6      	b.n	80032fa <UART_SetConfig+0x5a6>
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f92:	e1b2      	b.n	80032fa <UART_SetConfig+0x5a6>
 8002f94:	2308      	movs	r3, #8
 8002f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f9a:	e1ae      	b.n	80032fa <UART_SetConfig+0x5a6>
 8002f9c:	2310      	movs	r3, #16
 8002f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002fa2:	e1aa      	b.n	80032fa <UART_SetConfig+0x5a6>
 8002fa4:	2320      	movs	r3, #32
 8002fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002faa:	e1a6      	b.n	80032fa <UART_SetConfig+0x5a6>
 8002fac:	2340      	movs	r3, #64	@ 0x40
 8002fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002fb2:	e1a2      	b.n	80032fa <UART_SetConfig+0x5a6>
 8002fb4:	2380      	movs	r3, #128	@ 0x80
 8002fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002fba:	e19e      	b.n	80032fa <UART_SetConfig+0x5a6>
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a35      	ldr	r2, [pc, #212]	@ (8003098 <UART_SetConfig+0x344>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d130      	bne.n	8003028 <UART_SetConfig+0x2d4>
 8002fc6:	4b31      	ldr	r3, [pc, #196]	@ (800308c <UART_SetConfig+0x338>)
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	2b05      	cmp	r3, #5
 8002fd0:	d826      	bhi.n	8003020 <UART_SetConfig+0x2cc>
 8002fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd8 <UART_SetConfig+0x284>)
 8002fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd8:	08002ff1 	.word	0x08002ff1
 8002fdc:	08002ff9 	.word	0x08002ff9
 8002fe0:	08003001 	.word	0x08003001
 8002fe4:	08003009 	.word	0x08003009
 8002fe8:	08003011 	.word	0x08003011
 8002fec:	08003019 	.word	0x08003019
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002ff6:	e180      	b.n	80032fa <UART_SetConfig+0x5a6>
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002ffe:	e17c      	b.n	80032fa <UART_SetConfig+0x5a6>
 8003000:	2308      	movs	r3, #8
 8003002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003006:	e178      	b.n	80032fa <UART_SetConfig+0x5a6>
 8003008:	2310      	movs	r3, #16
 800300a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800300e:	e174      	b.n	80032fa <UART_SetConfig+0x5a6>
 8003010:	2320      	movs	r3, #32
 8003012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003016:	e170      	b.n	80032fa <UART_SetConfig+0x5a6>
 8003018:	2340      	movs	r3, #64	@ 0x40
 800301a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800301e:	e16c      	b.n	80032fa <UART_SetConfig+0x5a6>
 8003020:	2380      	movs	r3, #128	@ 0x80
 8003022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003026:	e168      	b.n	80032fa <UART_SetConfig+0x5a6>
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a1b      	ldr	r2, [pc, #108]	@ (800309c <UART_SetConfig+0x348>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d142      	bne.n	80030b8 <UART_SetConfig+0x364>
 8003032:	4b16      	ldr	r3, [pc, #88]	@ (800308c <UART_SetConfig+0x338>)
 8003034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	2b05      	cmp	r3, #5
 800303c:	d838      	bhi.n	80030b0 <UART_SetConfig+0x35c>
 800303e:	a201      	add	r2, pc, #4	@ (adr r2, 8003044 <UART_SetConfig+0x2f0>)
 8003040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003044:	0800305d 	.word	0x0800305d
 8003048:	08003065 	.word	0x08003065
 800304c:	0800306d 	.word	0x0800306d
 8003050:	08003075 	.word	0x08003075
 8003054:	080030a1 	.word	0x080030a1
 8003058:	080030a9 	.word	0x080030a9
 800305c:	2300      	movs	r3, #0
 800305e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003062:	e14a      	b.n	80032fa <UART_SetConfig+0x5a6>
 8003064:	2304      	movs	r3, #4
 8003066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800306a:	e146      	b.n	80032fa <UART_SetConfig+0x5a6>
 800306c:	2308      	movs	r3, #8
 800306e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003072:	e142      	b.n	80032fa <UART_SetConfig+0x5a6>
 8003074:	2310      	movs	r3, #16
 8003076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800307a:	e13e      	b.n	80032fa <UART_SetConfig+0x5a6>
 800307c:	cfff69f3 	.word	0xcfff69f3
 8003080:	58000c00 	.word	0x58000c00
 8003084:	11fff4ff 	.word	0x11fff4ff
 8003088:	40011000 	.word	0x40011000
 800308c:	58024400 	.word	0x58024400
 8003090:	40004400 	.word	0x40004400
 8003094:	40004800 	.word	0x40004800
 8003098:	40004c00 	.word	0x40004c00
 800309c:	40005000 	.word	0x40005000
 80030a0:	2320      	movs	r3, #32
 80030a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030a6:	e128      	b.n	80032fa <UART_SetConfig+0x5a6>
 80030a8:	2340      	movs	r3, #64	@ 0x40
 80030aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030ae:	e124      	b.n	80032fa <UART_SetConfig+0x5a6>
 80030b0:	2380      	movs	r3, #128	@ 0x80
 80030b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030b6:	e120      	b.n	80032fa <UART_SetConfig+0x5a6>
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4acb      	ldr	r2, [pc, #812]	@ (80033ec <UART_SetConfig+0x698>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d176      	bne.n	80031b0 <UART_SetConfig+0x45c>
 80030c2:	4bcb      	ldr	r3, [pc, #812]	@ (80033f0 <UART_SetConfig+0x69c>)
 80030c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030ca:	2b28      	cmp	r3, #40	@ 0x28
 80030cc:	d86c      	bhi.n	80031a8 <UART_SetConfig+0x454>
 80030ce:	a201      	add	r2, pc, #4	@ (adr r2, 80030d4 <UART_SetConfig+0x380>)
 80030d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d4:	08003179 	.word	0x08003179
 80030d8:	080031a9 	.word	0x080031a9
 80030dc:	080031a9 	.word	0x080031a9
 80030e0:	080031a9 	.word	0x080031a9
 80030e4:	080031a9 	.word	0x080031a9
 80030e8:	080031a9 	.word	0x080031a9
 80030ec:	080031a9 	.word	0x080031a9
 80030f0:	080031a9 	.word	0x080031a9
 80030f4:	08003181 	.word	0x08003181
 80030f8:	080031a9 	.word	0x080031a9
 80030fc:	080031a9 	.word	0x080031a9
 8003100:	080031a9 	.word	0x080031a9
 8003104:	080031a9 	.word	0x080031a9
 8003108:	080031a9 	.word	0x080031a9
 800310c:	080031a9 	.word	0x080031a9
 8003110:	080031a9 	.word	0x080031a9
 8003114:	08003189 	.word	0x08003189
 8003118:	080031a9 	.word	0x080031a9
 800311c:	080031a9 	.word	0x080031a9
 8003120:	080031a9 	.word	0x080031a9
 8003124:	080031a9 	.word	0x080031a9
 8003128:	080031a9 	.word	0x080031a9
 800312c:	080031a9 	.word	0x080031a9
 8003130:	080031a9 	.word	0x080031a9
 8003134:	08003191 	.word	0x08003191
 8003138:	080031a9 	.word	0x080031a9
 800313c:	080031a9 	.word	0x080031a9
 8003140:	080031a9 	.word	0x080031a9
 8003144:	080031a9 	.word	0x080031a9
 8003148:	080031a9 	.word	0x080031a9
 800314c:	080031a9 	.word	0x080031a9
 8003150:	080031a9 	.word	0x080031a9
 8003154:	08003199 	.word	0x08003199
 8003158:	080031a9 	.word	0x080031a9
 800315c:	080031a9 	.word	0x080031a9
 8003160:	080031a9 	.word	0x080031a9
 8003164:	080031a9 	.word	0x080031a9
 8003168:	080031a9 	.word	0x080031a9
 800316c:	080031a9 	.word	0x080031a9
 8003170:	080031a9 	.word	0x080031a9
 8003174:	080031a1 	.word	0x080031a1
 8003178:	2301      	movs	r3, #1
 800317a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800317e:	e0bc      	b.n	80032fa <UART_SetConfig+0x5a6>
 8003180:	2304      	movs	r3, #4
 8003182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003186:	e0b8      	b.n	80032fa <UART_SetConfig+0x5a6>
 8003188:	2308      	movs	r3, #8
 800318a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800318e:	e0b4      	b.n	80032fa <UART_SetConfig+0x5a6>
 8003190:	2310      	movs	r3, #16
 8003192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003196:	e0b0      	b.n	80032fa <UART_SetConfig+0x5a6>
 8003198:	2320      	movs	r3, #32
 800319a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800319e:	e0ac      	b.n	80032fa <UART_SetConfig+0x5a6>
 80031a0:	2340      	movs	r3, #64	@ 0x40
 80031a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031a6:	e0a8      	b.n	80032fa <UART_SetConfig+0x5a6>
 80031a8:	2380      	movs	r3, #128	@ 0x80
 80031aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031ae:	e0a4      	b.n	80032fa <UART_SetConfig+0x5a6>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a8f      	ldr	r2, [pc, #572]	@ (80033f4 <UART_SetConfig+0x6a0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d130      	bne.n	800321c <UART_SetConfig+0x4c8>
 80031ba:	4b8d      	ldr	r3, [pc, #564]	@ (80033f0 <UART_SetConfig+0x69c>)
 80031bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	2b05      	cmp	r3, #5
 80031c4:	d826      	bhi.n	8003214 <UART_SetConfig+0x4c0>
 80031c6:	a201      	add	r2, pc, #4	@ (adr r2, 80031cc <UART_SetConfig+0x478>)
 80031c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031cc:	080031e5 	.word	0x080031e5
 80031d0:	080031ed 	.word	0x080031ed
 80031d4:	080031f5 	.word	0x080031f5
 80031d8:	080031fd 	.word	0x080031fd
 80031dc:	08003205 	.word	0x08003205
 80031e0:	0800320d 	.word	0x0800320d
 80031e4:	2300      	movs	r3, #0
 80031e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031ea:	e086      	b.n	80032fa <UART_SetConfig+0x5a6>
 80031ec:	2304      	movs	r3, #4
 80031ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031f2:	e082      	b.n	80032fa <UART_SetConfig+0x5a6>
 80031f4:	2308      	movs	r3, #8
 80031f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031fa:	e07e      	b.n	80032fa <UART_SetConfig+0x5a6>
 80031fc:	2310      	movs	r3, #16
 80031fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003202:	e07a      	b.n	80032fa <UART_SetConfig+0x5a6>
 8003204:	2320      	movs	r3, #32
 8003206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800320a:	e076      	b.n	80032fa <UART_SetConfig+0x5a6>
 800320c:	2340      	movs	r3, #64	@ 0x40
 800320e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003212:	e072      	b.n	80032fa <UART_SetConfig+0x5a6>
 8003214:	2380      	movs	r3, #128	@ 0x80
 8003216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800321a:	e06e      	b.n	80032fa <UART_SetConfig+0x5a6>
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a75      	ldr	r2, [pc, #468]	@ (80033f8 <UART_SetConfig+0x6a4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d130      	bne.n	8003288 <UART_SetConfig+0x534>
 8003226:	4b72      	ldr	r3, [pc, #456]	@ (80033f0 <UART_SetConfig+0x69c>)
 8003228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	2b05      	cmp	r3, #5
 8003230:	d826      	bhi.n	8003280 <UART_SetConfig+0x52c>
 8003232:	a201      	add	r2, pc, #4	@ (adr r2, 8003238 <UART_SetConfig+0x4e4>)
 8003234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003238:	08003251 	.word	0x08003251
 800323c:	08003259 	.word	0x08003259
 8003240:	08003261 	.word	0x08003261
 8003244:	08003269 	.word	0x08003269
 8003248:	08003271 	.word	0x08003271
 800324c:	08003279 	.word	0x08003279
 8003250:	2300      	movs	r3, #0
 8003252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003256:	e050      	b.n	80032fa <UART_SetConfig+0x5a6>
 8003258:	2304      	movs	r3, #4
 800325a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800325e:	e04c      	b.n	80032fa <UART_SetConfig+0x5a6>
 8003260:	2308      	movs	r3, #8
 8003262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003266:	e048      	b.n	80032fa <UART_SetConfig+0x5a6>
 8003268:	2310      	movs	r3, #16
 800326a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800326e:	e044      	b.n	80032fa <UART_SetConfig+0x5a6>
 8003270:	2320      	movs	r3, #32
 8003272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003276:	e040      	b.n	80032fa <UART_SetConfig+0x5a6>
 8003278:	2340      	movs	r3, #64	@ 0x40
 800327a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800327e:	e03c      	b.n	80032fa <UART_SetConfig+0x5a6>
 8003280:	2380      	movs	r3, #128	@ 0x80
 8003282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003286:	e038      	b.n	80032fa <UART_SetConfig+0x5a6>
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a5b      	ldr	r2, [pc, #364]	@ (80033fc <UART_SetConfig+0x6a8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d130      	bne.n	80032f4 <UART_SetConfig+0x5a0>
 8003292:	4b57      	ldr	r3, [pc, #348]	@ (80033f0 <UART_SetConfig+0x69c>)
 8003294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	2b05      	cmp	r3, #5
 800329c:	d826      	bhi.n	80032ec <UART_SetConfig+0x598>
 800329e:	a201      	add	r2, pc, #4	@ (adr r2, 80032a4 <UART_SetConfig+0x550>)
 80032a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a4:	080032bd 	.word	0x080032bd
 80032a8:	080032c5 	.word	0x080032c5
 80032ac:	080032cd 	.word	0x080032cd
 80032b0:	080032d5 	.word	0x080032d5
 80032b4:	080032dd 	.word	0x080032dd
 80032b8:	080032e5 	.word	0x080032e5
 80032bc:	2302      	movs	r3, #2
 80032be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032c2:	e01a      	b.n	80032fa <UART_SetConfig+0x5a6>
 80032c4:	2304      	movs	r3, #4
 80032c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032ca:	e016      	b.n	80032fa <UART_SetConfig+0x5a6>
 80032cc:	2308      	movs	r3, #8
 80032ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032d2:	e012      	b.n	80032fa <UART_SetConfig+0x5a6>
 80032d4:	2310      	movs	r3, #16
 80032d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032da:	e00e      	b.n	80032fa <UART_SetConfig+0x5a6>
 80032dc:	2320      	movs	r3, #32
 80032de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032e2:	e00a      	b.n	80032fa <UART_SetConfig+0x5a6>
 80032e4:	2340      	movs	r3, #64	@ 0x40
 80032e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032ea:	e006      	b.n	80032fa <UART_SetConfig+0x5a6>
 80032ec:	2380      	movs	r3, #128	@ 0x80
 80032ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032f2:	e002      	b.n	80032fa <UART_SetConfig+0x5a6>
 80032f4:	2380      	movs	r3, #128	@ 0x80
 80032f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a3f      	ldr	r2, [pc, #252]	@ (80033fc <UART_SetConfig+0x6a8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	f040 80f8 	bne.w	80034f6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003306:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800330a:	2b20      	cmp	r3, #32
 800330c:	dc46      	bgt.n	800339c <UART_SetConfig+0x648>
 800330e:	2b02      	cmp	r3, #2
 8003310:	f2c0 8082 	blt.w	8003418 <UART_SetConfig+0x6c4>
 8003314:	3b02      	subs	r3, #2
 8003316:	2b1e      	cmp	r3, #30
 8003318:	d87e      	bhi.n	8003418 <UART_SetConfig+0x6c4>
 800331a:	a201      	add	r2, pc, #4	@ (adr r2, 8003320 <UART_SetConfig+0x5cc>)
 800331c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003320:	080033a3 	.word	0x080033a3
 8003324:	08003419 	.word	0x08003419
 8003328:	080033ab 	.word	0x080033ab
 800332c:	08003419 	.word	0x08003419
 8003330:	08003419 	.word	0x08003419
 8003334:	08003419 	.word	0x08003419
 8003338:	080033bb 	.word	0x080033bb
 800333c:	08003419 	.word	0x08003419
 8003340:	08003419 	.word	0x08003419
 8003344:	08003419 	.word	0x08003419
 8003348:	08003419 	.word	0x08003419
 800334c:	08003419 	.word	0x08003419
 8003350:	08003419 	.word	0x08003419
 8003354:	08003419 	.word	0x08003419
 8003358:	080033cb 	.word	0x080033cb
 800335c:	08003419 	.word	0x08003419
 8003360:	08003419 	.word	0x08003419
 8003364:	08003419 	.word	0x08003419
 8003368:	08003419 	.word	0x08003419
 800336c:	08003419 	.word	0x08003419
 8003370:	08003419 	.word	0x08003419
 8003374:	08003419 	.word	0x08003419
 8003378:	08003419 	.word	0x08003419
 800337c:	08003419 	.word	0x08003419
 8003380:	08003419 	.word	0x08003419
 8003384:	08003419 	.word	0x08003419
 8003388:	08003419 	.word	0x08003419
 800338c:	08003419 	.word	0x08003419
 8003390:	08003419 	.word	0x08003419
 8003394:	08003419 	.word	0x08003419
 8003398:	0800340b 	.word	0x0800340b
 800339c:	2b40      	cmp	r3, #64	@ 0x40
 800339e:	d037      	beq.n	8003410 <UART_SetConfig+0x6bc>
 80033a0:	e03a      	b.n	8003418 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80033a2:	f7ff f931 	bl	8002608 <HAL_RCCEx_GetD3PCLK1Freq>
 80033a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80033a8:	e03c      	b.n	8003424 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80033aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff f940 	bl	8002634 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80033b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80033b8:	e034      	b.n	8003424 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80033ba:	f107 0318 	add.w	r3, r7, #24
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fa8c 	bl	80028dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80033c8:	e02c      	b.n	8003424 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033ca:	4b09      	ldr	r3, [pc, #36]	@ (80033f0 <UART_SetConfig+0x69c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0320 	and.w	r3, r3, #32
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d016      	beq.n	8003404 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80033d6:	4b06      	ldr	r3, [pc, #24]	@ (80033f0 <UART_SetConfig+0x69c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	08db      	lsrs	r3, r3, #3
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	4a07      	ldr	r2, [pc, #28]	@ (8003400 <UART_SetConfig+0x6ac>)
 80033e2:	fa22 f303 	lsr.w	r3, r2, r3
 80033e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80033e8:	e01c      	b.n	8003424 <UART_SetConfig+0x6d0>
 80033ea:	bf00      	nop
 80033ec:	40011400 	.word	0x40011400
 80033f0:	58024400 	.word	0x58024400
 80033f4:	40007800 	.word	0x40007800
 80033f8:	40007c00 	.word	0x40007c00
 80033fc:	58000c00 	.word	0x58000c00
 8003400:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8003404:	4b9d      	ldr	r3, [pc, #628]	@ (800367c <UART_SetConfig+0x928>)
 8003406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003408:	e00c      	b.n	8003424 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800340a:	4b9d      	ldr	r3, [pc, #628]	@ (8003680 <UART_SetConfig+0x92c>)
 800340c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800340e:	e009      	b.n	8003424 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003410:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003416:	e005      	b.n	8003424 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003422:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 81de 	beq.w	80037e8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	4a94      	ldr	r2, [pc, #592]	@ (8003684 <UART_SetConfig+0x930>)
 8003432:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003436:	461a      	mov	r2, r3
 8003438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800343a:	fbb3 f3f2 	udiv	r3, r3, r2
 800343e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	4413      	add	r3, r2
 800344a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800344c:	429a      	cmp	r2, r3
 800344e:	d305      	bcc.n	800345c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003458:	429a      	cmp	r2, r3
 800345a:	d903      	bls.n	8003464 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003462:	e1c1      	b.n	80037e8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003466:	2200      	movs	r2, #0
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	60fa      	str	r2, [r7, #12]
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003470:	4a84      	ldr	r2, [pc, #528]	@ (8003684 <UART_SetConfig+0x930>)
 8003472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003476:	b29b      	uxth	r3, r3
 8003478:	2200      	movs	r2, #0
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	607a      	str	r2, [r7, #4]
 800347e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003482:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003486:	f7fc ff83 	bl	8000390 <__aeabi_uldivmod>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4610      	mov	r0, r2
 8003490:	4619      	mov	r1, r3
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	020b      	lsls	r3, r1, #8
 800349c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80034a0:	0202      	lsls	r2, r0, #8
 80034a2:	6979      	ldr	r1, [r7, #20]
 80034a4:	6849      	ldr	r1, [r1, #4]
 80034a6:	0849      	lsrs	r1, r1, #1
 80034a8:	2000      	movs	r0, #0
 80034aa:	460c      	mov	r4, r1
 80034ac:	4605      	mov	r5, r0
 80034ae:	eb12 0804 	adds.w	r8, r2, r4
 80034b2:	eb43 0905 	adc.w	r9, r3, r5
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	469a      	mov	sl, r3
 80034be:	4693      	mov	fp, r2
 80034c0:	4652      	mov	r2, sl
 80034c2:	465b      	mov	r3, fp
 80034c4:	4640      	mov	r0, r8
 80034c6:	4649      	mov	r1, r9
 80034c8:	f7fc ff62 	bl	8000390 <__aeabi_uldivmod>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4613      	mov	r3, r2
 80034d2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034da:	d308      	bcc.n	80034ee <UART_SetConfig+0x79a>
 80034dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034e2:	d204      	bcs.n	80034ee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034ea:	60da      	str	r2, [r3, #12]
 80034ec:	e17c      	b.n	80037e8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80034f4:	e178      	b.n	80037e8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034fe:	f040 80c5 	bne.w	800368c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8003502:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003506:	2b20      	cmp	r3, #32
 8003508:	dc48      	bgt.n	800359c <UART_SetConfig+0x848>
 800350a:	2b00      	cmp	r3, #0
 800350c:	db7b      	blt.n	8003606 <UART_SetConfig+0x8b2>
 800350e:	2b20      	cmp	r3, #32
 8003510:	d879      	bhi.n	8003606 <UART_SetConfig+0x8b2>
 8003512:	a201      	add	r2, pc, #4	@ (adr r2, 8003518 <UART_SetConfig+0x7c4>)
 8003514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003518:	080035a3 	.word	0x080035a3
 800351c:	080035ab 	.word	0x080035ab
 8003520:	08003607 	.word	0x08003607
 8003524:	08003607 	.word	0x08003607
 8003528:	080035b3 	.word	0x080035b3
 800352c:	08003607 	.word	0x08003607
 8003530:	08003607 	.word	0x08003607
 8003534:	08003607 	.word	0x08003607
 8003538:	080035c3 	.word	0x080035c3
 800353c:	08003607 	.word	0x08003607
 8003540:	08003607 	.word	0x08003607
 8003544:	08003607 	.word	0x08003607
 8003548:	08003607 	.word	0x08003607
 800354c:	08003607 	.word	0x08003607
 8003550:	08003607 	.word	0x08003607
 8003554:	08003607 	.word	0x08003607
 8003558:	080035d3 	.word	0x080035d3
 800355c:	08003607 	.word	0x08003607
 8003560:	08003607 	.word	0x08003607
 8003564:	08003607 	.word	0x08003607
 8003568:	08003607 	.word	0x08003607
 800356c:	08003607 	.word	0x08003607
 8003570:	08003607 	.word	0x08003607
 8003574:	08003607 	.word	0x08003607
 8003578:	08003607 	.word	0x08003607
 800357c:	08003607 	.word	0x08003607
 8003580:	08003607 	.word	0x08003607
 8003584:	08003607 	.word	0x08003607
 8003588:	08003607 	.word	0x08003607
 800358c:	08003607 	.word	0x08003607
 8003590:	08003607 	.word	0x08003607
 8003594:	08003607 	.word	0x08003607
 8003598:	080035f9 	.word	0x080035f9
 800359c:	2b40      	cmp	r3, #64	@ 0x40
 800359e:	d02e      	beq.n	80035fe <UART_SetConfig+0x8aa>
 80035a0:	e031      	b.n	8003606 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a2:	f7ff f805 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 80035a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80035a8:	e033      	b.n	8003612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035aa:	f7ff f817 	bl	80025dc <HAL_RCC_GetPCLK2Freq>
 80035ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80035b0:	e02f      	b.n	8003612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80035b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff f83c 	bl	8002634 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80035bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80035c0:	e027      	b.n	8003612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80035c2:	f107 0318 	add.w	r3, r7, #24
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff f988 	bl	80028dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80035d0:	e01f      	b.n	8003612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003688 <UART_SetConfig+0x934>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d009      	beq.n	80035f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80035de:	4b2a      	ldr	r3, [pc, #168]	@ (8003688 <UART_SetConfig+0x934>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	08db      	lsrs	r3, r3, #3
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	4a24      	ldr	r2, [pc, #144]	@ (800367c <UART_SetConfig+0x928>)
 80035ea:	fa22 f303 	lsr.w	r3, r2, r3
 80035ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80035f0:	e00f      	b.n	8003612 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80035f2:	4b22      	ldr	r3, [pc, #136]	@ (800367c <UART_SetConfig+0x928>)
 80035f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80035f6:	e00c      	b.n	8003612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80035f8:	4b21      	ldr	r3, [pc, #132]	@ (8003680 <UART_SetConfig+0x92c>)
 80035fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80035fc:	e009      	b.n	8003612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003604:	e005      	b.n	8003612 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003610:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 80e7 	beq.w	80037e8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361e:	4a19      	ldr	r2, [pc, #100]	@ (8003684 <UART_SetConfig+0x930>)
 8003620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003624:	461a      	mov	r2, r3
 8003626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003628:	fbb3 f3f2 	udiv	r3, r3, r2
 800362c:	005a      	lsls	r2, r3, #1
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	085b      	lsrs	r3, r3, #1
 8003634:	441a      	add	r2, r3
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	fbb2 f3f3 	udiv	r3, r2, r3
 800363e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003642:	2b0f      	cmp	r3, #15
 8003644:	d916      	bls.n	8003674 <UART_SetConfig+0x920>
 8003646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800364c:	d212      	bcs.n	8003674 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800364e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003650:	b29b      	uxth	r3, r3
 8003652:	f023 030f 	bic.w	r3, r3, #15
 8003656:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365a:	085b      	lsrs	r3, r3, #1
 800365c:	b29b      	uxth	r3, r3
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	b29a      	uxth	r2, r3
 8003664:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003666:	4313      	orrs	r3, r2
 8003668:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003670:	60da      	str	r2, [r3, #12]
 8003672:	e0b9      	b.n	80037e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800367a:	e0b5      	b.n	80037e8 <UART_SetConfig+0xa94>
 800367c:	03d09000 	.word	0x03d09000
 8003680:	003d0900 	.word	0x003d0900
 8003684:	0800467c 	.word	0x0800467c
 8003688:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800368c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003690:	2b20      	cmp	r3, #32
 8003692:	dc49      	bgt.n	8003728 <UART_SetConfig+0x9d4>
 8003694:	2b00      	cmp	r3, #0
 8003696:	db7c      	blt.n	8003792 <UART_SetConfig+0xa3e>
 8003698:	2b20      	cmp	r3, #32
 800369a:	d87a      	bhi.n	8003792 <UART_SetConfig+0xa3e>
 800369c:	a201      	add	r2, pc, #4	@ (adr r2, 80036a4 <UART_SetConfig+0x950>)
 800369e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a2:	bf00      	nop
 80036a4:	0800372f 	.word	0x0800372f
 80036a8:	08003737 	.word	0x08003737
 80036ac:	08003793 	.word	0x08003793
 80036b0:	08003793 	.word	0x08003793
 80036b4:	0800373f 	.word	0x0800373f
 80036b8:	08003793 	.word	0x08003793
 80036bc:	08003793 	.word	0x08003793
 80036c0:	08003793 	.word	0x08003793
 80036c4:	0800374f 	.word	0x0800374f
 80036c8:	08003793 	.word	0x08003793
 80036cc:	08003793 	.word	0x08003793
 80036d0:	08003793 	.word	0x08003793
 80036d4:	08003793 	.word	0x08003793
 80036d8:	08003793 	.word	0x08003793
 80036dc:	08003793 	.word	0x08003793
 80036e0:	08003793 	.word	0x08003793
 80036e4:	0800375f 	.word	0x0800375f
 80036e8:	08003793 	.word	0x08003793
 80036ec:	08003793 	.word	0x08003793
 80036f0:	08003793 	.word	0x08003793
 80036f4:	08003793 	.word	0x08003793
 80036f8:	08003793 	.word	0x08003793
 80036fc:	08003793 	.word	0x08003793
 8003700:	08003793 	.word	0x08003793
 8003704:	08003793 	.word	0x08003793
 8003708:	08003793 	.word	0x08003793
 800370c:	08003793 	.word	0x08003793
 8003710:	08003793 	.word	0x08003793
 8003714:	08003793 	.word	0x08003793
 8003718:	08003793 	.word	0x08003793
 800371c:	08003793 	.word	0x08003793
 8003720:	08003793 	.word	0x08003793
 8003724:	08003785 	.word	0x08003785
 8003728:	2b40      	cmp	r3, #64	@ 0x40
 800372a:	d02e      	beq.n	800378a <UART_SetConfig+0xa36>
 800372c:	e031      	b.n	8003792 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800372e:	f7fe ff3f 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 8003732:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003734:	e033      	b.n	800379e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003736:	f7fe ff51 	bl	80025dc <HAL_RCC_GetPCLK2Freq>
 800373a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800373c:	e02f      	b.n	800379e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800373e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe ff76 	bl	8002634 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800374a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800374c:	e027      	b.n	800379e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800374e:	f107 0318 	add.w	r3, r7, #24
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff f8c2 	bl	80028dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800375c:	e01f      	b.n	800379e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800375e:	4b2d      	ldr	r3, [pc, #180]	@ (8003814 <UART_SetConfig+0xac0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b00      	cmp	r3, #0
 8003768:	d009      	beq.n	800377e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800376a:	4b2a      	ldr	r3, [pc, #168]	@ (8003814 <UART_SetConfig+0xac0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	08db      	lsrs	r3, r3, #3
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	4a28      	ldr	r2, [pc, #160]	@ (8003818 <UART_SetConfig+0xac4>)
 8003776:	fa22 f303 	lsr.w	r3, r2, r3
 800377a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800377c:	e00f      	b.n	800379e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800377e:	4b26      	ldr	r3, [pc, #152]	@ (8003818 <UART_SetConfig+0xac4>)
 8003780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003782:	e00c      	b.n	800379e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003784:	4b25      	ldr	r3, [pc, #148]	@ (800381c <UART_SetConfig+0xac8>)
 8003786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003788:	e009      	b.n	800379e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800378a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800378e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003790:	e005      	b.n	800379e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800379c:	bf00      	nop
    }

    if (pclk != 0U)
 800379e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d021      	beq.n	80037e8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003820 <UART_SetConfig+0xacc>)
 80037aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037ae:	461a      	mov	r2, r3
 80037b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	085b      	lsrs	r3, r3, #1
 80037bc:	441a      	add	r2, r3
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ca:	2b0f      	cmp	r3, #15
 80037cc:	d909      	bls.n	80037e2 <UART_SetConfig+0xa8e>
 80037ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d4:	d205      	bcs.n	80037e2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d8:	b29a      	uxth	r2, r3
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60da      	str	r2, [r3, #12]
 80037e0:	e002      	b.n	80037e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2200      	movs	r2, #0
 80037fc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2200      	movs	r2, #0
 8003802:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003804:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8003808:	4618      	mov	r0, r3
 800380a:	3748      	adds	r7, #72	@ 0x48
 800380c:	46bd      	mov	sp, r7
 800380e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003812:	bf00      	nop
 8003814:	58024400 	.word	0x58024400
 8003818:	03d09000 	.word	0x03d09000
 800381c:	003d0900 	.word	0x003d0900
 8003820:	0800467c 	.word	0x0800467c

08003824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00a      	beq.n	8003892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00a      	beq.n	80038d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01a      	beq.n	800393a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003922:	d10a      	bne.n	800393a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	605a      	str	r2, [r3, #4]
  }
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b098      	sub	sp, #96	@ 0x60
 800396c:	af02      	add	r7, sp, #8
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003978:	f7fd fabc 	bl	8000ef4 <HAL_GetTick>
 800397c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b08      	cmp	r3, #8
 800398a:	d12f      	bne.n	80039ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800398c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003994:	2200      	movs	r2, #0
 8003996:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f88e 	bl	8003abc <UART_WaitOnFlagUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d022      	beq.n	80039ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ae:	e853 3f00 	ldrex	r3, [r3]
 80039b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	461a      	mov	r2, r3
 80039c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80039c6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039cc:	e841 2300 	strex	r3, r2, [r1]
 80039d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1e6      	bne.n	80039a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2220      	movs	r2, #32
 80039dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e063      	b.n	8003ab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d149      	bne.n	8003a8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a02:	2200      	movs	r2, #0
 8003a04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f857 	bl	8003abc <UART_WaitOnFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d03c      	beq.n	8003a8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	e853 3f00 	ldrex	r3, [r3]
 8003a20:	623b      	str	r3, [r7, #32]
   return(result);
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a32:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a3a:	e841 2300 	strex	r3, r2, [r1]
 8003a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1e6      	bne.n	8003a14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3308      	adds	r3, #8
 8003a4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	e853 3f00 	ldrex	r3, [r3]
 8003a54:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f023 0301 	bic.w	r3, r3, #1
 8003a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3308      	adds	r3, #8
 8003a64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a66:	61fa      	str	r2, [r7, #28]
 8003a68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6a:	69b9      	ldr	r1, [r7, #24]
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	617b      	str	r3, [r7, #20]
   return(result);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e5      	bne.n	8003a46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e012      	b.n	8003ab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3758      	adds	r7, #88	@ 0x58
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003acc:	e04f      	b.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ad4:	d04b      	beq.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad6:	f7fd fa0d 	bl	8000ef4 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d302      	bcc.n	8003aec <UART_WaitOnFlagUntilTimeout+0x30>
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e04e      	b.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d037      	beq.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b80      	cmp	r3, #128	@ 0x80
 8003b02:	d034      	beq.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b40      	cmp	r3, #64	@ 0x40
 8003b08:	d031      	beq.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d110      	bne.n	8003b3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2208      	movs	r2, #8
 8003b1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f839 	bl	8003b98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2208      	movs	r2, #8
 8003b2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e029      	b.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b48:	d111      	bne.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 f81f 	bl	8003b98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e00f      	b.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69da      	ldr	r2, [r3, #28]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4013      	ands	r3, r2
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	bf0c      	ite	eq
 8003b7e:	2301      	moveq	r3, #1
 8003b80:	2300      	movne	r3, #0
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d0a0      	beq.n	8003ace <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b095      	sub	sp, #84	@ 0x54
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba8:	e853 3f00 	ldrex	r3, [r3]
 8003bac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bc6:	e841 2300 	strex	r3, r2, [r1]
 8003bca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1e6      	bne.n	8003ba0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3308      	adds	r3, #8
 8003bd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	4b1e      	ldr	r3, [pc, #120]	@ (8003c60 <UART_EndRxTransfer+0xc8>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3308      	adds	r3, #8
 8003bf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e5      	bne.n	8003bd2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d118      	bne.n	8003c40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	e853 3f00 	ldrex	r3, [r3]
 8003c1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f023 0310 	bic.w	r3, r3, #16
 8003c22:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c2c:	61bb      	str	r3, [r7, #24]
 8003c2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c30:	6979      	ldr	r1, [r7, #20]
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	e841 2300 	strex	r3, r2, [r1]
 8003c38:	613b      	str	r3, [r7, #16]
   return(result);
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e6      	bne.n	8003c0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003c54:	bf00      	nop
 8003c56:	3754      	adds	r7, #84	@ 0x54
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	effffffe 	.word	0xeffffffe

08003c64 <sniprintf>:
 8003c64:	b40c      	push	{r2, r3}
 8003c66:	b530      	push	{r4, r5, lr}
 8003c68:	4b17      	ldr	r3, [pc, #92]	@ (8003cc8 <sniprintf+0x64>)
 8003c6a:	1e0c      	subs	r4, r1, #0
 8003c6c:	681d      	ldr	r5, [r3, #0]
 8003c6e:	b09d      	sub	sp, #116	@ 0x74
 8003c70:	da08      	bge.n	8003c84 <sniprintf+0x20>
 8003c72:	238b      	movs	r3, #139	@ 0x8b
 8003c74:	602b      	str	r3, [r5, #0]
 8003c76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c7a:	b01d      	add	sp, #116	@ 0x74
 8003c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c80:	b002      	add	sp, #8
 8003c82:	4770      	bx	lr
 8003c84:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003c88:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003c8c:	bf14      	ite	ne
 8003c8e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8003c92:	4623      	moveq	r3, r4
 8003c94:	9304      	str	r3, [sp, #16]
 8003c96:	9307      	str	r3, [sp, #28]
 8003c98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c9c:	9002      	str	r0, [sp, #8]
 8003c9e:	9006      	str	r0, [sp, #24]
 8003ca0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003ca4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003ca6:	ab21      	add	r3, sp, #132	@ 0x84
 8003ca8:	a902      	add	r1, sp, #8
 8003caa:	4628      	mov	r0, r5
 8003cac:	9301      	str	r3, [sp, #4]
 8003cae:	f000 f8af 	bl	8003e10 <_svfiprintf_r>
 8003cb2:	1c43      	adds	r3, r0, #1
 8003cb4:	bfbc      	itt	lt
 8003cb6:	238b      	movlt	r3, #139	@ 0x8b
 8003cb8:	602b      	strlt	r3, [r5, #0]
 8003cba:	2c00      	cmp	r4, #0
 8003cbc:	d0dd      	beq.n	8003c7a <sniprintf+0x16>
 8003cbe:	9b02      	ldr	r3, [sp, #8]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	701a      	strb	r2, [r3, #0]
 8003cc4:	e7d9      	b.n	8003c7a <sniprintf+0x16>
 8003cc6:	bf00      	nop
 8003cc8:	24000010 	.word	0x24000010

08003ccc <strncmp>:
 8003ccc:	b510      	push	{r4, lr}
 8003cce:	b16a      	cbz	r2, 8003cec <strncmp+0x20>
 8003cd0:	3901      	subs	r1, #1
 8003cd2:	1884      	adds	r4, r0, r2
 8003cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cd8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d103      	bne.n	8003ce8 <strncmp+0x1c>
 8003ce0:	42a0      	cmp	r0, r4
 8003ce2:	d001      	beq.n	8003ce8 <strncmp+0x1c>
 8003ce4:	2a00      	cmp	r2, #0
 8003ce6:	d1f5      	bne.n	8003cd4 <strncmp+0x8>
 8003ce8:	1ad0      	subs	r0, r2, r3
 8003cea:	bd10      	pop	{r4, pc}
 8003cec:	4610      	mov	r0, r2
 8003cee:	e7fc      	b.n	8003cea <strncmp+0x1e>

08003cf0 <memset>:
 8003cf0:	4402      	add	r2, r0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d100      	bne.n	8003cfa <memset+0xa>
 8003cf8:	4770      	bx	lr
 8003cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8003cfe:	e7f9      	b.n	8003cf4 <memset+0x4>

08003d00 <__errno>:
 8003d00:	4b01      	ldr	r3, [pc, #4]	@ (8003d08 <__errno+0x8>)
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	24000010 	.word	0x24000010

08003d0c <__libc_init_array>:
 8003d0c:	b570      	push	{r4, r5, r6, lr}
 8003d0e:	4d0d      	ldr	r5, [pc, #52]	@ (8003d44 <__libc_init_array+0x38>)
 8003d10:	4c0d      	ldr	r4, [pc, #52]	@ (8003d48 <__libc_init_array+0x3c>)
 8003d12:	1b64      	subs	r4, r4, r5
 8003d14:	10a4      	asrs	r4, r4, #2
 8003d16:	2600      	movs	r6, #0
 8003d18:	42a6      	cmp	r6, r4
 8003d1a:	d109      	bne.n	8003d30 <__libc_init_array+0x24>
 8003d1c:	4d0b      	ldr	r5, [pc, #44]	@ (8003d4c <__libc_init_array+0x40>)
 8003d1e:	4c0c      	ldr	r4, [pc, #48]	@ (8003d50 <__libc_init_array+0x44>)
 8003d20:	f000 fc66 	bl	80045f0 <_init>
 8003d24:	1b64      	subs	r4, r4, r5
 8003d26:	10a4      	asrs	r4, r4, #2
 8003d28:	2600      	movs	r6, #0
 8003d2a:	42a6      	cmp	r6, r4
 8003d2c:	d105      	bne.n	8003d3a <__libc_init_array+0x2e>
 8003d2e:	bd70      	pop	{r4, r5, r6, pc}
 8003d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d34:	4798      	blx	r3
 8003d36:	3601      	adds	r6, #1
 8003d38:	e7ee      	b.n	8003d18 <__libc_init_array+0xc>
 8003d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d3e:	4798      	blx	r3
 8003d40:	3601      	adds	r6, #1
 8003d42:	e7f2      	b.n	8003d2a <__libc_init_array+0x1e>
 8003d44:	080046d0 	.word	0x080046d0
 8003d48:	080046d0 	.word	0x080046d0
 8003d4c:	080046d0 	.word	0x080046d0
 8003d50:	080046d4 	.word	0x080046d4

08003d54 <__retarget_lock_acquire_recursive>:
 8003d54:	4770      	bx	lr

08003d56 <__retarget_lock_release_recursive>:
 8003d56:	4770      	bx	lr

08003d58 <__ssputs_r>:
 8003d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d5c:	688e      	ldr	r6, [r1, #8]
 8003d5e:	461f      	mov	r7, r3
 8003d60:	42be      	cmp	r6, r7
 8003d62:	680b      	ldr	r3, [r1, #0]
 8003d64:	4682      	mov	sl, r0
 8003d66:	460c      	mov	r4, r1
 8003d68:	4690      	mov	r8, r2
 8003d6a:	d82d      	bhi.n	8003dc8 <__ssputs_r+0x70>
 8003d6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003d70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003d74:	d026      	beq.n	8003dc4 <__ssputs_r+0x6c>
 8003d76:	6965      	ldr	r5, [r4, #20]
 8003d78:	6909      	ldr	r1, [r1, #16]
 8003d7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d7e:	eba3 0901 	sub.w	r9, r3, r1
 8003d82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d86:	1c7b      	adds	r3, r7, #1
 8003d88:	444b      	add	r3, r9
 8003d8a:	106d      	asrs	r5, r5, #1
 8003d8c:	429d      	cmp	r5, r3
 8003d8e:	bf38      	it	cc
 8003d90:	461d      	movcc	r5, r3
 8003d92:	0553      	lsls	r3, r2, #21
 8003d94:	d527      	bpl.n	8003de6 <__ssputs_r+0x8e>
 8003d96:	4629      	mov	r1, r5
 8003d98:	f000 f958 	bl	800404c <_malloc_r>
 8003d9c:	4606      	mov	r6, r0
 8003d9e:	b360      	cbz	r0, 8003dfa <__ssputs_r+0xa2>
 8003da0:	6921      	ldr	r1, [r4, #16]
 8003da2:	464a      	mov	r2, r9
 8003da4:	f000 fbc4 	bl	8004530 <memcpy>
 8003da8:	89a3      	ldrh	r3, [r4, #12]
 8003daa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003dae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003db2:	81a3      	strh	r3, [r4, #12]
 8003db4:	6126      	str	r6, [r4, #16]
 8003db6:	6165      	str	r5, [r4, #20]
 8003db8:	444e      	add	r6, r9
 8003dba:	eba5 0509 	sub.w	r5, r5, r9
 8003dbe:	6026      	str	r6, [r4, #0]
 8003dc0:	60a5      	str	r5, [r4, #8]
 8003dc2:	463e      	mov	r6, r7
 8003dc4:	42be      	cmp	r6, r7
 8003dc6:	d900      	bls.n	8003dca <__ssputs_r+0x72>
 8003dc8:	463e      	mov	r6, r7
 8003dca:	6820      	ldr	r0, [r4, #0]
 8003dcc:	4632      	mov	r2, r6
 8003dce:	4641      	mov	r1, r8
 8003dd0:	f000 fb84 	bl	80044dc <memmove>
 8003dd4:	68a3      	ldr	r3, [r4, #8]
 8003dd6:	1b9b      	subs	r3, r3, r6
 8003dd8:	60a3      	str	r3, [r4, #8]
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	4433      	add	r3, r6
 8003dde:	6023      	str	r3, [r4, #0]
 8003de0:	2000      	movs	r0, #0
 8003de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de6:	462a      	mov	r2, r5
 8003de8:	f000 fb4a 	bl	8004480 <_realloc_r>
 8003dec:	4606      	mov	r6, r0
 8003dee:	2800      	cmp	r0, #0
 8003df0:	d1e0      	bne.n	8003db4 <__ssputs_r+0x5c>
 8003df2:	6921      	ldr	r1, [r4, #16]
 8003df4:	4650      	mov	r0, sl
 8003df6:	f000 fba9 	bl	800454c <_free_r>
 8003dfa:	230c      	movs	r3, #12
 8003dfc:	f8ca 3000 	str.w	r3, [sl]
 8003e00:	89a3      	ldrh	r3, [r4, #12]
 8003e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e06:	81a3      	strh	r3, [r4, #12]
 8003e08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e0c:	e7e9      	b.n	8003de2 <__ssputs_r+0x8a>
	...

08003e10 <_svfiprintf_r>:
 8003e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e14:	4698      	mov	r8, r3
 8003e16:	898b      	ldrh	r3, [r1, #12]
 8003e18:	061b      	lsls	r3, r3, #24
 8003e1a:	b09d      	sub	sp, #116	@ 0x74
 8003e1c:	4607      	mov	r7, r0
 8003e1e:	460d      	mov	r5, r1
 8003e20:	4614      	mov	r4, r2
 8003e22:	d510      	bpl.n	8003e46 <_svfiprintf_r+0x36>
 8003e24:	690b      	ldr	r3, [r1, #16]
 8003e26:	b973      	cbnz	r3, 8003e46 <_svfiprintf_r+0x36>
 8003e28:	2140      	movs	r1, #64	@ 0x40
 8003e2a:	f000 f90f 	bl	800404c <_malloc_r>
 8003e2e:	6028      	str	r0, [r5, #0]
 8003e30:	6128      	str	r0, [r5, #16]
 8003e32:	b930      	cbnz	r0, 8003e42 <_svfiprintf_r+0x32>
 8003e34:	230c      	movs	r3, #12
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e3c:	b01d      	add	sp, #116	@ 0x74
 8003e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e42:	2340      	movs	r3, #64	@ 0x40
 8003e44:	616b      	str	r3, [r5, #20]
 8003e46:	2300      	movs	r3, #0
 8003e48:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e4a:	2320      	movs	r3, #32
 8003e4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e50:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e54:	2330      	movs	r3, #48	@ 0x30
 8003e56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003ff4 <_svfiprintf_r+0x1e4>
 8003e5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003e5e:	f04f 0901 	mov.w	r9, #1
 8003e62:	4623      	mov	r3, r4
 8003e64:	469a      	mov	sl, r3
 8003e66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e6a:	b10a      	cbz	r2, 8003e70 <_svfiprintf_r+0x60>
 8003e6c:	2a25      	cmp	r2, #37	@ 0x25
 8003e6e:	d1f9      	bne.n	8003e64 <_svfiprintf_r+0x54>
 8003e70:	ebba 0b04 	subs.w	fp, sl, r4
 8003e74:	d00b      	beq.n	8003e8e <_svfiprintf_r+0x7e>
 8003e76:	465b      	mov	r3, fp
 8003e78:	4622      	mov	r2, r4
 8003e7a:	4629      	mov	r1, r5
 8003e7c:	4638      	mov	r0, r7
 8003e7e:	f7ff ff6b 	bl	8003d58 <__ssputs_r>
 8003e82:	3001      	adds	r0, #1
 8003e84:	f000 80a7 	beq.w	8003fd6 <_svfiprintf_r+0x1c6>
 8003e88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e8a:	445a      	add	r2, fp
 8003e8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 809f 	beq.w	8003fd6 <_svfiprintf_r+0x1c6>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ea2:	f10a 0a01 	add.w	sl, sl, #1
 8003ea6:	9304      	str	r3, [sp, #16]
 8003ea8:	9307      	str	r3, [sp, #28]
 8003eaa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003eae:	931a      	str	r3, [sp, #104]	@ 0x68
 8003eb0:	4654      	mov	r4, sl
 8003eb2:	2205      	movs	r2, #5
 8003eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eb8:	484e      	ldr	r0, [pc, #312]	@ (8003ff4 <_svfiprintf_r+0x1e4>)
 8003eba:	f7fc fa19 	bl	80002f0 <memchr>
 8003ebe:	9a04      	ldr	r2, [sp, #16]
 8003ec0:	b9d8      	cbnz	r0, 8003efa <_svfiprintf_r+0xea>
 8003ec2:	06d0      	lsls	r0, r2, #27
 8003ec4:	bf44      	itt	mi
 8003ec6:	2320      	movmi	r3, #32
 8003ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ecc:	0711      	lsls	r1, r2, #28
 8003ece:	bf44      	itt	mi
 8003ed0:	232b      	movmi	r3, #43	@ 0x2b
 8003ed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8003eda:	2b2a      	cmp	r3, #42	@ 0x2a
 8003edc:	d015      	beq.n	8003f0a <_svfiprintf_r+0xfa>
 8003ede:	9a07      	ldr	r2, [sp, #28]
 8003ee0:	4654      	mov	r4, sl
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	f04f 0c0a 	mov.w	ip, #10
 8003ee8:	4621      	mov	r1, r4
 8003eea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003eee:	3b30      	subs	r3, #48	@ 0x30
 8003ef0:	2b09      	cmp	r3, #9
 8003ef2:	d94b      	bls.n	8003f8c <_svfiprintf_r+0x17c>
 8003ef4:	b1b0      	cbz	r0, 8003f24 <_svfiprintf_r+0x114>
 8003ef6:	9207      	str	r2, [sp, #28]
 8003ef8:	e014      	b.n	8003f24 <_svfiprintf_r+0x114>
 8003efa:	eba0 0308 	sub.w	r3, r0, r8
 8003efe:	fa09 f303 	lsl.w	r3, r9, r3
 8003f02:	4313      	orrs	r3, r2
 8003f04:	9304      	str	r3, [sp, #16]
 8003f06:	46a2      	mov	sl, r4
 8003f08:	e7d2      	b.n	8003eb0 <_svfiprintf_r+0xa0>
 8003f0a:	9b03      	ldr	r3, [sp, #12]
 8003f0c:	1d19      	adds	r1, r3, #4
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	9103      	str	r1, [sp, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	bfbb      	ittet	lt
 8003f16:	425b      	neglt	r3, r3
 8003f18:	f042 0202 	orrlt.w	r2, r2, #2
 8003f1c:	9307      	strge	r3, [sp, #28]
 8003f1e:	9307      	strlt	r3, [sp, #28]
 8003f20:	bfb8      	it	lt
 8003f22:	9204      	strlt	r2, [sp, #16]
 8003f24:	7823      	ldrb	r3, [r4, #0]
 8003f26:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f28:	d10a      	bne.n	8003f40 <_svfiprintf_r+0x130>
 8003f2a:	7863      	ldrb	r3, [r4, #1]
 8003f2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f2e:	d132      	bne.n	8003f96 <_svfiprintf_r+0x186>
 8003f30:	9b03      	ldr	r3, [sp, #12]
 8003f32:	1d1a      	adds	r2, r3, #4
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	9203      	str	r2, [sp, #12]
 8003f38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f3c:	3402      	adds	r4, #2
 8003f3e:	9305      	str	r3, [sp, #20]
 8003f40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004004 <_svfiprintf_r+0x1f4>
 8003f44:	7821      	ldrb	r1, [r4, #0]
 8003f46:	2203      	movs	r2, #3
 8003f48:	4650      	mov	r0, sl
 8003f4a:	f7fc f9d1 	bl	80002f0 <memchr>
 8003f4e:	b138      	cbz	r0, 8003f60 <_svfiprintf_r+0x150>
 8003f50:	9b04      	ldr	r3, [sp, #16]
 8003f52:	eba0 000a 	sub.w	r0, r0, sl
 8003f56:	2240      	movs	r2, #64	@ 0x40
 8003f58:	4082      	lsls	r2, r0
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	3401      	adds	r4, #1
 8003f5e:	9304      	str	r3, [sp, #16]
 8003f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f64:	4824      	ldr	r0, [pc, #144]	@ (8003ff8 <_svfiprintf_r+0x1e8>)
 8003f66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f6a:	2206      	movs	r2, #6
 8003f6c:	f7fc f9c0 	bl	80002f0 <memchr>
 8003f70:	2800      	cmp	r0, #0
 8003f72:	d036      	beq.n	8003fe2 <_svfiprintf_r+0x1d2>
 8003f74:	4b21      	ldr	r3, [pc, #132]	@ (8003ffc <_svfiprintf_r+0x1ec>)
 8003f76:	bb1b      	cbnz	r3, 8003fc0 <_svfiprintf_r+0x1b0>
 8003f78:	9b03      	ldr	r3, [sp, #12]
 8003f7a:	3307      	adds	r3, #7
 8003f7c:	f023 0307 	bic.w	r3, r3, #7
 8003f80:	3308      	adds	r3, #8
 8003f82:	9303      	str	r3, [sp, #12]
 8003f84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f86:	4433      	add	r3, r6
 8003f88:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f8a:	e76a      	b.n	8003e62 <_svfiprintf_r+0x52>
 8003f8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f90:	460c      	mov	r4, r1
 8003f92:	2001      	movs	r0, #1
 8003f94:	e7a8      	b.n	8003ee8 <_svfiprintf_r+0xd8>
 8003f96:	2300      	movs	r3, #0
 8003f98:	3401      	adds	r4, #1
 8003f9a:	9305      	str	r3, [sp, #20]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f04f 0c0a 	mov.w	ip, #10
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fa8:	3a30      	subs	r2, #48	@ 0x30
 8003faa:	2a09      	cmp	r2, #9
 8003fac:	d903      	bls.n	8003fb6 <_svfiprintf_r+0x1a6>
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0c6      	beq.n	8003f40 <_svfiprintf_r+0x130>
 8003fb2:	9105      	str	r1, [sp, #20]
 8003fb4:	e7c4      	b.n	8003f40 <_svfiprintf_r+0x130>
 8003fb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fba:	4604      	mov	r4, r0
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e7f0      	b.n	8003fa2 <_svfiprintf_r+0x192>
 8003fc0:	ab03      	add	r3, sp, #12
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	462a      	mov	r2, r5
 8003fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8004000 <_svfiprintf_r+0x1f0>)
 8003fc8:	a904      	add	r1, sp, #16
 8003fca:	4638      	mov	r0, r7
 8003fcc:	f3af 8000 	nop.w
 8003fd0:	1c42      	adds	r2, r0, #1
 8003fd2:	4606      	mov	r6, r0
 8003fd4:	d1d6      	bne.n	8003f84 <_svfiprintf_r+0x174>
 8003fd6:	89ab      	ldrh	r3, [r5, #12]
 8003fd8:	065b      	lsls	r3, r3, #25
 8003fda:	f53f af2d 	bmi.w	8003e38 <_svfiprintf_r+0x28>
 8003fde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003fe0:	e72c      	b.n	8003e3c <_svfiprintf_r+0x2c>
 8003fe2:	ab03      	add	r3, sp, #12
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	462a      	mov	r2, r5
 8003fe8:	4b05      	ldr	r3, [pc, #20]	@ (8004000 <_svfiprintf_r+0x1f0>)
 8003fea:	a904      	add	r1, sp, #16
 8003fec:	4638      	mov	r0, r7
 8003fee:	f000 f91b 	bl	8004228 <_printf_i>
 8003ff2:	e7ed      	b.n	8003fd0 <_svfiprintf_r+0x1c0>
 8003ff4:	08004694 	.word	0x08004694
 8003ff8:	0800469e 	.word	0x0800469e
 8003ffc:	00000000 	.word	0x00000000
 8004000:	08003d59 	.word	0x08003d59
 8004004:	0800469a 	.word	0x0800469a

08004008 <sbrk_aligned>:
 8004008:	b570      	push	{r4, r5, r6, lr}
 800400a:	4e0f      	ldr	r6, [pc, #60]	@ (8004048 <sbrk_aligned+0x40>)
 800400c:	460c      	mov	r4, r1
 800400e:	6831      	ldr	r1, [r6, #0]
 8004010:	4605      	mov	r5, r0
 8004012:	b911      	cbnz	r1, 800401a <sbrk_aligned+0x12>
 8004014:	f000 fa7c 	bl	8004510 <_sbrk_r>
 8004018:	6030      	str	r0, [r6, #0]
 800401a:	4621      	mov	r1, r4
 800401c:	4628      	mov	r0, r5
 800401e:	f000 fa77 	bl	8004510 <_sbrk_r>
 8004022:	1c43      	adds	r3, r0, #1
 8004024:	d103      	bne.n	800402e <sbrk_aligned+0x26>
 8004026:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800402a:	4620      	mov	r0, r4
 800402c:	bd70      	pop	{r4, r5, r6, pc}
 800402e:	1cc4      	adds	r4, r0, #3
 8004030:	f024 0403 	bic.w	r4, r4, #3
 8004034:	42a0      	cmp	r0, r4
 8004036:	d0f8      	beq.n	800402a <sbrk_aligned+0x22>
 8004038:	1a21      	subs	r1, r4, r0
 800403a:	4628      	mov	r0, r5
 800403c:	f000 fa68 	bl	8004510 <_sbrk_r>
 8004040:	3001      	adds	r0, #1
 8004042:	d1f2      	bne.n	800402a <sbrk_aligned+0x22>
 8004044:	e7ef      	b.n	8004026 <sbrk_aligned+0x1e>
 8004046:	bf00      	nop
 8004048:	2400028c 	.word	0x2400028c

0800404c <_malloc_r>:
 800404c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004050:	1ccd      	adds	r5, r1, #3
 8004052:	f025 0503 	bic.w	r5, r5, #3
 8004056:	3508      	adds	r5, #8
 8004058:	2d0c      	cmp	r5, #12
 800405a:	bf38      	it	cc
 800405c:	250c      	movcc	r5, #12
 800405e:	2d00      	cmp	r5, #0
 8004060:	4606      	mov	r6, r0
 8004062:	db01      	blt.n	8004068 <_malloc_r+0x1c>
 8004064:	42a9      	cmp	r1, r5
 8004066:	d904      	bls.n	8004072 <_malloc_r+0x26>
 8004068:	230c      	movs	r3, #12
 800406a:	6033      	str	r3, [r6, #0]
 800406c:	2000      	movs	r0, #0
 800406e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004072:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004148 <_malloc_r+0xfc>
 8004076:	f000 f9f7 	bl	8004468 <__malloc_lock>
 800407a:	f8d8 3000 	ldr.w	r3, [r8]
 800407e:	461c      	mov	r4, r3
 8004080:	bb44      	cbnz	r4, 80040d4 <_malloc_r+0x88>
 8004082:	4629      	mov	r1, r5
 8004084:	4630      	mov	r0, r6
 8004086:	f7ff ffbf 	bl	8004008 <sbrk_aligned>
 800408a:	1c43      	adds	r3, r0, #1
 800408c:	4604      	mov	r4, r0
 800408e:	d158      	bne.n	8004142 <_malloc_r+0xf6>
 8004090:	f8d8 4000 	ldr.w	r4, [r8]
 8004094:	4627      	mov	r7, r4
 8004096:	2f00      	cmp	r7, #0
 8004098:	d143      	bne.n	8004122 <_malloc_r+0xd6>
 800409a:	2c00      	cmp	r4, #0
 800409c:	d04b      	beq.n	8004136 <_malloc_r+0xea>
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	4639      	mov	r1, r7
 80040a2:	4630      	mov	r0, r6
 80040a4:	eb04 0903 	add.w	r9, r4, r3
 80040a8:	f000 fa32 	bl	8004510 <_sbrk_r>
 80040ac:	4581      	cmp	r9, r0
 80040ae:	d142      	bne.n	8004136 <_malloc_r+0xea>
 80040b0:	6821      	ldr	r1, [r4, #0]
 80040b2:	1a6d      	subs	r5, r5, r1
 80040b4:	4629      	mov	r1, r5
 80040b6:	4630      	mov	r0, r6
 80040b8:	f7ff ffa6 	bl	8004008 <sbrk_aligned>
 80040bc:	3001      	adds	r0, #1
 80040be:	d03a      	beq.n	8004136 <_malloc_r+0xea>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	442b      	add	r3, r5
 80040c4:	6023      	str	r3, [r4, #0]
 80040c6:	f8d8 3000 	ldr.w	r3, [r8]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	bb62      	cbnz	r2, 8004128 <_malloc_r+0xdc>
 80040ce:	f8c8 7000 	str.w	r7, [r8]
 80040d2:	e00f      	b.n	80040f4 <_malloc_r+0xa8>
 80040d4:	6822      	ldr	r2, [r4, #0]
 80040d6:	1b52      	subs	r2, r2, r5
 80040d8:	d420      	bmi.n	800411c <_malloc_r+0xd0>
 80040da:	2a0b      	cmp	r2, #11
 80040dc:	d917      	bls.n	800410e <_malloc_r+0xc2>
 80040de:	1961      	adds	r1, r4, r5
 80040e0:	42a3      	cmp	r3, r4
 80040e2:	6025      	str	r5, [r4, #0]
 80040e4:	bf18      	it	ne
 80040e6:	6059      	strne	r1, [r3, #4]
 80040e8:	6863      	ldr	r3, [r4, #4]
 80040ea:	bf08      	it	eq
 80040ec:	f8c8 1000 	streq.w	r1, [r8]
 80040f0:	5162      	str	r2, [r4, r5]
 80040f2:	604b      	str	r3, [r1, #4]
 80040f4:	4630      	mov	r0, r6
 80040f6:	f000 f9bd 	bl	8004474 <__malloc_unlock>
 80040fa:	f104 000b 	add.w	r0, r4, #11
 80040fe:	1d23      	adds	r3, r4, #4
 8004100:	f020 0007 	bic.w	r0, r0, #7
 8004104:	1ac2      	subs	r2, r0, r3
 8004106:	bf1c      	itt	ne
 8004108:	1a1b      	subne	r3, r3, r0
 800410a:	50a3      	strne	r3, [r4, r2]
 800410c:	e7af      	b.n	800406e <_malloc_r+0x22>
 800410e:	6862      	ldr	r2, [r4, #4]
 8004110:	42a3      	cmp	r3, r4
 8004112:	bf0c      	ite	eq
 8004114:	f8c8 2000 	streq.w	r2, [r8]
 8004118:	605a      	strne	r2, [r3, #4]
 800411a:	e7eb      	b.n	80040f4 <_malloc_r+0xa8>
 800411c:	4623      	mov	r3, r4
 800411e:	6864      	ldr	r4, [r4, #4]
 8004120:	e7ae      	b.n	8004080 <_malloc_r+0x34>
 8004122:	463c      	mov	r4, r7
 8004124:	687f      	ldr	r7, [r7, #4]
 8004126:	e7b6      	b.n	8004096 <_malloc_r+0x4a>
 8004128:	461a      	mov	r2, r3
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	42a3      	cmp	r3, r4
 800412e:	d1fb      	bne.n	8004128 <_malloc_r+0xdc>
 8004130:	2300      	movs	r3, #0
 8004132:	6053      	str	r3, [r2, #4]
 8004134:	e7de      	b.n	80040f4 <_malloc_r+0xa8>
 8004136:	230c      	movs	r3, #12
 8004138:	6033      	str	r3, [r6, #0]
 800413a:	4630      	mov	r0, r6
 800413c:	f000 f99a 	bl	8004474 <__malloc_unlock>
 8004140:	e794      	b.n	800406c <_malloc_r+0x20>
 8004142:	6005      	str	r5, [r0, #0]
 8004144:	e7d6      	b.n	80040f4 <_malloc_r+0xa8>
 8004146:	bf00      	nop
 8004148:	24000290 	.word	0x24000290

0800414c <_printf_common>:
 800414c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004150:	4616      	mov	r6, r2
 8004152:	4698      	mov	r8, r3
 8004154:	688a      	ldr	r2, [r1, #8]
 8004156:	690b      	ldr	r3, [r1, #16]
 8004158:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800415c:	4293      	cmp	r3, r2
 800415e:	bfb8      	it	lt
 8004160:	4613      	movlt	r3, r2
 8004162:	6033      	str	r3, [r6, #0]
 8004164:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004168:	4607      	mov	r7, r0
 800416a:	460c      	mov	r4, r1
 800416c:	b10a      	cbz	r2, 8004172 <_printf_common+0x26>
 800416e:	3301      	adds	r3, #1
 8004170:	6033      	str	r3, [r6, #0]
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	0699      	lsls	r1, r3, #26
 8004176:	bf42      	ittt	mi
 8004178:	6833      	ldrmi	r3, [r6, #0]
 800417a:	3302      	addmi	r3, #2
 800417c:	6033      	strmi	r3, [r6, #0]
 800417e:	6825      	ldr	r5, [r4, #0]
 8004180:	f015 0506 	ands.w	r5, r5, #6
 8004184:	d106      	bne.n	8004194 <_printf_common+0x48>
 8004186:	f104 0a19 	add.w	sl, r4, #25
 800418a:	68e3      	ldr	r3, [r4, #12]
 800418c:	6832      	ldr	r2, [r6, #0]
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	42ab      	cmp	r3, r5
 8004192:	dc26      	bgt.n	80041e2 <_printf_common+0x96>
 8004194:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004198:	6822      	ldr	r2, [r4, #0]
 800419a:	3b00      	subs	r3, #0
 800419c:	bf18      	it	ne
 800419e:	2301      	movne	r3, #1
 80041a0:	0692      	lsls	r2, r2, #26
 80041a2:	d42b      	bmi.n	80041fc <_printf_common+0xb0>
 80041a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80041a8:	4641      	mov	r1, r8
 80041aa:	4638      	mov	r0, r7
 80041ac:	47c8      	blx	r9
 80041ae:	3001      	adds	r0, #1
 80041b0:	d01e      	beq.n	80041f0 <_printf_common+0xa4>
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	6922      	ldr	r2, [r4, #16]
 80041b6:	f003 0306 	and.w	r3, r3, #6
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	bf02      	ittt	eq
 80041be:	68e5      	ldreq	r5, [r4, #12]
 80041c0:	6833      	ldreq	r3, [r6, #0]
 80041c2:	1aed      	subeq	r5, r5, r3
 80041c4:	68a3      	ldr	r3, [r4, #8]
 80041c6:	bf0c      	ite	eq
 80041c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041cc:	2500      	movne	r5, #0
 80041ce:	4293      	cmp	r3, r2
 80041d0:	bfc4      	itt	gt
 80041d2:	1a9b      	subgt	r3, r3, r2
 80041d4:	18ed      	addgt	r5, r5, r3
 80041d6:	2600      	movs	r6, #0
 80041d8:	341a      	adds	r4, #26
 80041da:	42b5      	cmp	r5, r6
 80041dc:	d11a      	bne.n	8004214 <_printf_common+0xc8>
 80041de:	2000      	movs	r0, #0
 80041e0:	e008      	b.n	80041f4 <_printf_common+0xa8>
 80041e2:	2301      	movs	r3, #1
 80041e4:	4652      	mov	r2, sl
 80041e6:	4641      	mov	r1, r8
 80041e8:	4638      	mov	r0, r7
 80041ea:	47c8      	blx	r9
 80041ec:	3001      	adds	r0, #1
 80041ee:	d103      	bne.n	80041f8 <_printf_common+0xac>
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041f8:	3501      	adds	r5, #1
 80041fa:	e7c6      	b.n	800418a <_printf_common+0x3e>
 80041fc:	18e1      	adds	r1, r4, r3
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	2030      	movs	r0, #48	@ 0x30
 8004202:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004206:	4422      	add	r2, r4
 8004208:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800420c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004210:	3302      	adds	r3, #2
 8004212:	e7c7      	b.n	80041a4 <_printf_common+0x58>
 8004214:	2301      	movs	r3, #1
 8004216:	4622      	mov	r2, r4
 8004218:	4641      	mov	r1, r8
 800421a:	4638      	mov	r0, r7
 800421c:	47c8      	blx	r9
 800421e:	3001      	adds	r0, #1
 8004220:	d0e6      	beq.n	80041f0 <_printf_common+0xa4>
 8004222:	3601      	adds	r6, #1
 8004224:	e7d9      	b.n	80041da <_printf_common+0x8e>
	...

08004228 <_printf_i>:
 8004228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800422c:	7e0f      	ldrb	r7, [r1, #24]
 800422e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004230:	2f78      	cmp	r7, #120	@ 0x78
 8004232:	4691      	mov	r9, r2
 8004234:	4680      	mov	r8, r0
 8004236:	460c      	mov	r4, r1
 8004238:	469a      	mov	sl, r3
 800423a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800423e:	d807      	bhi.n	8004250 <_printf_i+0x28>
 8004240:	2f62      	cmp	r7, #98	@ 0x62
 8004242:	d80a      	bhi.n	800425a <_printf_i+0x32>
 8004244:	2f00      	cmp	r7, #0
 8004246:	f000 80d2 	beq.w	80043ee <_printf_i+0x1c6>
 800424a:	2f58      	cmp	r7, #88	@ 0x58
 800424c:	f000 80b9 	beq.w	80043c2 <_printf_i+0x19a>
 8004250:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004254:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004258:	e03a      	b.n	80042d0 <_printf_i+0xa8>
 800425a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800425e:	2b15      	cmp	r3, #21
 8004260:	d8f6      	bhi.n	8004250 <_printf_i+0x28>
 8004262:	a101      	add	r1, pc, #4	@ (adr r1, 8004268 <_printf_i+0x40>)
 8004264:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004268:	080042c1 	.word	0x080042c1
 800426c:	080042d5 	.word	0x080042d5
 8004270:	08004251 	.word	0x08004251
 8004274:	08004251 	.word	0x08004251
 8004278:	08004251 	.word	0x08004251
 800427c:	08004251 	.word	0x08004251
 8004280:	080042d5 	.word	0x080042d5
 8004284:	08004251 	.word	0x08004251
 8004288:	08004251 	.word	0x08004251
 800428c:	08004251 	.word	0x08004251
 8004290:	08004251 	.word	0x08004251
 8004294:	080043d5 	.word	0x080043d5
 8004298:	080042ff 	.word	0x080042ff
 800429c:	0800438f 	.word	0x0800438f
 80042a0:	08004251 	.word	0x08004251
 80042a4:	08004251 	.word	0x08004251
 80042a8:	080043f7 	.word	0x080043f7
 80042ac:	08004251 	.word	0x08004251
 80042b0:	080042ff 	.word	0x080042ff
 80042b4:	08004251 	.word	0x08004251
 80042b8:	08004251 	.word	0x08004251
 80042bc:	08004397 	.word	0x08004397
 80042c0:	6833      	ldr	r3, [r6, #0]
 80042c2:	1d1a      	adds	r2, r3, #4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6032      	str	r2, [r6, #0]
 80042c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80042d0:	2301      	movs	r3, #1
 80042d2:	e09d      	b.n	8004410 <_printf_i+0x1e8>
 80042d4:	6833      	ldr	r3, [r6, #0]
 80042d6:	6820      	ldr	r0, [r4, #0]
 80042d8:	1d19      	adds	r1, r3, #4
 80042da:	6031      	str	r1, [r6, #0]
 80042dc:	0606      	lsls	r6, r0, #24
 80042de:	d501      	bpl.n	80042e4 <_printf_i+0xbc>
 80042e0:	681d      	ldr	r5, [r3, #0]
 80042e2:	e003      	b.n	80042ec <_printf_i+0xc4>
 80042e4:	0645      	lsls	r5, r0, #25
 80042e6:	d5fb      	bpl.n	80042e0 <_printf_i+0xb8>
 80042e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80042ec:	2d00      	cmp	r5, #0
 80042ee:	da03      	bge.n	80042f8 <_printf_i+0xd0>
 80042f0:	232d      	movs	r3, #45	@ 0x2d
 80042f2:	426d      	negs	r5, r5
 80042f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042f8:	4859      	ldr	r0, [pc, #356]	@ (8004460 <_printf_i+0x238>)
 80042fa:	230a      	movs	r3, #10
 80042fc:	e011      	b.n	8004322 <_printf_i+0xfa>
 80042fe:	6821      	ldr	r1, [r4, #0]
 8004300:	6833      	ldr	r3, [r6, #0]
 8004302:	0608      	lsls	r0, r1, #24
 8004304:	f853 5b04 	ldr.w	r5, [r3], #4
 8004308:	d402      	bmi.n	8004310 <_printf_i+0xe8>
 800430a:	0649      	lsls	r1, r1, #25
 800430c:	bf48      	it	mi
 800430e:	b2ad      	uxthmi	r5, r5
 8004310:	2f6f      	cmp	r7, #111	@ 0x6f
 8004312:	4853      	ldr	r0, [pc, #332]	@ (8004460 <_printf_i+0x238>)
 8004314:	6033      	str	r3, [r6, #0]
 8004316:	bf14      	ite	ne
 8004318:	230a      	movne	r3, #10
 800431a:	2308      	moveq	r3, #8
 800431c:	2100      	movs	r1, #0
 800431e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004322:	6866      	ldr	r6, [r4, #4]
 8004324:	60a6      	str	r6, [r4, #8]
 8004326:	2e00      	cmp	r6, #0
 8004328:	bfa2      	ittt	ge
 800432a:	6821      	ldrge	r1, [r4, #0]
 800432c:	f021 0104 	bicge.w	r1, r1, #4
 8004330:	6021      	strge	r1, [r4, #0]
 8004332:	b90d      	cbnz	r5, 8004338 <_printf_i+0x110>
 8004334:	2e00      	cmp	r6, #0
 8004336:	d04b      	beq.n	80043d0 <_printf_i+0x1a8>
 8004338:	4616      	mov	r6, r2
 800433a:	fbb5 f1f3 	udiv	r1, r5, r3
 800433e:	fb03 5711 	mls	r7, r3, r1, r5
 8004342:	5dc7      	ldrb	r7, [r0, r7]
 8004344:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004348:	462f      	mov	r7, r5
 800434a:	42bb      	cmp	r3, r7
 800434c:	460d      	mov	r5, r1
 800434e:	d9f4      	bls.n	800433a <_printf_i+0x112>
 8004350:	2b08      	cmp	r3, #8
 8004352:	d10b      	bne.n	800436c <_printf_i+0x144>
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	07df      	lsls	r7, r3, #31
 8004358:	d508      	bpl.n	800436c <_printf_i+0x144>
 800435a:	6923      	ldr	r3, [r4, #16]
 800435c:	6861      	ldr	r1, [r4, #4]
 800435e:	4299      	cmp	r1, r3
 8004360:	bfde      	ittt	le
 8004362:	2330      	movle	r3, #48	@ 0x30
 8004364:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004368:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800436c:	1b92      	subs	r2, r2, r6
 800436e:	6122      	str	r2, [r4, #16]
 8004370:	f8cd a000 	str.w	sl, [sp]
 8004374:	464b      	mov	r3, r9
 8004376:	aa03      	add	r2, sp, #12
 8004378:	4621      	mov	r1, r4
 800437a:	4640      	mov	r0, r8
 800437c:	f7ff fee6 	bl	800414c <_printf_common>
 8004380:	3001      	adds	r0, #1
 8004382:	d14a      	bne.n	800441a <_printf_i+0x1f2>
 8004384:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004388:	b004      	add	sp, #16
 800438a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	f043 0320 	orr.w	r3, r3, #32
 8004394:	6023      	str	r3, [r4, #0]
 8004396:	4833      	ldr	r0, [pc, #204]	@ (8004464 <_printf_i+0x23c>)
 8004398:	2778      	movs	r7, #120	@ 0x78
 800439a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800439e:	6823      	ldr	r3, [r4, #0]
 80043a0:	6831      	ldr	r1, [r6, #0]
 80043a2:	061f      	lsls	r7, r3, #24
 80043a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80043a8:	d402      	bmi.n	80043b0 <_printf_i+0x188>
 80043aa:	065f      	lsls	r7, r3, #25
 80043ac:	bf48      	it	mi
 80043ae:	b2ad      	uxthmi	r5, r5
 80043b0:	6031      	str	r1, [r6, #0]
 80043b2:	07d9      	lsls	r1, r3, #31
 80043b4:	bf44      	itt	mi
 80043b6:	f043 0320 	orrmi.w	r3, r3, #32
 80043ba:	6023      	strmi	r3, [r4, #0]
 80043bc:	b11d      	cbz	r5, 80043c6 <_printf_i+0x19e>
 80043be:	2310      	movs	r3, #16
 80043c0:	e7ac      	b.n	800431c <_printf_i+0xf4>
 80043c2:	4827      	ldr	r0, [pc, #156]	@ (8004460 <_printf_i+0x238>)
 80043c4:	e7e9      	b.n	800439a <_printf_i+0x172>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	f023 0320 	bic.w	r3, r3, #32
 80043cc:	6023      	str	r3, [r4, #0]
 80043ce:	e7f6      	b.n	80043be <_printf_i+0x196>
 80043d0:	4616      	mov	r6, r2
 80043d2:	e7bd      	b.n	8004350 <_printf_i+0x128>
 80043d4:	6833      	ldr	r3, [r6, #0]
 80043d6:	6825      	ldr	r5, [r4, #0]
 80043d8:	6961      	ldr	r1, [r4, #20]
 80043da:	1d18      	adds	r0, r3, #4
 80043dc:	6030      	str	r0, [r6, #0]
 80043de:	062e      	lsls	r6, r5, #24
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	d501      	bpl.n	80043e8 <_printf_i+0x1c0>
 80043e4:	6019      	str	r1, [r3, #0]
 80043e6:	e002      	b.n	80043ee <_printf_i+0x1c6>
 80043e8:	0668      	lsls	r0, r5, #25
 80043ea:	d5fb      	bpl.n	80043e4 <_printf_i+0x1bc>
 80043ec:	8019      	strh	r1, [r3, #0]
 80043ee:	2300      	movs	r3, #0
 80043f0:	6123      	str	r3, [r4, #16]
 80043f2:	4616      	mov	r6, r2
 80043f4:	e7bc      	b.n	8004370 <_printf_i+0x148>
 80043f6:	6833      	ldr	r3, [r6, #0]
 80043f8:	1d1a      	adds	r2, r3, #4
 80043fa:	6032      	str	r2, [r6, #0]
 80043fc:	681e      	ldr	r6, [r3, #0]
 80043fe:	6862      	ldr	r2, [r4, #4]
 8004400:	2100      	movs	r1, #0
 8004402:	4630      	mov	r0, r6
 8004404:	f7fb ff74 	bl	80002f0 <memchr>
 8004408:	b108      	cbz	r0, 800440e <_printf_i+0x1e6>
 800440a:	1b80      	subs	r0, r0, r6
 800440c:	6060      	str	r0, [r4, #4]
 800440e:	6863      	ldr	r3, [r4, #4]
 8004410:	6123      	str	r3, [r4, #16]
 8004412:	2300      	movs	r3, #0
 8004414:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004418:	e7aa      	b.n	8004370 <_printf_i+0x148>
 800441a:	6923      	ldr	r3, [r4, #16]
 800441c:	4632      	mov	r2, r6
 800441e:	4649      	mov	r1, r9
 8004420:	4640      	mov	r0, r8
 8004422:	47d0      	blx	sl
 8004424:	3001      	adds	r0, #1
 8004426:	d0ad      	beq.n	8004384 <_printf_i+0x15c>
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	079b      	lsls	r3, r3, #30
 800442c:	d413      	bmi.n	8004456 <_printf_i+0x22e>
 800442e:	68e0      	ldr	r0, [r4, #12]
 8004430:	9b03      	ldr	r3, [sp, #12]
 8004432:	4298      	cmp	r0, r3
 8004434:	bfb8      	it	lt
 8004436:	4618      	movlt	r0, r3
 8004438:	e7a6      	b.n	8004388 <_printf_i+0x160>
 800443a:	2301      	movs	r3, #1
 800443c:	4632      	mov	r2, r6
 800443e:	4649      	mov	r1, r9
 8004440:	4640      	mov	r0, r8
 8004442:	47d0      	blx	sl
 8004444:	3001      	adds	r0, #1
 8004446:	d09d      	beq.n	8004384 <_printf_i+0x15c>
 8004448:	3501      	adds	r5, #1
 800444a:	68e3      	ldr	r3, [r4, #12]
 800444c:	9903      	ldr	r1, [sp, #12]
 800444e:	1a5b      	subs	r3, r3, r1
 8004450:	42ab      	cmp	r3, r5
 8004452:	dcf2      	bgt.n	800443a <_printf_i+0x212>
 8004454:	e7eb      	b.n	800442e <_printf_i+0x206>
 8004456:	2500      	movs	r5, #0
 8004458:	f104 0619 	add.w	r6, r4, #25
 800445c:	e7f5      	b.n	800444a <_printf_i+0x222>
 800445e:	bf00      	nop
 8004460:	080046a5 	.word	0x080046a5
 8004464:	080046b6 	.word	0x080046b6

08004468 <__malloc_lock>:
 8004468:	4801      	ldr	r0, [pc, #4]	@ (8004470 <__malloc_lock+0x8>)
 800446a:	f7ff bc73 	b.w	8003d54 <__retarget_lock_acquire_recursive>
 800446e:	bf00      	nop
 8004470:	24000288 	.word	0x24000288

08004474 <__malloc_unlock>:
 8004474:	4801      	ldr	r0, [pc, #4]	@ (800447c <__malloc_unlock+0x8>)
 8004476:	f7ff bc6e 	b.w	8003d56 <__retarget_lock_release_recursive>
 800447a:	bf00      	nop
 800447c:	24000288 	.word	0x24000288

08004480 <_realloc_r>:
 8004480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004484:	4680      	mov	r8, r0
 8004486:	4615      	mov	r5, r2
 8004488:	460c      	mov	r4, r1
 800448a:	b921      	cbnz	r1, 8004496 <_realloc_r+0x16>
 800448c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004490:	4611      	mov	r1, r2
 8004492:	f7ff bddb 	b.w	800404c <_malloc_r>
 8004496:	b92a      	cbnz	r2, 80044a4 <_realloc_r+0x24>
 8004498:	f000 f858 	bl	800454c <_free_r>
 800449c:	2400      	movs	r4, #0
 800449e:	4620      	mov	r0, r4
 80044a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044a4:	f000 f89c 	bl	80045e0 <_malloc_usable_size_r>
 80044a8:	4285      	cmp	r5, r0
 80044aa:	4606      	mov	r6, r0
 80044ac:	d802      	bhi.n	80044b4 <_realloc_r+0x34>
 80044ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80044b2:	d8f4      	bhi.n	800449e <_realloc_r+0x1e>
 80044b4:	4629      	mov	r1, r5
 80044b6:	4640      	mov	r0, r8
 80044b8:	f7ff fdc8 	bl	800404c <_malloc_r>
 80044bc:	4607      	mov	r7, r0
 80044be:	2800      	cmp	r0, #0
 80044c0:	d0ec      	beq.n	800449c <_realloc_r+0x1c>
 80044c2:	42b5      	cmp	r5, r6
 80044c4:	462a      	mov	r2, r5
 80044c6:	4621      	mov	r1, r4
 80044c8:	bf28      	it	cs
 80044ca:	4632      	movcs	r2, r6
 80044cc:	f000 f830 	bl	8004530 <memcpy>
 80044d0:	4621      	mov	r1, r4
 80044d2:	4640      	mov	r0, r8
 80044d4:	f000 f83a 	bl	800454c <_free_r>
 80044d8:	463c      	mov	r4, r7
 80044da:	e7e0      	b.n	800449e <_realloc_r+0x1e>

080044dc <memmove>:
 80044dc:	4288      	cmp	r0, r1
 80044de:	b510      	push	{r4, lr}
 80044e0:	eb01 0402 	add.w	r4, r1, r2
 80044e4:	d902      	bls.n	80044ec <memmove+0x10>
 80044e6:	4284      	cmp	r4, r0
 80044e8:	4623      	mov	r3, r4
 80044ea:	d807      	bhi.n	80044fc <memmove+0x20>
 80044ec:	1e43      	subs	r3, r0, #1
 80044ee:	42a1      	cmp	r1, r4
 80044f0:	d008      	beq.n	8004504 <memmove+0x28>
 80044f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044fa:	e7f8      	b.n	80044ee <memmove+0x12>
 80044fc:	4402      	add	r2, r0
 80044fe:	4601      	mov	r1, r0
 8004500:	428a      	cmp	r2, r1
 8004502:	d100      	bne.n	8004506 <memmove+0x2a>
 8004504:	bd10      	pop	{r4, pc}
 8004506:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800450a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800450e:	e7f7      	b.n	8004500 <memmove+0x24>

08004510 <_sbrk_r>:
 8004510:	b538      	push	{r3, r4, r5, lr}
 8004512:	4d06      	ldr	r5, [pc, #24]	@ (800452c <_sbrk_r+0x1c>)
 8004514:	2300      	movs	r3, #0
 8004516:	4604      	mov	r4, r0
 8004518:	4608      	mov	r0, r1
 800451a:	602b      	str	r3, [r5, #0]
 800451c:	f7fc fb7c 	bl	8000c18 <_sbrk>
 8004520:	1c43      	adds	r3, r0, #1
 8004522:	d102      	bne.n	800452a <_sbrk_r+0x1a>
 8004524:	682b      	ldr	r3, [r5, #0]
 8004526:	b103      	cbz	r3, 800452a <_sbrk_r+0x1a>
 8004528:	6023      	str	r3, [r4, #0]
 800452a:	bd38      	pop	{r3, r4, r5, pc}
 800452c:	24000294 	.word	0x24000294

08004530 <memcpy>:
 8004530:	440a      	add	r2, r1
 8004532:	4291      	cmp	r1, r2
 8004534:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004538:	d100      	bne.n	800453c <memcpy+0xc>
 800453a:	4770      	bx	lr
 800453c:	b510      	push	{r4, lr}
 800453e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004542:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004546:	4291      	cmp	r1, r2
 8004548:	d1f9      	bne.n	800453e <memcpy+0xe>
 800454a:	bd10      	pop	{r4, pc}

0800454c <_free_r>:
 800454c:	b538      	push	{r3, r4, r5, lr}
 800454e:	4605      	mov	r5, r0
 8004550:	2900      	cmp	r1, #0
 8004552:	d041      	beq.n	80045d8 <_free_r+0x8c>
 8004554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004558:	1f0c      	subs	r4, r1, #4
 800455a:	2b00      	cmp	r3, #0
 800455c:	bfb8      	it	lt
 800455e:	18e4      	addlt	r4, r4, r3
 8004560:	f7ff ff82 	bl	8004468 <__malloc_lock>
 8004564:	4a1d      	ldr	r2, [pc, #116]	@ (80045dc <_free_r+0x90>)
 8004566:	6813      	ldr	r3, [r2, #0]
 8004568:	b933      	cbnz	r3, 8004578 <_free_r+0x2c>
 800456a:	6063      	str	r3, [r4, #4]
 800456c:	6014      	str	r4, [r2, #0]
 800456e:	4628      	mov	r0, r5
 8004570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004574:	f7ff bf7e 	b.w	8004474 <__malloc_unlock>
 8004578:	42a3      	cmp	r3, r4
 800457a:	d908      	bls.n	800458e <_free_r+0x42>
 800457c:	6820      	ldr	r0, [r4, #0]
 800457e:	1821      	adds	r1, r4, r0
 8004580:	428b      	cmp	r3, r1
 8004582:	bf01      	itttt	eq
 8004584:	6819      	ldreq	r1, [r3, #0]
 8004586:	685b      	ldreq	r3, [r3, #4]
 8004588:	1809      	addeq	r1, r1, r0
 800458a:	6021      	streq	r1, [r4, #0]
 800458c:	e7ed      	b.n	800456a <_free_r+0x1e>
 800458e:	461a      	mov	r2, r3
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	b10b      	cbz	r3, 8004598 <_free_r+0x4c>
 8004594:	42a3      	cmp	r3, r4
 8004596:	d9fa      	bls.n	800458e <_free_r+0x42>
 8004598:	6811      	ldr	r1, [r2, #0]
 800459a:	1850      	adds	r0, r2, r1
 800459c:	42a0      	cmp	r0, r4
 800459e:	d10b      	bne.n	80045b8 <_free_r+0x6c>
 80045a0:	6820      	ldr	r0, [r4, #0]
 80045a2:	4401      	add	r1, r0
 80045a4:	1850      	adds	r0, r2, r1
 80045a6:	4283      	cmp	r3, r0
 80045a8:	6011      	str	r1, [r2, #0]
 80045aa:	d1e0      	bne.n	800456e <_free_r+0x22>
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	6053      	str	r3, [r2, #4]
 80045b2:	4408      	add	r0, r1
 80045b4:	6010      	str	r0, [r2, #0]
 80045b6:	e7da      	b.n	800456e <_free_r+0x22>
 80045b8:	d902      	bls.n	80045c0 <_free_r+0x74>
 80045ba:	230c      	movs	r3, #12
 80045bc:	602b      	str	r3, [r5, #0]
 80045be:	e7d6      	b.n	800456e <_free_r+0x22>
 80045c0:	6820      	ldr	r0, [r4, #0]
 80045c2:	1821      	adds	r1, r4, r0
 80045c4:	428b      	cmp	r3, r1
 80045c6:	bf04      	itt	eq
 80045c8:	6819      	ldreq	r1, [r3, #0]
 80045ca:	685b      	ldreq	r3, [r3, #4]
 80045cc:	6063      	str	r3, [r4, #4]
 80045ce:	bf04      	itt	eq
 80045d0:	1809      	addeq	r1, r1, r0
 80045d2:	6021      	streq	r1, [r4, #0]
 80045d4:	6054      	str	r4, [r2, #4]
 80045d6:	e7ca      	b.n	800456e <_free_r+0x22>
 80045d8:	bd38      	pop	{r3, r4, r5, pc}
 80045da:	bf00      	nop
 80045dc:	24000290 	.word	0x24000290

080045e0 <_malloc_usable_size_r>:
 80045e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045e4:	1f18      	subs	r0, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	bfbc      	itt	lt
 80045ea:	580b      	ldrlt	r3, [r1, r0]
 80045ec:	18c0      	addlt	r0, r0, r3
 80045ee:	4770      	bx	lr

080045f0 <_init>:
 80045f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f2:	bf00      	nop
 80045f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045f6:	bc08      	pop	{r3}
 80045f8:	469e      	mov	lr, r3
 80045fa:	4770      	bx	lr

080045fc <_fini>:
 80045fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fe:	bf00      	nop
 8004600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004602:	bc08      	pop	{r3}
 8004604:	469e      	mov	lr, r3
 8004606:	4770      	bx	lr
