
lab_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000414  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006ac  080006ac  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080006ac  080006ac  000016ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080006b0  080006b0  000016b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000004  24000000  080006b4  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000004  080006b8  00002004  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000024  080006b8  00002024  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000249a  00000000  00000000  00002032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000525  00000000  00000000  000044cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000270  00000000  00000000  000049f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000001c2  00000000  00000000  00004c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00033db5  00000000  00000000  00004e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00002a3b  00000000  00000000  00038bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014e99c  00000000  00000000  0003b61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00189fb6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000870  00000000  00000000  00189ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005e  00000000  00000000  0018a86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000004 	.word	0x24000004
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08000694 	.word	0x08000694

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000008 	.word	0x24000008
 80002d4:	08000694 	.word	0x08000694

080002d8 <delay>:

// blue btn
#define GPIOC_MODER ((volatile uint32_t *) 0x58020800)
#define GPIOC_IDR ((volatile uint32_t *) 0x58020810)

void delay(uint32_t delay) {
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < delay; i++) {}
 80002e0:	2300      	movs	r3, #0
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	e002      	b.n	80002ec <delay+0x14>
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	3301      	adds	r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d8f8      	bhi.n	80002e6 <delay+0xe>
}
 80002f4:	bf00      	nop
 80002f6:	bf00      	nop
 80002f8:	3714      	adds	r7, #20
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
	...

08000304 <main>:

int main(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
    // vklopimo uro za GPIOD, GPIOC, GPIOI in GPIOJ
    *RCC_AHB4ENR = *RCC_AHB4ENR | (1 << 3) | (1 << 2) | (1 << 8) | (1 << 9);
 800030a:	4b4b      	ldr	r3, [pc, #300]	@ (8000438 <main+0x134>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a4a      	ldr	r2, [pc, #296]	@ (8000438 <main+0x134>)
 8000310:	f443 7343 	orr.w	r3, r3, #780	@ 0x30c
 8000314:	6013      	str	r3, [r2, #0]

    // init LED 1 (GPIOD pin 3)
    *GPIOD_MODER = *GPIOD_MODER & ~(3 << (2 * 3));
 8000316:	4b49      	ldr	r3, [pc, #292]	@ (800043c <main+0x138>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a48      	ldr	r2, [pc, #288]	@ (800043c <main+0x138>)
 800031c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000320:	6013      	str	r3, [r2, #0]
    *GPIOD_MODER = *GPIOD_MODER | (1 << (2 * 3));
 8000322:	4b46      	ldr	r3, [pc, #280]	@ (800043c <main+0x138>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a45      	ldr	r2, [pc, #276]	@ (800043c <main+0x138>)
 8000328:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800032c:	6013      	str	r3, [r2, #0]

    // init LED 2 (GPIOJ pin 2)
    *GPIOJ_MODER = *GPIOJ_MODER & ~(3 << (2 * 2));
 800032e:	4b44      	ldr	r3, [pc, #272]	@ (8000440 <main+0x13c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a43      	ldr	r2, [pc, #268]	@ (8000440 <main+0x13c>)
 8000334:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000338:	6013      	str	r3, [r2, #0]
    *GPIOJ_MODER = *GPIOJ_MODER | (1 << (2 * 2));
 800033a:	4b41      	ldr	r3, [pc, #260]	@ (8000440 <main+0x13c>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a40      	ldr	r2, [pc, #256]	@ (8000440 <main+0x13c>)
 8000340:	f043 0310 	orr.w	r3, r3, #16
 8000344:	6013      	str	r3, [r2, #0]

    // init LED 3 (GPIOI pin 13)
    *GPIOI_MODER = *GPIOI_MODER & ~(3 << (2 * 13));
 8000346:	4b3f      	ldr	r3, [pc, #252]	@ (8000444 <main+0x140>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a3e      	ldr	r2, [pc, #248]	@ (8000444 <main+0x140>)
 800034c:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000350:	6013      	str	r3, [r2, #0]
    *GPIOI_MODER = *GPIOI_MODER | (1 << (2 * 13));
 8000352:	4b3c      	ldr	r3, [pc, #240]	@ (8000444 <main+0x140>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4a3b      	ldr	r2, [pc, #236]	@ (8000444 <main+0x140>)
 8000358:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800035c:	6013      	str	r3, [r2, #0]

    // init gumb
    *GPIOC_MODER = *GPIOC_MODER & ~(3 << (2 * 13));
 800035e:	4b3a      	ldr	r3, [pc, #232]	@ (8000448 <main+0x144>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a39      	ldr	r2, [pc, #228]	@ (8000448 <main+0x144>)
 8000364:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000368:	6013      	str	r3, [r2, #0]

    while(1) {
        uint32_t stanje_gumba = *GPIOC_IDR & (1 << 13);
 800036a:	4b38      	ldr	r3, [pc, #224]	@ (800044c <main+0x148>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000372:	607b      	str	r3, [r7, #4]

        if (stanje_gumba) {
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d04b      	beq.n	8000412 <main+0x10e>
            // pri≈ægemo LED 1, ugasnemo LED 2 in 3
            *GPIOD_ODR = *GPIOD_ODR | (1 << 3);    // LED 1 ON
 800037a:	4b35      	ldr	r3, [pc, #212]	@ (8000450 <main+0x14c>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a34      	ldr	r2, [pc, #208]	@ (8000450 <main+0x14c>)
 8000380:	f043 0308 	orr.w	r3, r3, #8
 8000384:	6013      	str	r3, [r2, #0]

            delay(1000000);
 8000386:	4833      	ldr	r0, [pc, #204]	@ (8000454 <main+0x150>)
 8000388:	f7ff ffa6 	bl	80002d8 <delay>
            *GPIOD_ODR = *GPIOD_ODR & ~(1 << 3);   // LED 1 OFF
 800038c:	4b30      	ldr	r3, [pc, #192]	@ (8000450 <main+0x14c>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a2f      	ldr	r2, [pc, #188]	@ (8000450 <main+0x14c>)
 8000392:	f023 0308 	bic.w	r3, r3, #8
 8000396:	6013      	str	r3, [r2, #0]
            *GPIOJ_ODR = *GPIOJ_ODR & ~(1 << 2);   // LED 2 ON
 8000398:	4b2f      	ldr	r3, [pc, #188]	@ (8000458 <main+0x154>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a2e      	ldr	r2, [pc, #184]	@ (8000458 <main+0x154>)
 800039e:	f023 0304 	bic.w	r3, r3, #4
 80003a2:	6013      	str	r3, [r2, #0]

            delay(1000000);
 80003a4:	482b      	ldr	r0, [pc, #172]	@ (8000454 <main+0x150>)
 80003a6:	f7ff ff97 	bl	80002d8 <delay>
            *GPIOJ_ODR = *GPIOJ_ODR | (1 << 2);    // LED 2 OFF
 80003aa:	4b2b      	ldr	r3, [pc, #172]	@ (8000458 <main+0x154>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a2a      	ldr	r2, [pc, #168]	@ (8000458 <main+0x154>)
 80003b0:	f043 0304 	orr.w	r3, r3, #4
 80003b4:	6013      	str	r3, [r2, #0]
            *GPIOI_ODR = *GPIOI_ODR & ~(1 << 13);  // LED 3 ON
 80003b6:	4b29      	ldr	r3, [pc, #164]	@ (800045c <main+0x158>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a28      	ldr	r2, [pc, #160]	@ (800045c <main+0x158>)
 80003bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80003c0:	6013      	str	r3, [r2, #0]

            delay(1000000);
 80003c2:	4824      	ldr	r0, [pc, #144]	@ (8000454 <main+0x150>)
 80003c4:	f7ff ff88 	bl	80002d8 <delay>
            *GPIOI_ODR = *GPIOI_ODR | (1 << 13);   // LED 3 OFF
 80003c8:	4b24      	ldr	r3, [pc, #144]	@ (800045c <main+0x158>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a23      	ldr	r2, [pc, #140]	@ (800045c <main+0x158>)
 80003ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003d2:	6013      	str	r3, [r2, #0]
            *GPIOJ_ODR = *GPIOJ_ODR & ~(1 << 2);   // LED 2 ON
 80003d4:	4b20      	ldr	r3, [pc, #128]	@ (8000458 <main+0x154>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a1f      	ldr	r2, [pc, #124]	@ (8000458 <main+0x154>)
 80003da:	f023 0304 	bic.w	r3, r3, #4
 80003de:	6013      	str	r3, [r2, #0]

            delay(1000000);
 80003e0:	481c      	ldr	r0, [pc, #112]	@ (8000454 <main+0x150>)
 80003e2:	f7ff ff79 	bl	80002d8 <delay>
            *GPIOJ_ODR = *GPIOJ_ODR | (1 << 2);    // LED 2 OFF
 80003e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000458 <main+0x154>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a1b      	ldr	r2, [pc, #108]	@ (8000458 <main+0x154>)
 80003ec:	f043 0304 	orr.w	r3, r3, #4
 80003f0:	6013      	str	r3, [r2, #0]
            *GPIOD_ODR = *GPIOD_ODR | (1 << 3);    // LED 1 ON
 80003f2:	4b17      	ldr	r3, [pc, #92]	@ (8000450 <main+0x14c>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a16      	ldr	r2, [pc, #88]	@ (8000450 <main+0x14c>)
 80003f8:	f043 0308 	orr.w	r3, r3, #8
 80003fc:	6013      	str	r3, [r2, #0]

            delay(1000000);
 80003fe:	4815      	ldr	r0, [pc, #84]	@ (8000454 <main+0x150>)
 8000400:	f7ff ff6a 	bl	80002d8 <delay>
            *GPIOD_ODR = *GPIOD_ODR & ~(1 << 3);   // LED 1 OFF
 8000404:	4b12      	ldr	r3, [pc, #72]	@ (8000450 <main+0x14c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a11      	ldr	r2, [pc, #68]	@ (8000450 <main+0x14c>)
 800040a:	f023 0308 	bic.w	r3, r3, #8
 800040e:	6013      	str	r3, [r2, #0]
 8000410:	e7ab      	b.n	800036a <main+0x66>
        } else {
            *GPIOD_ODR = *GPIOD_ODR & ~(1 << 3);   // LED 1 OFF
 8000412:	4b0f      	ldr	r3, [pc, #60]	@ (8000450 <main+0x14c>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a0e      	ldr	r2, [pc, #56]	@ (8000450 <main+0x14c>)
 8000418:	f023 0308 	bic.w	r3, r3, #8
 800041c:	6013      	str	r3, [r2, #0]
            *GPIOJ_ODR = *GPIOJ_ODR | (1 << 2);    // LED 2 OFF
 800041e:	4b0e      	ldr	r3, [pc, #56]	@ (8000458 <main+0x154>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a0d      	ldr	r2, [pc, #52]	@ (8000458 <main+0x154>)
 8000424:	f043 0304 	orr.w	r3, r3, #4
 8000428:	6013      	str	r3, [r2, #0]
            *GPIOI_ODR = *GPIOI_ODR | (1 << 13);   // LED 3 OFF
 800042a:	4b0c      	ldr	r3, [pc, #48]	@ (800045c <main+0x158>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a0b      	ldr	r2, [pc, #44]	@ (800045c <main+0x158>)
 8000430:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000434:	6013      	str	r3, [r2, #0]
    while(1) {
 8000436:	e798      	b.n	800036a <main+0x66>
 8000438:	580244e0 	.word	0x580244e0
 800043c:	58020c00 	.word	0x58020c00
 8000440:	58022400 	.word	0x58022400
 8000444:	58022000 	.word	0x58022000
 8000448:	58020800 	.word	0x58020800
 800044c:	58020810 	.word	0x58020810
 8000450:	58020c14 	.word	0x58020c14
 8000454:	000f4240 	.word	0x000f4240
 8000458:	58022414 	.word	0x58022414
 800045c:	58022014 	.word	0x58022014

08000460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000464:	bf00      	nop
 8000466:	e7fd      	b.n	8000464 <NMI_Handler+0x4>

08000468 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <HardFault_Handler+0x4>

08000470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000474:	bf00      	nop
 8000476:	e7fd      	b.n	8000474 <MemManage_Handler+0x4>

08000478 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800047c:	bf00      	nop
 800047e:	e7fd      	b.n	800047c <BusFault_Handler+0x4>

08000480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000484:	bf00      	nop
 8000486:	e7fd      	b.n	8000484 <UsageFault_Handler+0x4>

08000488 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr

08000496 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr

080004a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr

080004b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b6:	f000 f8b5 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80004c4:	4b37      	ldr	r3, [pc, #220]	@ (80005a4 <SystemInit+0xe4>)
 80004c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004ca:	4a36      	ldr	r2, [pc, #216]	@ (80005a4 <SystemInit+0xe4>)
 80004cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80004d4:	4b34      	ldr	r3, [pc, #208]	@ (80005a8 <SystemInit+0xe8>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f003 030f 	and.w	r3, r3, #15
 80004dc:	2b06      	cmp	r3, #6
 80004de:	d807      	bhi.n	80004f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80004e0:	4b31      	ldr	r3, [pc, #196]	@ (80005a8 <SystemInit+0xe8>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f023 030f 	bic.w	r3, r3, #15
 80004e8:	4a2f      	ldr	r2, [pc, #188]	@ (80005a8 <SystemInit+0xe8>)
 80004ea:	f043 0307 	orr.w	r3, r3, #7
 80004ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80004f0:	4b2e      	ldr	r3, [pc, #184]	@ (80005ac <SystemInit+0xec>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a2d      	ldr	r2, [pc, #180]	@ (80005ac <SystemInit+0xec>)
 80004f6:	f043 0301 	orr.w	r3, r3, #1
 80004fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004fc:	4b2b      	ldr	r3, [pc, #172]	@ (80005ac <SystemInit+0xec>)
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000502:	4b2a      	ldr	r3, [pc, #168]	@ (80005ac <SystemInit+0xec>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	4929      	ldr	r1, [pc, #164]	@ (80005ac <SystemInit+0xec>)
 8000508:	4b29      	ldr	r3, [pc, #164]	@ (80005b0 <SystemInit+0xf0>)
 800050a:	4013      	ands	r3, r2
 800050c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800050e:	4b26      	ldr	r3, [pc, #152]	@ (80005a8 <SystemInit+0xe8>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f003 0308 	and.w	r3, r3, #8
 8000516:	2b00      	cmp	r3, #0
 8000518:	d007      	beq.n	800052a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800051a:	4b23      	ldr	r3, [pc, #140]	@ (80005a8 <SystemInit+0xe8>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f023 030f 	bic.w	r3, r3, #15
 8000522:	4a21      	ldr	r2, [pc, #132]	@ (80005a8 <SystemInit+0xe8>)
 8000524:	f043 0307 	orr.w	r3, r3, #7
 8000528:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800052a:	4b20      	ldr	r3, [pc, #128]	@ (80005ac <SystemInit+0xec>)
 800052c:	2200      	movs	r2, #0
 800052e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000530:	4b1e      	ldr	r3, [pc, #120]	@ (80005ac <SystemInit+0xec>)
 8000532:	2200      	movs	r2, #0
 8000534:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000536:	4b1d      	ldr	r3, [pc, #116]	@ (80005ac <SystemInit+0xec>)
 8000538:	2200      	movs	r2, #0
 800053a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800053c:	4b1b      	ldr	r3, [pc, #108]	@ (80005ac <SystemInit+0xec>)
 800053e:	4a1d      	ldr	r2, [pc, #116]	@ (80005b4 <SystemInit+0xf4>)
 8000540:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000542:	4b1a      	ldr	r3, [pc, #104]	@ (80005ac <SystemInit+0xec>)
 8000544:	4a1c      	ldr	r2, [pc, #112]	@ (80005b8 <SystemInit+0xf8>)
 8000546:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000548:	4b18      	ldr	r3, [pc, #96]	@ (80005ac <SystemInit+0xec>)
 800054a:	4a1c      	ldr	r2, [pc, #112]	@ (80005bc <SystemInit+0xfc>)
 800054c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800054e:	4b17      	ldr	r3, [pc, #92]	@ (80005ac <SystemInit+0xec>)
 8000550:	2200      	movs	r2, #0
 8000552:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000554:	4b15      	ldr	r3, [pc, #84]	@ (80005ac <SystemInit+0xec>)
 8000556:	4a19      	ldr	r2, [pc, #100]	@ (80005bc <SystemInit+0xfc>)
 8000558:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800055a:	4b14      	ldr	r3, [pc, #80]	@ (80005ac <SystemInit+0xec>)
 800055c:	2200      	movs	r2, #0
 800055e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000560:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <SystemInit+0xec>)
 8000562:	4a16      	ldr	r2, [pc, #88]	@ (80005bc <SystemInit+0xfc>)
 8000564:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000566:	4b11      	ldr	r3, [pc, #68]	@ (80005ac <SystemInit+0xec>)
 8000568:	2200      	movs	r2, #0
 800056a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800056c:	4b0f      	ldr	r3, [pc, #60]	@ (80005ac <SystemInit+0xec>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a0e      	ldr	r2, [pc, #56]	@ (80005ac <SystemInit+0xec>)
 8000572:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000576:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000578:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <SystemInit+0xec>)
 800057a:	2200      	movs	r2, #0
 800057c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800057e:	4b10      	ldr	r3, [pc, #64]	@ (80005c0 <SystemInit+0x100>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	4b10      	ldr	r3, [pc, #64]	@ (80005c4 <SystemInit+0x104>)
 8000584:	4013      	ands	r3, r2
 8000586:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800058a:	d202      	bcs.n	8000592 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800058c:	4b0e      	ldr	r3, [pc, #56]	@ (80005c8 <SystemInit+0x108>)
 800058e:	2201      	movs	r2, #1
 8000590:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000592:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <SystemInit+0x10c>)
 8000594:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000598:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	e000ed00 	.word	0xe000ed00
 80005a8:	52002000 	.word	0x52002000
 80005ac:	58024400 	.word	0x58024400
 80005b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80005b4:	02020200 	.word	0x02020200
 80005b8:	01ff0000 	.word	0x01ff0000
 80005bc:	01010280 	.word	0x01010280
 80005c0:	5c001000 	.word	0x5c001000
 80005c4:	ffff0000 	.word	0xffff0000
 80005c8:	51008108 	.word	0x51008108
 80005cc:	52004000 	.word	0x52004000

080005d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80005d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000608 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80005d4:	f7ff ff74 	bl	80004c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d8:	480c      	ldr	r0, [pc, #48]	@ (800060c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005da:	490d      	ldr	r1, [pc, #52]	@ (8000610 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000614 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e0:	e002      	b.n	80005e8 <LoopCopyDataInit>

080005e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e6:	3304      	adds	r3, #4

080005e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ec:	d3f9      	bcc.n	80005e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000618 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005f0:	4c0a      	ldr	r4, [pc, #40]	@ (800061c <LoopFillZerobss+0x22>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f4:	e001      	b.n	80005fa <LoopFillZerobss>

080005f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f8:	3204      	adds	r2, #4

080005fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005fc:	d3fb      	bcc.n	80005f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005fe:	f000 f825 	bl	800064c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000602:	f7ff fe7f 	bl	8000304 <main>
  bx  lr
 8000606:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000608:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800060c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000610:	24000004 	.word	0x24000004
  ldr r2, =_sidata
 8000614:	080006b4 	.word	0x080006b4
  ldr r2, =_sbss
 8000618:	24000004 	.word	0x24000004
  ldr r4, =_ebss
 800061c:	24000024 	.word	0x24000024

08000620 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000620:	e7fe      	b.n	8000620 <ADC3_IRQHandler>
	...

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	@ (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	24000000 	.word	0x24000000
 8000648:	24000020 	.word	0x24000020

0800064c <__libc_init_array>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	4d0d      	ldr	r5, [pc, #52]	@ (8000684 <__libc_init_array+0x38>)
 8000650:	4c0d      	ldr	r4, [pc, #52]	@ (8000688 <__libc_init_array+0x3c>)
 8000652:	1b64      	subs	r4, r4, r5
 8000654:	10a4      	asrs	r4, r4, #2
 8000656:	2600      	movs	r6, #0
 8000658:	42a6      	cmp	r6, r4
 800065a:	d109      	bne.n	8000670 <__libc_init_array+0x24>
 800065c:	4d0b      	ldr	r5, [pc, #44]	@ (800068c <__libc_init_array+0x40>)
 800065e:	4c0c      	ldr	r4, [pc, #48]	@ (8000690 <__libc_init_array+0x44>)
 8000660:	f000 f818 	bl	8000694 <_init>
 8000664:	1b64      	subs	r4, r4, r5
 8000666:	10a4      	asrs	r4, r4, #2
 8000668:	2600      	movs	r6, #0
 800066a:	42a6      	cmp	r6, r4
 800066c:	d105      	bne.n	800067a <__libc_init_array+0x2e>
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f855 3b04 	ldr.w	r3, [r5], #4
 8000674:	4798      	blx	r3
 8000676:	3601      	adds	r6, #1
 8000678:	e7ee      	b.n	8000658 <__libc_init_array+0xc>
 800067a:	f855 3b04 	ldr.w	r3, [r5], #4
 800067e:	4798      	blx	r3
 8000680:	3601      	adds	r6, #1
 8000682:	e7f2      	b.n	800066a <__libc_init_array+0x1e>
 8000684:	080006ac 	.word	0x080006ac
 8000688:	080006ac 	.word	0x080006ac
 800068c:	080006ac 	.word	0x080006ac
 8000690:	080006b0 	.word	0x080006b0

08000694 <_init>:
 8000694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000696:	bf00      	nop
 8000698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800069a:	bc08      	pop	{r3}
 800069c:	469e      	mov	lr, r3
 800069e:	4770      	bx	lr

080006a0 <_fini>:
 80006a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a2:	bf00      	nop
 80006a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006a6:	bc08      	pop	{r3}
 80006a8:	469e      	mov	lr, r3
 80006aa:	4770      	bx	lr
