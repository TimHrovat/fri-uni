
lab_7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d68  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004000  08004000  00005000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004018  08004018  00005018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800401c  0800401c  0000501c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08004020  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000010  08004030  00006010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000030  08004030  00006030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000a400  00000000  00000000  0000603e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000015ab  00000000  00000000  0001043e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a58  00000000  00000000  000119f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000007f6  00000000  00000000  00012448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035bdf  00000000  00000000  00012c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000ccc1  00000000  00000000  0004881d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015c048  00000000  00000000  000554de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001b1526  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002b0c  00000000  00000000  001b156c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005e  00000000  00000000  001b4078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003fe8 	.word	0x08003fe8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003fe8 	.word	0x08003fe8

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	f5ad 3d24 	sub.w	sp, sp, #167936	@ 0x29000
 80002de:	b08a      	sub	sp, #40	@ 0x28
 80002e0:	af00      	add	r7, sp, #0
  MPU_Config();
 80002e2:	f000 fa9d 	bl	8000820 <MPU_Config>
  HAL_Init();
 80002e6:	f000 fbc9 	bl	8000a7c <HAL_Init>
  SystemClock_Config();
 80002ea:	f000 fa2f 	bl	800074c <SystemClock_Config>

  __HAL_RCC_DMA1_CLK_ENABLE();
 80002ee:	4b9e      	ldr	r3, [pc, #632]	@ (8000568 <main+0x290>)
 80002f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80002f4:	4a9c      	ldr	r2, [pc, #624]	@ (8000568 <main+0x290>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80002fe:	4b9a      	ldr	r3, [pc, #616]	@ (8000568 <main+0x290>)
 8000300:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000304:	f003 0301 	and.w	r3, r3, #1
 8000308:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800030c:	f842 3c28 	str.w	r3, [r2, #-40]
 8000310:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000314:	f853 3c28 	ldr.w	r3, [r3, #-40]

  uint32_t source_32kb[SIZE_32KB], dest_32kb[SIZE_32KB];
  uint32_t source_50kb[SIZE_50KB], dest_50kb[SIZE_50KB];

  for (int i = 0; i < SIZE_50KB; i++) {
 8000318:	2300      	movs	r3, #0
 800031a:	4a94      	ldr	r2, [pc, #592]	@ (800056c <main+0x294>)
 800031c:	443a      	add	r2, r7
 800031e:	6013      	str	r3, [r2, #0]
 8000320:	e013      	b.n	800034a <main+0x72>
      source_50kb[i] = i;
 8000322:	4b92      	ldr	r3, [pc, #584]	@ (800056c <main+0x294>)
 8000324:	443b      	add	r3, r7
 8000326:	6819      	ldr	r1, [r3, #0]
 8000328:	f24d 0328 	movw	r3, #53288	@ 0xd028
 800032c:	443b      	add	r3, r7
 800032e:	f6a3 0324 	subw	r3, r3, #2084	@ 0x824
 8000332:	4a8e      	ldr	r2, [pc, #568]	@ (800056c <main+0x294>)
 8000334:	443a      	add	r2, r7
 8000336:	6812      	ldr	r2, [r2, #0]
 8000338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (int i = 0; i < SIZE_50KB; i++) {
 800033c:	4b8b      	ldr	r3, [pc, #556]	@ (800056c <main+0x294>)
 800033e:	443b      	add	r3, r7
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	3301      	adds	r3, #1
 8000344:	4a89      	ldr	r2, [pc, #548]	@ (800056c <main+0x294>)
 8000346:	443a      	add	r2, r7
 8000348:	6013      	str	r3, [r2, #0]
 800034a:	4b88      	ldr	r3, [pc, #544]	@ (800056c <main+0x294>)
 800034c:	443b      	add	r3, r7
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f5b3 5f48 	cmp.w	r3, #12800	@ 0x3200
 8000354:	d3e5      	bcc.n	8000322 <main+0x4a>
  }

  for (int i = 0; i < SIZE_32KB; i++) {
 8000356:	2300      	movs	r3, #0
 8000358:	4a85      	ldr	r2, [pc, #532]	@ (8000570 <main+0x298>)
 800035a:	443a      	add	r2, r7
 800035c:	6013      	str	r3, [r2, #0]
 800035e:	e013      	b.n	8000388 <main+0xb0>
      source_32kb[i] = i;
 8000360:	4b83      	ldr	r3, [pc, #524]	@ (8000570 <main+0x298>)
 8000362:	443b      	add	r3, r7
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	4b83      	ldr	r3, [pc, #524]	@ (8000574 <main+0x29c>)
 8000368:	443b      	add	r3, r7
 800036a:	4619      	mov	r1, r3
 800036c:	4b80      	ldr	r3, [pc, #512]	@ (8000570 <main+0x298>)
 800036e:	443b      	add	r3, r7
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	440b      	add	r3, r1
 8000376:	f843 2c24 	str.w	r2, [r3, #-36]
  for (int i = 0; i < SIZE_32KB; i++) {
 800037a:	4b7d      	ldr	r3, [pc, #500]	@ (8000570 <main+0x298>)
 800037c:	443b      	add	r3, r7
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	3301      	adds	r3, #1
 8000382:	4a7b      	ldr	r2, [pc, #492]	@ (8000570 <main+0x298>)
 8000384:	443a      	add	r2, r7
 8000386:	6013      	str	r3, [r2, #0]
 8000388:	4b79      	ldr	r3, [pc, #484]	@ (8000570 <main+0x298>)
 800038a:	443b      	add	r3, r7
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000392:	d3e5      	bcc.n	8000360 <main+0x88>
  }

  uint32_t avg_32kb_loop = 0;
 8000394:	2300      	movs	r3, #0
 8000396:	4a78      	ldr	r2, [pc, #480]	@ (8000578 <main+0x2a0>)
 8000398:	443a      	add	r2, r7
 800039a:	6013      	str	r3, [r2, #0]
  uint32_t avg_50kb_loop = 0;
 800039c:	2300      	movs	r3, #0
 800039e:	4a77      	ldr	r2, [pc, #476]	@ (800057c <main+0x2a4>)
 80003a0:	443a      	add	r2, r7
 80003a2:	6013      	str	r3, [r2, #0]
  uint32_t avg_32kb_dma = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	4a76      	ldr	r2, [pc, #472]	@ (8000580 <main+0x2a8>)
 80003a8:	443a      	add	r2, r7
 80003aa:	6013      	str	r3, [r2, #0]
  uint32_t avg_50kb_dma = 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	4a75      	ldr	r2, [pc, #468]	@ (8000584 <main+0x2ac>)
 80003b0:	443a      	add	r2, r7
 80003b2:	6013      	str	r3, [r2, #0]
  uint32_t avg_32kb_dma_fifo = 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	4a74      	ldr	r2, [pc, #464]	@ (8000588 <main+0x2b0>)
 80003b8:	443a      	add	r2, r7
 80003ba:	6013      	str	r3, [r2, #0]
  uint32_t avg_50kb_dma_fifo = 0;
 80003bc:	2300      	movs	r3, #0
 80003be:	4a73      	ldr	r2, [pc, #460]	@ (800058c <main+0x2b4>)
 80003c0:	443a      	add	r2, r7
 80003c2:	6013      	str	r3, [r2, #0]


  for (int i = 0; i < NUM_MEASUREMENTS; i++) {
 80003c4:	2300      	movs	r3, #0
 80003c6:	4a72      	ldr	r2, [pc, #456]	@ (8000590 <main+0x2b8>)
 80003c8:	443a      	add	r2, r7
 80003ca:	6013      	str	r3, [r2, #0]
 80003cc:	e088      	b.n	80004e0 <main+0x208>
	  avg_32kb_loop += loop(source_32kb, dest_32kb, SIZE_32KB);
 80003ce:	4971      	ldr	r1, [pc, #452]	@ (8000594 <main+0x2bc>)
 80003d0:	4b71      	ldr	r3, [pc, #452]	@ (8000598 <main+0x2c0>)
 80003d2:	440b      	add	r3, r1
 80003d4:	19d9      	adds	r1, r3, r7
 80003d6:	4b71      	ldr	r3, [pc, #452]	@ (800059c <main+0x2c4>)
 80003d8:	f503 3324 	add.w	r3, r3, #167936	@ 0x29000
 80003dc:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80003e0:	443b      	add	r3, r7
 80003e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 f8e0 	bl	80005ac <loop>
 80003ec:	4602      	mov	r2, r0
 80003ee:	4b62      	ldr	r3, [pc, #392]	@ (8000578 <main+0x2a0>)
 80003f0:	443b      	add	r3, r7
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4413      	add	r3, r2
 80003f6:	4a60      	ldr	r2, [pc, #384]	@ (8000578 <main+0x2a0>)
 80003f8:	443a      	add	r2, r7
 80003fa:	6013      	str	r3, [r2, #0]
	  avg_50kb_loop += loop(source_50kb, dest_50kb, SIZE_50KB);
 80003fc:	4968      	ldr	r1, [pc, #416]	@ (80005a0 <main+0x2c8>)
 80003fe:	4b66      	ldr	r3, [pc, #408]	@ (8000598 <main+0x2c0>)
 8000400:	440b      	add	r3, r1
 8000402:	19d9      	adds	r1, r3, r7
 8000404:	4b67      	ldr	r3, [pc, #412]	@ (80005a4 <main+0x2cc>)
 8000406:	f503 3324 	add.w	r3, r3, #167936	@ 0x29000
 800040a:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800040e:	443b      	add	r3, r7
 8000410:	f44f 5248 	mov.w	r2, #12800	@ 0x3200
 8000414:	4618      	mov	r0, r3
 8000416:	f000 f8c9 	bl	80005ac <loop>
 800041a:	4602      	mov	r2, r0
 800041c:	4b57      	ldr	r3, [pc, #348]	@ (800057c <main+0x2a4>)
 800041e:	443b      	add	r3, r7
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4413      	add	r3, r2
 8000424:	4a55      	ldr	r2, [pc, #340]	@ (800057c <main+0x2a4>)
 8000426:	443a      	add	r2, r7
 8000428:	6013      	str	r3, [r2, #0]

	  avg_32kb_dma += dma(source_32kb, dest_32kb, SIZE_32KB, false);
 800042a:	495a      	ldr	r1, [pc, #360]	@ (8000594 <main+0x2bc>)
 800042c:	4b5a      	ldr	r3, [pc, #360]	@ (8000598 <main+0x2c0>)
 800042e:	440b      	add	r3, r1
 8000430:	19d9      	adds	r1, r3, r7
 8000432:	485a      	ldr	r0, [pc, #360]	@ (800059c <main+0x2c4>)
 8000434:	4b58      	ldr	r3, [pc, #352]	@ (8000598 <main+0x2c0>)
 8000436:	4403      	add	r3, r0
 8000438:	19d8      	adds	r0, r3, r7
 800043a:	2300      	movs	r3, #0
 800043c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000440:	f000 f8da 	bl	80005f8 <dma>
 8000444:	4602      	mov	r2, r0
 8000446:	4b4e      	ldr	r3, [pc, #312]	@ (8000580 <main+0x2a8>)
 8000448:	443b      	add	r3, r7
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4413      	add	r3, r2
 800044e:	4a4c      	ldr	r2, [pc, #304]	@ (8000580 <main+0x2a8>)
 8000450:	443a      	add	r2, r7
 8000452:	6013      	str	r3, [r2, #0]
	  avg_50kb_dma += dma(source_50kb, dest_50kb, SIZE_50KB, false);
 8000454:	4952      	ldr	r1, [pc, #328]	@ (80005a0 <main+0x2c8>)
 8000456:	4b50      	ldr	r3, [pc, #320]	@ (8000598 <main+0x2c0>)
 8000458:	440b      	add	r3, r1
 800045a:	19d9      	adds	r1, r3, r7
 800045c:	4851      	ldr	r0, [pc, #324]	@ (80005a4 <main+0x2cc>)
 800045e:	4b4e      	ldr	r3, [pc, #312]	@ (8000598 <main+0x2c0>)
 8000460:	4403      	add	r3, r0
 8000462:	19d8      	adds	r0, r3, r7
 8000464:	2300      	movs	r3, #0
 8000466:	f44f 5248 	mov.w	r2, #12800	@ 0x3200
 800046a:	f000 f8c5 	bl	80005f8 <dma>
 800046e:	4602      	mov	r2, r0
 8000470:	4b44      	ldr	r3, [pc, #272]	@ (8000584 <main+0x2ac>)
 8000472:	443b      	add	r3, r7
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4413      	add	r3, r2
 8000478:	4a42      	ldr	r2, [pc, #264]	@ (8000584 <main+0x2ac>)
 800047a:	443a      	add	r2, r7
 800047c:	6013      	str	r3, [r2, #0]

	  avg_32kb_dma_fifo += dma(source_32kb, dest_32kb, SIZE_32KB, true);
 800047e:	4945      	ldr	r1, [pc, #276]	@ (8000594 <main+0x2bc>)
 8000480:	4b45      	ldr	r3, [pc, #276]	@ (8000598 <main+0x2c0>)
 8000482:	440b      	add	r3, r1
 8000484:	19d9      	adds	r1, r3, r7
 8000486:	4845      	ldr	r0, [pc, #276]	@ (800059c <main+0x2c4>)
 8000488:	4b43      	ldr	r3, [pc, #268]	@ (8000598 <main+0x2c0>)
 800048a:	4403      	add	r3, r0
 800048c:	19d8      	adds	r0, r3, r7
 800048e:	2301      	movs	r3, #1
 8000490:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000494:	f000 f8b0 	bl	80005f8 <dma>
 8000498:	4602      	mov	r2, r0
 800049a:	4b3b      	ldr	r3, [pc, #236]	@ (8000588 <main+0x2b0>)
 800049c:	443b      	add	r3, r7
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4413      	add	r3, r2
 80004a2:	4a39      	ldr	r2, [pc, #228]	@ (8000588 <main+0x2b0>)
 80004a4:	443a      	add	r2, r7
 80004a6:	6013      	str	r3, [r2, #0]
	  avg_50kb_dma_fifo += dma(source_50kb, dest_50kb, SIZE_50KB, true);
 80004a8:	493d      	ldr	r1, [pc, #244]	@ (80005a0 <main+0x2c8>)
 80004aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000598 <main+0x2c0>)
 80004ac:	440b      	add	r3, r1
 80004ae:	19d9      	adds	r1, r3, r7
 80004b0:	483c      	ldr	r0, [pc, #240]	@ (80005a4 <main+0x2cc>)
 80004b2:	4b39      	ldr	r3, [pc, #228]	@ (8000598 <main+0x2c0>)
 80004b4:	4403      	add	r3, r0
 80004b6:	19d8      	adds	r0, r3, r7
 80004b8:	2301      	movs	r3, #1
 80004ba:	f44f 5248 	mov.w	r2, #12800	@ 0x3200
 80004be:	f000 f89b 	bl	80005f8 <dma>
 80004c2:	4602      	mov	r2, r0
 80004c4:	4b31      	ldr	r3, [pc, #196]	@ (800058c <main+0x2b4>)
 80004c6:	443b      	add	r3, r7
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4413      	add	r3, r2
 80004cc:	4a2f      	ldr	r2, [pc, #188]	@ (800058c <main+0x2b4>)
 80004ce:	443a      	add	r2, r7
 80004d0:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < NUM_MEASUREMENTS; i++) {
 80004d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000590 <main+0x2b8>)
 80004d4:	443b      	add	r3, r7
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3301      	adds	r3, #1
 80004da:	4a2d      	ldr	r2, [pc, #180]	@ (8000590 <main+0x2b8>)
 80004dc:	443a      	add	r2, r7
 80004de:	6013      	str	r3, [r2, #0]
 80004e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000590 <main+0x2b8>)
 80004e2:	443b      	add	r3, r7
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2b04      	cmp	r3, #4
 80004e8:	f67f af71 	bls.w	80003ce <main+0xf6>
  }

  avg_32kb_loop /= NUM_MEASUREMENTS;
 80004ec:	4b22      	ldr	r3, [pc, #136]	@ (8000578 <main+0x2a0>)
 80004ee:	443b      	add	r3, r7
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a2d      	ldr	r2, [pc, #180]	@ (80005a8 <main+0x2d0>)
 80004f4:	fba2 2303 	umull	r2, r3, r2, r3
 80004f8:	089b      	lsrs	r3, r3, #2
 80004fa:	4a1f      	ldr	r2, [pc, #124]	@ (8000578 <main+0x2a0>)
 80004fc:	443a      	add	r2, r7
 80004fe:	6013      	str	r3, [r2, #0]
  avg_50kb_loop /= NUM_MEASUREMENTS;
 8000500:	4b1e      	ldr	r3, [pc, #120]	@ (800057c <main+0x2a4>)
 8000502:	443b      	add	r3, r7
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a28      	ldr	r2, [pc, #160]	@ (80005a8 <main+0x2d0>)
 8000508:	fba2 2303 	umull	r2, r3, r2, r3
 800050c:	089b      	lsrs	r3, r3, #2
 800050e:	4a1b      	ldr	r2, [pc, #108]	@ (800057c <main+0x2a4>)
 8000510:	443a      	add	r2, r7
 8000512:	6013      	str	r3, [r2, #0]
  avg_32kb_dma /= NUM_MEASUREMENTS;
 8000514:	4b1a      	ldr	r3, [pc, #104]	@ (8000580 <main+0x2a8>)
 8000516:	443b      	add	r3, r7
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a23      	ldr	r2, [pc, #140]	@ (80005a8 <main+0x2d0>)
 800051c:	fba2 2303 	umull	r2, r3, r2, r3
 8000520:	089b      	lsrs	r3, r3, #2
 8000522:	4a17      	ldr	r2, [pc, #92]	@ (8000580 <main+0x2a8>)
 8000524:	443a      	add	r2, r7
 8000526:	6013      	str	r3, [r2, #0]
  avg_50kb_dma /= NUM_MEASUREMENTS;
 8000528:	4b16      	ldr	r3, [pc, #88]	@ (8000584 <main+0x2ac>)
 800052a:	443b      	add	r3, r7
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a1e      	ldr	r2, [pc, #120]	@ (80005a8 <main+0x2d0>)
 8000530:	fba2 2303 	umull	r2, r3, r2, r3
 8000534:	089b      	lsrs	r3, r3, #2
 8000536:	4a13      	ldr	r2, [pc, #76]	@ (8000584 <main+0x2ac>)
 8000538:	443a      	add	r2, r7
 800053a:	6013      	str	r3, [r2, #0]
  avg_32kb_dma_fifo /= NUM_MEASUREMENTS;
 800053c:	4b12      	ldr	r3, [pc, #72]	@ (8000588 <main+0x2b0>)
 800053e:	443b      	add	r3, r7
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a19      	ldr	r2, [pc, #100]	@ (80005a8 <main+0x2d0>)
 8000544:	fba2 2303 	umull	r2, r3, r2, r3
 8000548:	089b      	lsrs	r3, r3, #2
 800054a:	4a0f      	ldr	r2, [pc, #60]	@ (8000588 <main+0x2b0>)
 800054c:	443a      	add	r2, r7
 800054e:	6013      	str	r3, [r2, #0]
  avg_50kb_dma_fifo /= NUM_MEASUREMENTS;
 8000550:	4b0e      	ldr	r3, [pc, #56]	@ (800058c <main+0x2b4>)
 8000552:	443b      	add	r3, r7
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a14      	ldr	r2, [pc, #80]	@ (80005a8 <main+0x2d0>)
 8000558:	fba2 2303 	umull	r2, r3, r2, r3
 800055c:	089b      	lsrs	r3, r3, #2
 800055e:	4a0b      	ldr	r2, [pc, #44]	@ (800058c <main+0x2b4>)
 8000560:	443a      	add	r2, r7
 8000562:	6013      	str	r3, [r2, #0]

  while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <main+0x28c>
 8000568:	58024400 	.word	0x58024400
 800056c:	00029024 	.word	0x00029024
 8000570:	00029020 	.word	0x00029020
 8000574:	00021028 	.word	0x00021028
 8000578:	0002901c 	.word	0x0002901c
 800057c:	00029018 	.word	0x00029018
 8000580:	00029014 	.word	0x00029014
 8000584:	00029010 	.word	0x00029010
 8000588:	0002900c 	.word	0x0002900c
 800058c:	00029008 	.word	0x00029008
 8000590:	00029004 	.word	0x00029004
 8000594:	fffeffdc 	.word	0xfffeffdc
 8000598:	00029028 	.word	0x00029028
 800059c:	ffff7fdc 	.word	0xffff7fdc
 80005a0:	fffd6fdc 	.word	0xfffd6fdc
 80005a4:	fffe37dc 	.word	0xfffe37dc
 80005a8:	cccccccd 	.word	0xcccccccd

080005ac <loop>:
  {
  }
}

uint32_t loop(uint32_t* source, uint32_t* destination, uint32_t size) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
    start_timer();
 80005b8:	f000 f86e 	bl	8000698 <start_timer>
    for (int i = 0; i < size; i++) {
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	e00c      	b.n	80005dc <loop+0x30>
        destination[i] = source[i];
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	441a      	add	r2, r3
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	68b9      	ldr	r1, [r7, #8]
 80005d0:	440b      	add	r3, r1
 80005d2:	6812      	ldr	r2, [r2, #0]
 80005d4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	3301      	adds	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8ee      	bhi.n	80005c2 <loop+0x16>
    }
    stop_timer();
 80005e4:	f000 f88c 	bl	8000700 <stop_timer>
    return get_time();
 80005e8:	f000 f89e 	bl	8000728 <get_time>
 80005ec:	4603      	mov	r3, r0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <dma>:

uint32_t dma(uint32_t* source, uint32_t* destination, uint32_t size, bool use_fifo) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b0a2      	sub	sp, #136	@ 0x88
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
 8000604:	70fb      	strb	r3, [r7, #3]
    DMA_HandleTypeDef dma1_struct = {0};
 8000606:	f107 0310 	add.w	r3, r7, #16
 800060a:	2278      	movs	r2, #120	@ 0x78
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fcbe 	bl	8003f90 <memset>

    dma1_struct.Instance = DMA1_Stream0;
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <dma+0x9c>)
 8000616:	613b      	str	r3, [r7, #16]
    dma1_struct.Init.Request = DMA_REQUEST_MEM2MEM;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
    dma1_struct.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800061c:	2380      	movs	r3, #128	@ 0x80
 800061e:	61bb      	str	r3, [r7, #24]
    dma1_struct.Init.PeriphInc = DMA_PINC_ENABLE;
 8000620:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000624:	61fb      	str	r3, [r7, #28]
    dma1_struct.Init.MemInc = DMA_MINC_ENABLE;
 8000626:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800062a:	623b      	str	r3, [r7, #32]
    dma1_struct.Init.PeriphDataAlignment = DMA_MDATAALIGN_WORD;
 800062c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000630:	627b      	str	r3, [r7, #36]	@ 0x24
    dma1_struct.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000632:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000636:	62bb      	str	r3, [r7, #40]	@ 0x28
    dma1_struct.Init.Mode = DMA_NORMAL;
 8000638:	2300      	movs	r3, #0
 800063a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    dma1_struct.Init.Priority = DMA_PRIORITY_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	633b      	str	r3, [r7, #48]	@ 0x30
    dma1_struct.Init.FIFOMode = use_fifo ? DMA_FIFOMODE_ENABLE : DMA_FIFOMODE_DISABLE;
 8000640:	78fb      	ldrb	r3, [r7, #3]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <dma+0x52>
 8000646:	2304      	movs	r3, #4
 8000648:	e000      	b.n	800064c <dma+0x54>
 800064a:	2300      	movs	r3, #0
 800064c:	637b      	str	r3, [r7, #52]	@ 0x34
    dma1_struct.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800064e:	2300      	movs	r3, #0
 8000650:	63bb      	str	r3, [r7, #56]	@ 0x38

    HAL_DMA_Init(&dma1_struct);
 8000652:	f107 0310 	add.w	r3, r7, #16
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fc0a 	bl	8000e70 <HAL_DMA_Init>

    start_timer();
 800065c:	f000 f81c 	bl	8000698 <start_timer>
    HAL_DMA_Start(&dma1_struct, (uint32_t)source, (uint32_t)destination, size * 4);
 8000660:	68f9      	ldr	r1, [r7, #12]
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	f107 0010 	add.w	r0, r7, #16
 800066c:	f000 ff5c 	bl	8001528 <HAL_DMA_Start>
    HAL_DMA_PollForTransfer(&dma1_struct, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fb92 	bl	8001da4 <HAL_DMA_PollForTransfer>
    stop_timer();
 8000680:	f000 f83e 	bl	8000700 <stop_timer>

    return get_time();
 8000684:	f000 f850 	bl	8000728 <get_time>
 8000688:	4603      	mov	r3, r0
}
 800068a:	4618      	mov	r0, r3
 800068c:	3788      	adds	r7, #136	@ 0x88
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40020010 	.word	0x40020010

08000698 <start_timer>:

void start_timer() {
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	@ 0x50
 800069c:	af00      	add	r7, sp, #0
  __HAL_RCC_TIM2_CLK_ENABLE();
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <start_timer+0x60>)
 80006a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80006a4:	4a14      	ldr	r2, [pc, #80]	@ (80006f8 <start_timer+0x60>)
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80006ae:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <start_timer+0x60>)
 80006b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80006b4:	f003 0301 	and.w	r3, r3, #1
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]
  TIM_HandleTypeDef timer = {0};
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	224c      	movs	r2, #76	@ 0x4c
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fc64 	bl	8003f90 <memset>
  timer.Instance = TIM2;
 80006c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006cc:	607b      	str	r3, [r7, #4]
  timer.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  timer.Init.Period = 100000000;
 80006d2:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <start_timer+0x64>)
 80006d4:	613b      	str	r3, [r7, #16]
  timer.Init.Prescaler = 64 -1;
 80006d6:	233f      	movs	r3, #63	@ 0x3f
 80006d8:	60bb      	str	r3, [r7, #8]
  HAL_TIM_Base_Init(&timer);
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 fab7 	bl	8003c50 <HAL_TIM_Base_Init>

  HAL_TIM_Base_Start(&timer);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 fb15 	bl	8003d14 <HAL_TIM_Base_Start>
  __HAL_TIM_SetCounter(&timer, 0);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80006f0:	bf00      	nop
 80006f2:	3750      	adds	r7, #80	@ 0x50
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	58024400 	.word	0x58024400
 80006fc:	05f5e100 	.word	0x05f5e100

08000700 <stop_timer>:

void stop_timer() {
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	@ 0x50
 8000704:	af00      	add	r7, sp, #0
  TIM_HandleTypeDef timer = {0};
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	224c      	movs	r2, #76	@ 0x4c
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f003 fc3f 	bl	8003f90 <memset>
  timer.Instance = TIM2;
 8000712:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000716:	607b      	str	r3, [r7, #4]
  HAL_TIM_Base_Stop(&timer);
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	4618      	mov	r0, r3
 800071c:	f003 fb6a 	bl	8003df4 <HAL_TIM_Base_Stop>
}
 8000720:	bf00      	nop
 8000722:	3750      	adds	r7, #80	@ 0x50
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <get_time>:

uint32_t get_time() {
 8000728:	b580      	push	{r7, lr}
 800072a:	b094      	sub	sp, #80	@ 0x50
 800072c:	af00      	add	r7, sp, #0
  TIM_HandleTypeDef timer = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	224c      	movs	r2, #76	@ 0x4c
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f003 fc2b 	bl	8003f90 <memset>
  timer.Instance = TIM2;
 800073a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800073e:	607b      	str	r3, [r7, #4]
  return __HAL_TIM_GetCounter(&timer);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8000744:	4618      	mov	r0, r3
 8000746:	3750      	adds	r7, #80	@ 0x50
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b09c      	sub	sp, #112	@ 0x70
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000756:	224c      	movs	r2, #76	@ 0x4c
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f003 fc18 	bl	8003f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2220      	movs	r2, #32
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f003 fc12 	bl	8003f90 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800076c:	2002      	movs	r0, #2
 800076e:	f002 faab 	bl	8002cc8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b28      	ldr	r3, [pc, #160]	@ (8000818 <SystemClock_Config+0xcc>)
 8000778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800077a:	4a27      	ldr	r2, [pc, #156]	@ (8000818 <SystemClock_Config+0xcc>)
 800077c:	f023 0301 	bic.w	r3, r3, #1
 8000780:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000782:	4b25      	ldr	r3, [pc, #148]	@ (8000818 <SystemClock_Config+0xcc>)
 8000784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	4b23      	ldr	r3, [pc, #140]	@ (800081c <SystemClock_Config+0xd0>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000794:	4a21      	ldr	r2, [pc, #132]	@ (800081c <SystemClock_Config+0xd0>)
 8000796:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b1f      	ldr	r3, [pc, #124]	@ (800081c <SystemClock_Config+0xd0>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007a8:	bf00      	nop
 80007aa:	4b1c      	ldr	r3, [pc, #112]	@ (800081c <SystemClock_Config+0xd0>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007b6:	d1f8      	bne.n	80007aa <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b8:	2302      	movs	r3, #2
 80007ba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007bc:	2301      	movs	r3, #1
 80007be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c0:	2340      	movs	r3, #64	@ 0x40
 80007c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 fab5 	bl	8002d3c <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007d8:	f000 f84e 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	233f      	movs	r3, #63	@ 0x3f
 80007de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2101      	movs	r1, #1
 8000800:	4618      	mov	r0, r3
 8000802:	f002 fef5 	bl	80035f0 <HAL_RCC_ClockConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800080c:	f000 f834 	bl	8000878 <Error_Handler>
  }
}
 8000810:	bf00      	nop
 8000812:	3770      	adds	r7, #112	@ 0x70
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58000400 	.word	0x58000400
 800081c:	58024800 	.word	0x58024800

08000820 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000826:	463b      	mov	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000832:	f000 faa5 	bl	8000d80 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000836:	2301      	movs	r3, #1
 8000838:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800083a:	2300      	movs	r3, #0
 800083c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000842:	231f      	movs	r3, #31
 8000844:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000846:	2387      	movs	r3, #135	@ 0x87
 8000848:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800084a:	2300      	movs	r3, #0
 800084c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800084e:	2300      	movs	r3, #0
 8000850:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000852:	2301      	movs	r3, #1
 8000854:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000856:	2301      	movs	r3, #1
 8000858:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000862:	463b      	mov	r3, r7
 8000864:	4618      	mov	r0, r3
 8000866:	f000 fac3 	bl	8000df0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800086a:	2004      	movs	r0, #4
 800086c:	f000 faa0 	bl	8000db0 <HAL_MPU_Enable>

}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <Error_Handler+0x8>

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <HAL_MspInit+0x30>)
 800088c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000890:	4a08      	ldr	r2, [pc, #32]	@ (80008b4 <HAL_MspInit+0x30>)
 8000892:	f043 0302 	orr.w	r3, r3, #2
 8000896:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800089a:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <HAL_MspInit+0x30>)
 800089c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008a0:	f003 0302 	and.w	r3, r3, #2
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	58024400 	.word	0x58024400

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <NMI_Handler+0x4>

080008c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <MemManage_Handler+0x4>

080008d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <UsageFault_Handler+0x4>

080008e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090e:	f000 f927 	bl	8000b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800091c:	4b37      	ldr	r3, [pc, #220]	@ (80009fc <SystemInit+0xe4>)
 800091e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000922:	4a36      	ldr	r2, [pc, #216]	@ (80009fc <SystemInit+0xe4>)
 8000924:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000928:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800092c:	4b34      	ldr	r3, [pc, #208]	@ (8000a00 <SystemInit+0xe8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f003 030f 	and.w	r3, r3, #15
 8000934:	2b06      	cmp	r3, #6
 8000936:	d807      	bhi.n	8000948 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000938:	4b31      	ldr	r3, [pc, #196]	@ (8000a00 <SystemInit+0xe8>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f023 030f 	bic.w	r3, r3, #15
 8000940:	4a2f      	ldr	r2, [pc, #188]	@ (8000a00 <SystemInit+0xe8>)
 8000942:	f043 0307 	orr.w	r3, r3, #7
 8000946:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000948:	4b2e      	ldr	r3, [pc, #184]	@ (8000a04 <SystemInit+0xec>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a2d      	ldr	r2, [pc, #180]	@ (8000a04 <SystemInit+0xec>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000954:	4b2b      	ldr	r3, [pc, #172]	@ (8000a04 <SystemInit+0xec>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800095a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a04 <SystemInit+0xec>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	4929      	ldr	r1, [pc, #164]	@ (8000a04 <SystemInit+0xec>)
 8000960:	4b29      	ldr	r3, [pc, #164]	@ (8000a08 <SystemInit+0xf0>)
 8000962:	4013      	ands	r3, r2
 8000964:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000966:	4b26      	ldr	r3, [pc, #152]	@ (8000a00 <SystemInit+0xe8>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f003 0308 	and.w	r3, r3, #8
 800096e:	2b00      	cmp	r3, #0
 8000970:	d007      	beq.n	8000982 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000972:	4b23      	ldr	r3, [pc, #140]	@ (8000a00 <SystemInit+0xe8>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f023 030f 	bic.w	r3, r3, #15
 800097a:	4a21      	ldr	r2, [pc, #132]	@ (8000a00 <SystemInit+0xe8>)
 800097c:	f043 0307 	orr.w	r3, r3, #7
 8000980:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000982:	4b20      	ldr	r3, [pc, #128]	@ (8000a04 <SystemInit+0xec>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000988:	4b1e      	ldr	r3, [pc, #120]	@ (8000a04 <SystemInit+0xec>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800098e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a04 <SystemInit+0xec>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000994:	4b1b      	ldr	r3, [pc, #108]	@ (8000a04 <SystemInit+0xec>)
 8000996:	4a1d      	ldr	r2, [pc, #116]	@ (8000a0c <SystemInit+0xf4>)
 8000998:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800099a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a04 <SystemInit+0xec>)
 800099c:	4a1c      	ldr	r2, [pc, #112]	@ (8000a10 <SystemInit+0xf8>)
 800099e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009a0:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <SystemInit+0xec>)
 80009a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a14 <SystemInit+0xfc>)
 80009a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009a6:	4b17      	ldr	r3, [pc, #92]	@ (8000a04 <SystemInit+0xec>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009ac:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <SystemInit+0xec>)
 80009ae:	4a19      	ldr	r2, [pc, #100]	@ (8000a14 <SystemInit+0xfc>)
 80009b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009b2:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <SystemInit+0xec>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009b8:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <SystemInit+0xec>)
 80009ba:	4a16      	ldr	r2, [pc, #88]	@ (8000a14 <SystemInit+0xfc>)
 80009bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009be:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <SystemInit+0xec>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a04 <SystemInit+0xec>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000a04 <SystemInit+0xec>)
 80009ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80009ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <SystemInit+0xec>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80009d6:	4b10      	ldr	r3, [pc, #64]	@ (8000a18 <SystemInit+0x100>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <SystemInit+0x104>)
 80009dc:	4013      	ands	r3, r2
 80009de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80009e2:	d202      	bcs.n	80009ea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <SystemInit+0x108>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <SystemInit+0x10c>)
 80009ec:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80009f0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000ed00 	.word	0xe000ed00
 8000a00:	52002000 	.word	0x52002000
 8000a04:	58024400 	.word	0x58024400
 8000a08:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a0c:	02020200 	.word	0x02020200
 8000a10:	01ff0000 	.word	0x01ff0000
 8000a14:	01010280 	.word	0x01010280
 8000a18:	5c001000 	.word	0x5c001000
 8000a1c:	ffff0000 	.word	0xffff0000
 8000a20:	51008108 	.word	0x51008108
 8000a24:	52004000 	.word	0x52004000

08000a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a2c:	f7ff ff74 	bl	8000918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a30:	480c      	ldr	r0, [pc, #48]	@ (8000a64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a32:	490d      	ldr	r1, [pc, #52]	@ (8000a68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a34:	4a0d      	ldr	r2, [pc, #52]	@ (8000a6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a0a      	ldr	r2, [pc, #40]	@ (8000a70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a48:	4c0a      	ldr	r4, [pc, #40]	@ (8000a74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a56:	f003 faa3 	bl	8003fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5a:	f7ff fc3d 	bl	80002d8 <main>
  bx  lr
 8000a5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a60:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000a64:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a68:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000a6c:	08004020 	.word	0x08004020
  ldr r2, =_sbss
 8000a70:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000a74:	24000030 	.word	0x24000030

08000a78 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC3_IRQHandler>
	...

08000a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a82:	2003      	movs	r0, #3
 8000a84:	f000 f94a 	bl	8000d1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a88:	f002 ff68 	bl	800395c <HAL_RCC_GetSysClockFreq>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <HAL_Init+0x68>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	0a1b      	lsrs	r3, r3, #8
 8000a94:	f003 030f 	and.w	r3, r3, #15
 8000a98:	4913      	ldr	r1, [pc, #76]	@ (8000ae8 <HAL_Init+0x6c>)
 8000a9a:	5ccb      	ldrb	r3, [r1, r3]
 8000a9c:	f003 031f 	and.w	r3, r3, #31
 8000aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <HAL_Init+0x68>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	f003 030f 	and.w	r3, r3, #15
 8000aae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae8 <HAL_Init+0x6c>)
 8000ab0:	5cd3      	ldrb	r3, [r2, r3]
 8000ab2:	f003 031f 	and.w	r3, r3, #31
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8000abc:	4a0b      	ldr	r2, [pc, #44]	@ (8000aec <HAL_Init+0x70>)
 8000abe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ac0:	4a0b      	ldr	r2, [pc, #44]	@ (8000af0 <HAL_Init+0x74>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f000 f814 	bl	8000af4 <HAL_InitTick>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e002      	b.n	8000adc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad6:	f7ff fed5 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	58024400 	.word	0x58024400
 8000ae8:	08004000 	.word	0x08004000
 8000aec:	24000004 	.word	0x24000004
 8000af0:	24000000 	.word	0x24000000

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000afc:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <HAL_InitTick+0x60>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d101      	bne.n	8000b08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e021      	b.n	8000b4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <HAL_InitTick+0x64>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <HAL_InitTick+0x60>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4619      	mov	r1, r3
 8000b12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f921 	bl	8000d66 <HAL_SYSTICK_Config>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00e      	b.n	8000b4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	d80a      	bhi.n	8000b4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b34:	2200      	movs	r2, #0
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b3c:	f000 f8f9 	bl	8000d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b40:	4a06      	ldr	r2, [pc, #24]	@ (8000b5c <HAL_InitTick+0x68>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	e000      	b.n	8000b4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2400000c 	.word	0x2400000c
 8000b58:	24000000 	.word	0x24000000
 8000b5c:	24000008 	.word	0x24000008

08000b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_IncTick+0x20>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <HAL_IncTick+0x24>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a04      	ldr	r2, [pc, #16]	@ (8000b84 <HAL_IncTick+0x24>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	2400000c 	.word	0x2400000c
 8000b84:	2400002c 	.word	0x2400002c

08000b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	@ (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	2400002c 	.word	0x2400002c

08000ba0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ba4:	4b03      	ldr	r3, [pc, #12]	@ (8000bb4 <HAL_GetREVID+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	0c1b      	lsrs	r3, r3, #16
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	5c001000 	.word	0x5c001000

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	4313      	orrs	r3, r2
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00
 8000bfc:	05fa0000 	.word	0x05fa0000

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	@ (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	@ (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	@ 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	@ 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ce8:	d301      	bcc.n	8000cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00f      	b.n	8000d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <SysTick_Config+0x40>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf6:	210f      	movs	r1, #15
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cfc:	f7ff ff8e 	bl	8000c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d00:	4b05      	ldr	r3, [pc, #20]	@ (8000d18 <SysTick_Config+0x40>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d06:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <SysTick_Config+0x40>)
 8000d08:	2207      	movs	r2, #7
 8000d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	e000e010 	.word	0xe000e010

08000d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ff47 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b086      	sub	sp, #24
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
 8000d3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d40:	f7ff ff5e 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	f7ff ff90 	bl	8000c70 <NVIC_EncodePriority>
 8000d50:	4602      	mov	r2, r0
 8000d52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff5f 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffb2 	bl	8000cd8 <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000d84:	f3bf 8f5f 	dmb	sy
}
 8000d88:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000d8a:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <HAL_MPU_Disable+0x28>)
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d8e:	4a06      	ldr	r2, [pc, #24]	@ (8000da8 <HAL_MPU_Disable+0x28>)
 8000d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d94:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000d96:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <HAL_MPU_Disable+0x2c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	605a      	str	r2, [r3, #4]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00
 8000dac:	e000ed90 	.word	0xe000ed90

08000db0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000db8:	4a0b      	ldr	r2, [pc, #44]	@ (8000de8 <HAL_MPU_Enable+0x38>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <HAL_MPU_Enable+0x3c>)
 8000dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dc6:	4a09      	ldr	r2, [pc, #36]	@ (8000dec <HAL_MPU_Enable+0x3c>)
 8000dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dcc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000dce:	f3bf 8f4f 	dsb	sy
}
 8000dd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dd4:	f3bf 8f6f 	isb	sy
}
 8000dd8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed90 	.word	0xe000ed90
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	785a      	ldrb	r2, [r3, #1]
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e6c <HAL_MPU_ConfigRegion+0x7c>)
 8000dfe:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000e00:	4b1a      	ldr	r3, [pc, #104]	@ (8000e6c <HAL_MPU_ConfigRegion+0x7c>)
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	4a19      	ldr	r2, [pc, #100]	@ (8000e6c <HAL_MPU_ConfigRegion+0x7c>)
 8000e06:	f023 0301 	bic.w	r3, r3, #1
 8000e0a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000e0c:	4a17      	ldr	r2, [pc, #92]	@ (8000e6c <HAL_MPU_ConfigRegion+0x7c>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	7b1b      	ldrb	r3, [r3, #12]
 8000e18:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7adb      	ldrb	r3, [r3, #11]
 8000e1e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	7a9b      	ldrb	r3, [r3, #10]
 8000e26:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	7b5b      	ldrb	r3, [r3, #13]
 8000e2e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	7b9b      	ldrb	r3, [r3, #14]
 8000e36:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	7bdb      	ldrb	r3, [r3, #15]
 8000e3e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7a5b      	ldrb	r3, [r3, #9]
 8000e46:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	7a1b      	ldrb	r3, [r3, #8]
 8000e4e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e50:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	7812      	ldrb	r2, [r2, #0]
 8000e56:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e58:	4a04      	ldr	r2, [pc, #16]	@ (8000e6c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e5a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e5c:	6113      	str	r3, [r2, #16]
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed90 	.word	0xe000ed90

08000e70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000e78:	f7ff fe86 	bl	8000b88 <HAL_GetTick>
 8000e7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d101      	bne.n	8000e88 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e316      	b.n	80014b6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a66      	ldr	r2, [pc, #408]	@ (8001028 <HAL_DMA_Init+0x1b8>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d04a      	beq.n	8000f28 <HAL_DMA_Init+0xb8>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a65      	ldr	r2, [pc, #404]	@ (800102c <HAL_DMA_Init+0x1bc>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d045      	beq.n	8000f28 <HAL_DMA_Init+0xb8>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a63      	ldr	r2, [pc, #396]	@ (8001030 <HAL_DMA_Init+0x1c0>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d040      	beq.n	8000f28 <HAL_DMA_Init+0xb8>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a62      	ldr	r2, [pc, #392]	@ (8001034 <HAL_DMA_Init+0x1c4>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d03b      	beq.n	8000f28 <HAL_DMA_Init+0xb8>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a60      	ldr	r2, [pc, #384]	@ (8001038 <HAL_DMA_Init+0x1c8>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d036      	beq.n	8000f28 <HAL_DMA_Init+0xb8>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a5f      	ldr	r2, [pc, #380]	@ (800103c <HAL_DMA_Init+0x1cc>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d031      	beq.n	8000f28 <HAL_DMA_Init+0xb8>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a5d      	ldr	r2, [pc, #372]	@ (8001040 <HAL_DMA_Init+0x1d0>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d02c      	beq.n	8000f28 <HAL_DMA_Init+0xb8>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a5c      	ldr	r2, [pc, #368]	@ (8001044 <HAL_DMA_Init+0x1d4>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d027      	beq.n	8000f28 <HAL_DMA_Init+0xb8>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a5a      	ldr	r2, [pc, #360]	@ (8001048 <HAL_DMA_Init+0x1d8>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d022      	beq.n	8000f28 <HAL_DMA_Init+0xb8>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a59      	ldr	r2, [pc, #356]	@ (800104c <HAL_DMA_Init+0x1dc>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d01d      	beq.n	8000f28 <HAL_DMA_Init+0xb8>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a57      	ldr	r2, [pc, #348]	@ (8001050 <HAL_DMA_Init+0x1e0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d018      	beq.n	8000f28 <HAL_DMA_Init+0xb8>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a56      	ldr	r2, [pc, #344]	@ (8001054 <HAL_DMA_Init+0x1e4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d013      	beq.n	8000f28 <HAL_DMA_Init+0xb8>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a54      	ldr	r2, [pc, #336]	@ (8001058 <HAL_DMA_Init+0x1e8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d00e      	beq.n	8000f28 <HAL_DMA_Init+0xb8>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a53      	ldr	r2, [pc, #332]	@ (800105c <HAL_DMA_Init+0x1ec>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d009      	beq.n	8000f28 <HAL_DMA_Init+0xb8>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a51      	ldr	r2, [pc, #324]	@ (8001060 <HAL_DMA_Init+0x1f0>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d004      	beq.n	8000f28 <HAL_DMA_Init+0xb8>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a50      	ldr	r2, [pc, #320]	@ (8001064 <HAL_DMA_Init+0x1f4>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d101      	bne.n	8000f2c <HAL_DMA_Init+0xbc>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e000      	b.n	8000f2e <HAL_DMA_Init+0xbe>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 813b 	beq.w	80011aa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2202      	movs	r2, #2
 8000f38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a37      	ldr	r2, [pc, #220]	@ (8001028 <HAL_DMA_Init+0x1b8>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d04a      	beq.n	8000fe4 <HAL_DMA_Init+0x174>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a36      	ldr	r2, [pc, #216]	@ (800102c <HAL_DMA_Init+0x1bc>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d045      	beq.n	8000fe4 <HAL_DMA_Init+0x174>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a34      	ldr	r2, [pc, #208]	@ (8001030 <HAL_DMA_Init+0x1c0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d040      	beq.n	8000fe4 <HAL_DMA_Init+0x174>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a33      	ldr	r2, [pc, #204]	@ (8001034 <HAL_DMA_Init+0x1c4>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d03b      	beq.n	8000fe4 <HAL_DMA_Init+0x174>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a31      	ldr	r2, [pc, #196]	@ (8001038 <HAL_DMA_Init+0x1c8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d036      	beq.n	8000fe4 <HAL_DMA_Init+0x174>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a30      	ldr	r2, [pc, #192]	@ (800103c <HAL_DMA_Init+0x1cc>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d031      	beq.n	8000fe4 <HAL_DMA_Init+0x174>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a2e      	ldr	r2, [pc, #184]	@ (8001040 <HAL_DMA_Init+0x1d0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d02c      	beq.n	8000fe4 <HAL_DMA_Init+0x174>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001044 <HAL_DMA_Init+0x1d4>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d027      	beq.n	8000fe4 <HAL_DMA_Init+0x174>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a2b      	ldr	r2, [pc, #172]	@ (8001048 <HAL_DMA_Init+0x1d8>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d022      	beq.n	8000fe4 <HAL_DMA_Init+0x174>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a2a      	ldr	r2, [pc, #168]	@ (800104c <HAL_DMA_Init+0x1dc>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d01d      	beq.n	8000fe4 <HAL_DMA_Init+0x174>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a28      	ldr	r2, [pc, #160]	@ (8001050 <HAL_DMA_Init+0x1e0>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d018      	beq.n	8000fe4 <HAL_DMA_Init+0x174>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a27      	ldr	r2, [pc, #156]	@ (8001054 <HAL_DMA_Init+0x1e4>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d013      	beq.n	8000fe4 <HAL_DMA_Init+0x174>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a25      	ldr	r2, [pc, #148]	@ (8001058 <HAL_DMA_Init+0x1e8>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d00e      	beq.n	8000fe4 <HAL_DMA_Init+0x174>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a24      	ldr	r2, [pc, #144]	@ (800105c <HAL_DMA_Init+0x1ec>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d009      	beq.n	8000fe4 <HAL_DMA_Init+0x174>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a22      	ldr	r2, [pc, #136]	@ (8001060 <HAL_DMA_Init+0x1f0>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d004      	beq.n	8000fe4 <HAL_DMA_Init+0x174>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a21      	ldr	r2, [pc, #132]	@ (8001064 <HAL_DMA_Init+0x1f4>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d108      	bne.n	8000ff6 <HAL_DMA_Init+0x186>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 0201 	bic.w	r2, r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	e007      	b.n	8001006 <HAL_DMA_Init+0x196>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 0201 	bic.w	r2, r2, #1
 8001004:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001006:	e02f      	b.n	8001068 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001008:	f7ff fdbe 	bl	8000b88 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b05      	cmp	r3, #5
 8001014:	d928      	bls.n	8001068 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2220      	movs	r2, #32
 800101a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2203      	movs	r2, #3
 8001020:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e246      	b.n	80014b6 <HAL_DMA_Init+0x646>
 8001028:	40020010 	.word	0x40020010
 800102c:	40020028 	.word	0x40020028
 8001030:	40020040 	.word	0x40020040
 8001034:	40020058 	.word	0x40020058
 8001038:	40020070 	.word	0x40020070
 800103c:	40020088 	.word	0x40020088
 8001040:	400200a0 	.word	0x400200a0
 8001044:	400200b8 	.word	0x400200b8
 8001048:	40020410 	.word	0x40020410
 800104c:	40020428 	.word	0x40020428
 8001050:	40020440 	.word	0x40020440
 8001054:	40020458 	.word	0x40020458
 8001058:	40020470 	.word	0x40020470
 800105c:	40020488 	.word	0x40020488
 8001060:	400204a0 	.word	0x400204a0
 8001064:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1c8      	bne.n	8001008 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	4b83      	ldr	r3, [pc, #524]	@ (8001290 <HAL_DMA_Init+0x420>)
 8001082:	4013      	ands	r3, r2
 8001084:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800108e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800109a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	d107      	bne.n	80010cc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c4:	4313      	orrs	r3, r2
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80010cc:	4b71      	ldr	r3, [pc, #452]	@ (8001294 <HAL_DMA_Init+0x424>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b71      	ldr	r3, [pc, #452]	@ (8001298 <HAL_DMA_Init+0x428>)
 80010d2:	4013      	ands	r3, r2
 80010d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80010d8:	d328      	bcc.n	800112c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b28      	cmp	r3, #40	@ 0x28
 80010e0:	d903      	bls.n	80010ea <HAL_DMA_Init+0x27a>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80010e8:	d917      	bls.n	800111a <HAL_DMA_Init+0x2aa>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80010f0:	d903      	bls.n	80010fa <HAL_DMA_Init+0x28a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b42      	cmp	r3, #66	@ 0x42
 80010f8:	d90f      	bls.n	800111a <HAL_DMA_Init+0x2aa>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b46      	cmp	r3, #70	@ 0x46
 8001100:	d903      	bls.n	800110a <HAL_DMA_Init+0x29a>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b48      	cmp	r3, #72	@ 0x48
 8001108:	d907      	bls.n	800111a <HAL_DMA_Init+0x2aa>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b4e      	cmp	r3, #78	@ 0x4e
 8001110:	d905      	bls.n	800111e <HAL_DMA_Init+0x2ae>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b52      	cmp	r3, #82	@ 0x52
 8001118:	d801      	bhi.n	800111e <HAL_DMA_Init+0x2ae>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <HAL_DMA_Init+0x2b0>
 800111e:	2300      	movs	r3, #0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800112a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	f023 0307 	bic.w	r3, r3, #7
 8001142:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	4313      	orrs	r3, r2
 800114c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001152:	2b04      	cmp	r3, #4
 8001154:	d117      	bne.n	8001186 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	4313      	orrs	r3, r2
 800115e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001164:	2b00      	cmp	r3, #0
 8001166:	d00e      	beq.n	8001186 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f001 fc23 	bl	80029b4 <DMA_CheckFifoParam>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d008      	beq.n	8001186 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2240      	movs	r2, #64	@ 0x40
 8001178:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e197      	b.n	80014b6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f001 fb5e 	bl	8002850 <DMA_CalcBaseAndBitshift>
 8001194:	4603      	mov	r3, r0
 8001196:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800119c:	f003 031f 	and.w	r3, r3, #31
 80011a0:	223f      	movs	r2, #63	@ 0x3f
 80011a2:	409a      	lsls	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	e0cd      	b.n	8001346 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a3b      	ldr	r2, [pc, #236]	@ (800129c <HAL_DMA_Init+0x42c>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d022      	beq.n	80011fa <HAL_DMA_Init+0x38a>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a39      	ldr	r2, [pc, #228]	@ (80012a0 <HAL_DMA_Init+0x430>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d01d      	beq.n	80011fa <HAL_DMA_Init+0x38a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a38      	ldr	r2, [pc, #224]	@ (80012a4 <HAL_DMA_Init+0x434>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d018      	beq.n	80011fa <HAL_DMA_Init+0x38a>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a36      	ldr	r2, [pc, #216]	@ (80012a8 <HAL_DMA_Init+0x438>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d013      	beq.n	80011fa <HAL_DMA_Init+0x38a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a35      	ldr	r2, [pc, #212]	@ (80012ac <HAL_DMA_Init+0x43c>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d00e      	beq.n	80011fa <HAL_DMA_Init+0x38a>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a33      	ldr	r2, [pc, #204]	@ (80012b0 <HAL_DMA_Init+0x440>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d009      	beq.n	80011fa <HAL_DMA_Init+0x38a>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a32      	ldr	r2, [pc, #200]	@ (80012b4 <HAL_DMA_Init+0x444>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d004      	beq.n	80011fa <HAL_DMA_Init+0x38a>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a30      	ldr	r2, [pc, #192]	@ (80012b8 <HAL_DMA_Init+0x448>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d101      	bne.n	80011fe <HAL_DMA_Init+0x38e>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <HAL_DMA_Init+0x390>
 80011fe:	2300      	movs	r3, #0
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 8097 	beq.w	8001334 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a24      	ldr	r2, [pc, #144]	@ (800129c <HAL_DMA_Init+0x42c>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d021      	beq.n	8001254 <HAL_DMA_Init+0x3e4>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a22      	ldr	r2, [pc, #136]	@ (80012a0 <HAL_DMA_Init+0x430>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d01c      	beq.n	8001254 <HAL_DMA_Init+0x3e4>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a21      	ldr	r2, [pc, #132]	@ (80012a4 <HAL_DMA_Init+0x434>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d017      	beq.n	8001254 <HAL_DMA_Init+0x3e4>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a1f      	ldr	r2, [pc, #124]	@ (80012a8 <HAL_DMA_Init+0x438>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d012      	beq.n	8001254 <HAL_DMA_Init+0x3e4>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a1e      	ldr	r2, [pc, #120]	@ (80012ac <HAL_DMA_Init+0x43c>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d00d      	beq.n	8001254 <HAL_DMA_Init+0x3e4>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a1c      	ldr	r2, [pc, #112]	@ (80012b0 <HAL_DMA_Init+0x440>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d008      	beq.n	8001254 <HAL_DMA_Init+0x3e4>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a1b      	ldr	r2, [pc, #108]	@ (80012b4 <HAL_DMA_Init+0x444>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d003      	beq.n	8001254 <HAL_DMA_Init+0x3e4>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a19      	ldr	r2, [pc, #100]	@ (80012b8 <HAL_DMA_Init+0x448>)
 8001252:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2202      	movs	r2, #2
 8001258:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <HAL_DMA_Init+0x44c>)
 8001270:	4013      	ands	r3, r2
 8001272:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	2b40      	cmp	r3, #64	@ 0x40
 800127a:	d021      	beq.n	80012c0 <HAL_DMA_Init+0x450>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	2b80      	cmp	r3, #128	@ 0x80
 8001282:	d102      	bne.n	800128a <HAL_DMA_Init+0x41a>
 8001284:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001288:	e01b      	b.n	80012c2 <HAL_DMA_Init+0x452>
 800128a:	2300      	movs	r3, #0
 800128c:	e019      	b.n	80012c2 <HAL_DMA_Init+0x452>
 800128e:	bf00      	nop
 8001290:	fe10803f 	.word	0xfe10803f
 8001294:	5c001000 	.word	0x5c001000
 8001298:	ffff0000 	.word	0xffff0000
 800129c:	58025408 	.word	0x58025408
 80012a0:	5802541c 	.word	0x5802541c
 80012a4:	58025430 	.word	0x58025430
 80012a8:	58025444 	.word	0x58025444
 80012ac:	58025458 	.word	0x58025458
 80012b0:	5802546c 	.word	0x5802546c
 80012b4:	58025480 	.word	0x58025480
 80012b8:	58025494 	.word	0x58025494
 80012bc:	fffe000f 	.word	0xfffe000f
 80012c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68d2      	ldr	r2, [r2, #12]
 80012c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80012c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80012d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80012d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80012e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80012e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80012f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b6e      	ldr	r3, [pc, #440]	@ (80014c0 <HAL_DMA_Init+0x650>)
 8001308:	4413      	add	r3, r2
 800130a:	4a6e      	ldr	r2, [pc, #440]	@ (80014c4 <HAL_DMA_Init+0x654>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	091b      	lsrs	r3, r3, #4
 8001312:	009a      	lsls	r2, r3, #2
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f001 fa99 	bl	8002850 <DMA_CalcBaseAndBitshift>
 800131e:	4603      	mov	r3, r0
 8001320:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001326:	f003 031f 	and.w	r3, r3, #31
 800132a:	2201      	movs	r2, #1
 800132c:	409a      	lsls	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	e008      	b.n	8001346 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2240      	movs	r2, #64	@ 0x40
 8001338:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2203      	movs	r2, #3
 800133e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e0b7      	b.n	80014b6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a5f      	ldr	r2, [pc, #380]	@ (80014c8 <HAL_DMA_Init+0x658>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d072      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a5d      	ldr	r2, [pc, #372]	@ (80014cc <HAL_DMA_Init+0x65c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d06d      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a5c      	ldr	r2, [pc, #368]	@ (80014d0 <HAL_DMA_Init+0x660>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d068      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a5a      	ldr	r2, [pc, #360]	@ (80014d4 <HAL_DMA_Init+0x664>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d063      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a59      	ldr	r2, [pc, #356]	@ (80014d8 <HAL_DMA_Init+0x668>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d05e      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a57      	ldr	r2, [pc, #348]	@ (80014dc <HAL_DMA_Init+0x66c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d059      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a56      	ldr	r2, [pc, #344]	@ (80014e0 <HAL_DMA_Init+0x670>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d054      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a54      	ldr	r2, [pc, #336]	@ (80014e4 <HAL_DMA_Init+0x674>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d04f      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a53      	ldr	r2, [pc, #332]	@ (80014e8 <HAL_DMA_Init+0x678>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d04a      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a51      	ldr	r2, [pc, #324]	@ (80014ec <HAL_DMA_Init+0x67c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d045      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a50      	ldr	r2, [pc, #320]	@ (80014f0 <HAL_DMA_Init+0x680>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d040      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a4e      	ldr	r2, [pc, #312]	@ (80014f4 <HAL_DMA_Init+0x684>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d03b      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a4d      	ldr	r2, [pc, #308]	@ (80014f8 <HAL_DMA_Init+0x688>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d036      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a4b      	ldr	r2, [pc, #300]	@ (80014fc <HAL_DMA_Init+0x68c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d031      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a4a      	ldr	r2, [pc, #296]	@ (8001500 <HAL_DMA_Init+0x690>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d02c      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a48      	ldr	r2, [pc, #288]	@ (8001504 <HAL_DMA_Init+0x694>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d027      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a47      	ldr	r2, [pc, #284]	@ (8001508 <HAL_DMA_Init+0x698>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d022      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a45      	ldr	r2, [pc, #276]	@ (800150c <HAL_DMA_Init+0x69c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d01d      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a44      	ldr	r2, [pc, #272]	@ (8001510 <HAL_DMA_Init+0x6a0>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d018      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a42      	ldr	r2, [pc, #264]	@ (8001514 <HAL_DMA_Init+0x6a4>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d013      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a41      	ldr	r2, [pc, #260]	@ (8001518 <HAL_DMA_Init+0x6a8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d00e      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a3f      	ldr	r2, [pc, #252]	@ (800151c <HAL_DMA_Init+0x6ac>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d009      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a3e      	ldr	r2, [pc, #248]	@ (8001520 <HAL_DMA_Init+0x6b0>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d004      	beq.n	8001436 <HAL_DMA_Init+0x5c6>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a3c      	ldr	r2, [pc, #240]	@ (8001524 <HAL_DMA_Init+0x6b4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d101      	bne.n	800143a <HAL_DMA_Init+0x5ca>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <HAL_DMA_Init+0x5cc>
 800143a:	2300      	movs	r3, #0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d032      	beq.n	80014a6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f001 fb33 	bl	8002aac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2b80      	cmp	r3, #128	@ 0x80
 800144c:	d102      	bne.n	8001454 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001468:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d010      	beq.n	8001494 <HAL_DMA_Init+0x624>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b08      	cmp	r3, #8
 8001478:	d80c      	bhi.n	8001494 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f001 fbb0 	bl	8002be0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	e008      	b.n	80014a6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	a7fdabf8 	.word	0xa7fdabf8
 80014c4:	cccccccd 	.word	0xcccccccd
 80014c8:	40020010 	.word	0x40020010
 80014cc:	40020028 	.word	0x40020028
 80014d0:	40020040 	.word	0x40020040
 80014d4:	40020058 	.word	0x40020058
 80014d8:	40020070 	.word	0x40020070
 80014dc:	40020088 	.word	0x40020088
 80014e0:	400200a0 	.word	0x400200a0
 80014e4:	400200b8 	.word	0x400200b8
 80014e8:	40020410 	.word	0x40020410
 80014ec:	40020428 	.word	0x40020428
 80014f0:	40020440 	.word	0x40020440
 80014f4:	40020458 	.word	0x40020458
 80014f8:	40020470 	.word	0x40020470
 80014fc:	40020488 	.word	0x40020488
 8001500:	400204a0 	.word	0x400204a0
 8001504:	400204b8 	.word	0x400204b8
 8001508:	58025408 	.word	0x58025408
 800150c:	5802541c 	.word	0x5802541c
 8001510:	58025430 	.word	0x58025430
 8001514:	58025444 	.word	0x58025444
 8001518:	58025458 	.word	0x58025458
 800151c:	5802546c 	.word	0x5802546c
 8001520:	58025480 	.word	0x58025480
 8001524:	58025494 	.word	0x58025494

08001528 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e0ec      	b.n	800171e <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <HAL_DMA_Start+0x2a>
 800154e:	2302      	movs	r3, #2
 8001550:	e0e5      	b.n	800171e <HAL_DMA_Start+0x1f6>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b01      	cmp	r3, #1
 8001564:	f040 80d0 	bne.w	8001708 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2202      	movs	r2, #2
 800156c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a6b      	ldr	r2, [pc, #428]	@ (8001728 <HAL_DMA_Start+0x200>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d04a      	beq.n	8001616 <HAL_DMA_Start+0xee>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a69      	ldr	r2, [pc, #420]	@ (800172c <HAL_DMA_Start+0x204>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d045      	beq.n	8001616 <HAL_DMA_Start+0xee>
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a68      	ldr	r2, [pc, #416]	@ (8001730 <HAL_DMA_Start+0x208>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d040      	beq.n	8001616 <HAL_DMA_Start+0xee>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a66      	ldr	r2, [pc, #408]	@ (8001734 <HAL_DMA_Start+0x20c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d03b      	beq.n	8001616 <HAL_DMA_Start+0xee>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a65      	ldr	r2, [pc, #404]	@ (8001738 <HAL_DMA_Start+0x210>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d036      	beq.n	8001616 <HAL_DMA_Start+0xee>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a63      	ldr	r2, [pc, #396]	@ (800173c <HAL_DMA_Start+0x214>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d031      	beq.n	8001616 <HAL_DMA_Start+0xee>
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a62      	ldr	r2, [pc, #392]	@ (8001740 <HAL_DMA_Start+0x218>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d02c      	beq.n	8001616 <HAL_DMA_Start+0xee>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a60      	ldr	r2, [pc, #384]	@ (8001744 <HAL_DMA_Start+0x21c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d027      	beq.n	8001616 <HAL_DMA_Start+0xee>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a5f      	ldr	r2, [pc, #380]	@ (8001748 <HAL_DMA_Start+0x220>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d022      	beq.n	8001616 <HAL_DMA_Start+0xee>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a5d      	ldr	r2, [pc, #372]	@ (800174c <HAL_DMA_Start+0x224>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d01d      	beq.n	8001616 <HAL_DMA_Start+0xee>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a5c      	ldr	r2, [pc, #368]	@ (8001750 <HAL_DMA_Start+0x228>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d018      	beq.n	8001616 <HAL_DMA_Start+0xee>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a5a      	ldr	r2, [pc, #360]	@ (8001754 <HAL_DMA_Start+0x22c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d013      	beq.n	8001616 <HAL_DMA_Start+0xee>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a59      	ldr	r2, [pc, #356]	@ (8001758 <HAL_DMA_Start+0x230>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d00e      	beq.n	8001616 <HAL_DMA_Start+0xee>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a57      	ldr	r2, [pc, #348]	@ (800175c <HAL_DMA_Start+0x234>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d009      	beq.n	8001616 <HAL_DMA_Start+0xee>
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a56      	ldr	r2, [pc, #344]	@ (8001760 <HAL_DMA_Start+0x238>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d004      	beq.n	8001616 <HAL_DMA_Start+0xee>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a54      	ldr	r2, [pc, #336]	@ (8001764 <HAL_DMA_Start+0x23c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d108      	bne.n	8001628 <HAL_DMA_Start+0x100>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0201 	bic.w	r2, r2, #1
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	e007      	b.n	8001638 <HAL_DMA_Start+0x110>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0201 	bic.w	r2, r2, #1
 8001636:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 ff5a 	bl	80024f8 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a37      	ldr	r2, [pc, #220]	@ (8001728 <HAL_DMA_Start+0x200>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d04a      	beq.n	80016e4 <HAL_DMA_Start+0x1bc>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a36      	ldr	r2, [pc, #216]	@ (800172c <HAL_DMA_Start+0x204>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d045      	beq.n	80016e4 <HAL_DMA_Start+0x1bc>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a34      	ldr	r2, [pc, #208]	@ (8001730 <HAL_DMA_Start+0x208>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d040      	beq.n	80016e4 <HAL_DMA_Start+0x1bc>
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a33      	ldr	r2, [pc, #204]	@ (8001734 <HAL_DMA_Start+0x20c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d03b      	beq.n	80016e4 <HAL_DMA_Start+0x1bc>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a31      	ldr	r2, [pc, #196]	@ (8001738 <HAL_DMA_Start+0x210>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d036      	beq.n	80016e4 <HAL_DMA_Start+0x1bc>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a30      	ldr	r2, [pc, #192]	@ (800173c <HAL_DMA_Start+0x214>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d031      	beq.n	80016e4 <HAL_DMA_Start+0x1bc>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a2e      	ldr	r2, [pc, #184]	@ (8001740 <HAL_DMA_Start+0x218>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d02c      	beq.n	80016e4 <HAL_DMA_Start+0x1bc>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a2d      	ldr	r2, [pc, #180]	@ (8001744 <HAL_DMA_Start+0x21c>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d027      	beq.n	80016e4 <HAL_DMA_Start+0x1bc>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a2b      	ldr	r2, [pc, #172]	@ (8001748 <HAL_DMA_Start+0x220>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d022      	beq.n	80016e4 <HAL_DMA_Start+0x1bc>
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a2a      	ldr	r2, [pc, #168]	@ (800174c <HAL_DMA_Start+0x224>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d01d      	beq.n	80016e4 <HAL_DMA_Start+0x1bc>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a28      	ldr	r2, [pc, #160]	@ (8001750 <HAL_DMA_Start+0x228>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d018      	beq.n	80016e4 <HAL_DMA_Start+0x1bc>
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a27      	ldr	r2, [pc, #156]	@ (8001754 <HAL_DMA_Start+0x22c>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d013      	beq.n	80016e4 <HAL_DMA_Start+0x1bc>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a25      	ldr	r2, [pc, #148]	@ (8001758 <HAL_DMA_Start+0x230>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d00e      	beq.n	80016e4 <HAL_DMA_Start+0x1bc>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a24      	ldr	r2, [pc, #144]	@ (800175c <HAL_DMA_Start+0x234>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d009      	beq.n	80016e4 <HAL_DMA_Start+0x1bc>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a22      	ldr	r2, [pc, #136]	@ (8001760 <HAL_DMA_Start+0x238>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d004      	beq.n	80016e4 <HAL_DMA_Start+0x1bc>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a21      	ldr	r2, [pc, #132]	@ (8001764 <HAL_DMA_Start+0x23c>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d108      	bne.n	80016f6 <HAL_DMA_Start+0x1ce>
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0201 	orr.w	r2, r2, #1
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	e012      	b.n	800171c <HAL_DMA_Start+0x1f4>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f042 0201 	orr.w	r2, r2, #1
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	e009      	b.n	800171c <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800170e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800171c:	7dfb      	ldrb	r3, [r7, #23]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40020010 	.word	0x40020010
 800172c:	40020028 	.word	0x40020028
 8001730:	40020040 	.word	0x40020040
 8001734:	40020058 	.word	0x40020058
 8001738:	40020070 	.word	0x40020070
 800173c:	40020088 	.word	0x40020088
 8001740:	400200a0 	.word	0x400200a0
 8001744:	400200b8 	.word	0x400200b8
 8001748:	40020410 	.word	0x40020410
 800174c:	40020428 	.word	0x40020428
 8001750:	40020440 	.word	0x40020440
 8001754:	40020458 	.word	0x40020458
 8001758:	40020470 	.word	0x40020470
 800175c:	40020488 	.word	0x40020488
 8001760:	400204a0 	.word	0x400204a0
 8001764:	400204b8 	.word	0x400204b8

08001768 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001770:	f7ff fa0a 	bl	8000b88 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e2dc      	b.n	8001d3a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d008      	beq.n	800179e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2280      	movs	r2, #128	@ 0x80
 8001790:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e2cd      	b.n	8001d3a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a76      	ldr	r2, [pc, #472]	@ (800197c <HAL_DMA_Abort+0x214>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d04a      	beq.n	800183e <HAL_DMA_Abort+0xd6>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a74      	ldr	r2, [pc, #464]	@ (8001980 <HAL_DMA_Abort+0x218>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d045      	beq.n	800183e <HAL_DMA_Abort+0xd6>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a73      	ldr	r2, [pc, #460]	@ (8001984 <HAL_DMA_Abort+0x21c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d040      	beq.n	800183e <HAL_DMA_Abort+0xd6>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a71      	ldr	r2, [pc, #452]	@ (8001988 <HAL_DMA_Abort+0x220>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d03b      	beq.n	800183e <HAL_DMA_Abort+0xd6>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a70      	ldr	r2, [pc, #448]	@ (800198c <HAL_DMA_Abort+0x224>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d036      	beq.n	800183e <HAL_DMA_Abort+0xd6>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a6e      	ldr	r2, [pc, #440]	@ (8001990 <HAL_DMA_Abort+0x228>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d031      	beq.n	800183e <HAL_DMA_Abort+0xd6>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a6d      	ldr	r2, [pc, #436]	@ (8001994 <HAL_DMA_Abort+0x22c>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d02c      	beq.n	800183e <HAL_DMA_Abort+0xd6>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a6b      	ldr	r2, [pc, #428]	@ (8001998 <HAL_DMA_Abort+0x230>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d027      	beq.n	800183e <HAL_DMA_Abort+0xd6>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a6a      	ldr	r2, [pc, #424]	@ (800199c <HAL_DMA_Abort+0x234>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d022      	beq.n	800183e <HAL_DMA_Abort+0xd6>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a68      	ldr	r2, [pc, #416]	@ (80019a0 <HAL_DMA_Abort+0x238>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d01d      	beq.n	800183e <HAL_DMA_Abort+0xd6>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a67      	ldr	r2, [pc, #412]	@ (80019a4 <HAL_DMA_Abort+0x23c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d018      	beq.n	800183e <HAL_DMA_Abort+0xd6>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a65      	ldr	r2, [pc, #404]	@ (80019a8 <HAL_DMA_Abort+0x240>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_DMA_Abort+0xd6>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a64      	ldr	r2, [pc, #400]	@ (80019ac <HAL_DMA_Abort+0x244>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d00e      	beq.n	800183e <HAL_DMA_Abort+0xd6>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a62      	ldr	r2, [pc, #392]	@ (80019b0 <HAL_DMA_Abort+0x248>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d009      	beq.n	800183e <HAL_DMA_Abort+0xd6>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a61      	ldr	r2, [pc, #388]	@ (80019b4 <HAL_DMA_Abort+0x24c>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d004      	beq.n	800183e <HAL_DMA_Abort+0xd6>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a5f      	ldr	r2, [pc, #380]	@ (80019b8 <HAL_DMA_Abort+0x250>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d101      	bne.n	8001842 <HAL_DMA_Abort+0xda>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_DMA_Abort+0xdc>
 8001842:	2300      	movs	r3, #0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d013      	beq.n	8001870 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 021e 	bic.w	r2, r2, #30
 8001856:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	695a      	ldr	r2, [r3, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001866:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	e00a      	b.n	8001886 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 020e 	bic.w	r2, r2, #14
 800187e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a3c      	ldr	r2, [pc, #240]	@ (800197c <HAL_DMA_Abort+0x214>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d072      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a3a      	ldr	r2, [pc, #232]	@ (8001980 <HAL_DMA_Abort+0x218>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d06d      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a39      	ldr	r2, [pc, #228]	@ (8001984 <HAL_DMA_Abort+0x21c>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d068      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a37      	ldr	r2, [pc, #220]	@ (8001988 <HAL_DMA_Abort+0x220>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d063      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a36      	ldr	r2, [pc, #216]	@ (800198c <HAL_DMA_Abort+0x224>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d05e      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a34      	ldr	r2, [pc, #208]	@ (8001990 <HAL_DMA_Abort+0x228>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d059      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a33      	ldr	r2, [pc, #204]	@ (8001994 <HAL_DMA_Abort+0x22c>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d054      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a31      	ldr	r2, [pc, #196]	@ (8001998 <HAL_DMA_Abort+0x230>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d04f      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a30      	ldr	r2, [pc, #192]	@ (800199c <HAL_DMA_Abort+0x234>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d04a      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a2e      	ldr	r2, [pc, #184]	@ (80019a0 <HAL_DMA_Abort+0x238>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d045      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a2d      	ldr	r2, [pc, #180]	@ (80019a4 <HAL_DMA_Abort+0x23c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d040      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a2b      	ldr	r2, [pc, #172]	@ (80019a8 <HAL_DMA_Abort+0x240>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d03b      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a2a      	ldr	r2, [pc, #168]	@ (80019ac <HAL_DMA_Abort+0x244>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d036      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a28      	ldr	r2, [pc, #160]	@ (80019b0 <HAL_DMA_Abort+0x248>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d031      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a27      	ldr	r2, [pc, #156]	@ (80019b4 <HAL_DMA_Abort+0x24c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d02c      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a25      	ldr	r2, [pc, #148]	@ (80019b8 <HAL_DMA_Abort+0x250>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d027      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a24      	ldr	r2, [pc, #144]	@ (80019bc <HAL_DMA_Abort+0x254>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d022      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a22      	ldr	r2, [pc, #136]	@ (80019c0 <HAL_DMA_Abort+0x258>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d01d      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a21      	ldr	r2, [pc, #132]	@ (80019c4 <HAL_DMA_Abort+0x25c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d018      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a1f      	ldr	r2, [pc, #124]	@ (80019c8 <HAL_DMA_Abort+0x260>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d013      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a1e      	ldr	r2, [pc, #120]	@ (80019cc <HAL_DMA_Abort+0x264>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d00e      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a1c      	ldr	r2, [pc, #112]	@ (80019d0 <HAL_DMA_Abort+0x268>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d009      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a1b      	ldr	r2, [pc, #108]	@ (80019d4 <HAL_DMA_Abort+0x26c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d004      	beq.n	8001976 <HAL_DMA_Abort+0x20e>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a19      	ldr	r2, [pc, #100]	@ (80019d8 <HAL_DMA_Abort+0x270>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d132      	bne.n	80019dc <HAL_DMA_Abort+0x274>
 8001976:	2301      	movs	r3, #1
 8001978:	e031      	b.n	80019de <HAL_DMA_Abort+0x276>
 800197a:	bf00      	nop
 800197c:	40020010 	.word	0x40020010
 8001980:	40020028 	.word	0x40020028
 8001984:	40020040 	.word	0x40020040
 8001988:	40020058 	.word	0x40020058
 800198c:	40020070 	.word	0x40020070
 8001990:	40020088 	.word	0x40020088
 8001994:	400200a0 	.word	0x400200a0
 8001998:	400200b8 	.word	0x400200b8
 800199c:	40020410 	.word	0x40020410
 80019a0:	40020428 	.word	0x40020428
 80019a4:	40020440 	.word	0x40020440
 80019a8:	40020458 	.word	0x40020458
 80019ac:	40020470 	.word	0x40020470
 80019b0:	40020488 	.word	0x40020488
 80019b4:	400204a0 	.word	0x400204a0
 80019b8:	400204b8 	.word	0x400204b8
 80019bc:	58025408 	.word	0x58025408
 80019c0:	5802541c 	.word	0x5802541c
 80019c4:	58025430 	.word	0x58025430
 80019c8:	58025444 	.word	0x58025444
 80019cc:	58025458 	.word	0x58025458
 80019d0:	5802546c 	.word	0x5802546c
 80019d4:	58025480 	.word	0x58025480
 80019d8:	58025494 	.word	0x58025494
 80019dc:	2300      	movs	r3, #0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d007      	beq.n	80019f2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a6d      	ldr	r2, [pc, #436]	@ (8001bac <HAL_DMA_Abort+0x444>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d04a      	beq.n	8001a92 <HAL_DMA_Abort+0x32a>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a6b      	ldr	r2, [pc, #428]	@ (8001bb0 <HAL_DMA_Abort+0x448>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d045      	beq.n	8001a92 <HAL_DMA_Abort+0x32a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a6a      	ldr	r2, [pc, #424]	@ (8001bb4 <HAL_DMA_Abort+0x44c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d040      	beq.n	8001a92 <HAL_DMA_Abort+0x32a>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a68      	ldr	r2, [pc, #416]	@ (8001bb8 <HAL_DMA_Abort+0x450>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d03b      	beq.n	8001a92 <HAL_DMA_Abort+0x32a>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a67      	ldr	r2, [pc, #412]	@ (8001bbc <HAL_DMA_Abort+0x454>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d036      	beq.n	8001a92 <HAL_DMA_Abort+0x32a>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a65      	ldr	r2, [pc, #404]	@ (8001bc0 <HAL_DMA_Abort+0x458>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d031      	beq.n	8001a92 <HAL_DMA_Abort+0x32a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a64      	ldr	r2, [pc, #400]	@ (8001bc4 <HAL_DMA_Abort+0x45c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d02c      	beq.n	8001a92 <HAL_DMA_Abort+0x32a>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a62      	ldr	r2, [pc, #392]	@ (8001bc8 <HAL_DMA_Abort+0x460>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d027      	beq.n	8001a92 <HAL_DMA_Abort+0x32a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a61      	ldr	r2, [pc, #388]	@ (8001bcc <HAL_DMA_Abort+0x464>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d022      	beq.n	8001a92 <HAL_DMA_Abort+0x32a>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a5f      	ldr	r2, [pc, #380]	@ (8001bd0 <HAL_DMA_Abort+0x468>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d01d      	beq.n	8001a92 <HAL_DMA_Abort+0x32a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a5e      	ldr	r2, [pc, #376]	@ (8001bd4 <HAL_DMA_Abort+0x46c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d018      	beq.n	8001a92 <HAL_DMA_Abort+0x32a>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a5c      	ldr	r2, [pc, #368]	@ (8001bd8 <HAL_DMA_Abort+0x470>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d013      	beq.n	8001a92 <HAL_DMA_Abort+0x32a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a5b      	ldr	r2, [pc, #364]	@ (8001bdc <HAL_DMA_Abort+0x474>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d00e      	beq.n	8001a92 <HAL_DMA_Abort+0x32a>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a59      	ldr	r2, [pc, #356]	@ (8001be0 <HAL_DMA_Abort+0x478>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d009      	beq.n	8001a92 <HAL_DMA_Abort+0x32a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a58      	ldr	r2, [pc, #352]	@ (8001be4 <HAL_DMA_Abort+0x47c>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d004      	beq.n	8001a92 <HAL_DMA_Abort+0x32a>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a56      	ldr	r2, [pc, #344]	@ (8001be8 <HAL_DMA_Abort+0x480>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d108      	bne.n	8001aa4 <HAL_DMA_Abort+0x33c>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 0201 	bic.w	r2, r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e007      	b.n	8001ab4 <HAL_DMA_Abort+0x34c>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0201 	bic.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ab4:	e013      	b.n	8001ade <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ab6:	f7ff f867 	bl	8000b88 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b05      	cmp	r3, #5
 8001ac2:	d90c      	bls.n	8001ade <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2203      	movs	r2, #3
 8001ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e12d      	b.n	8001d3a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1e5      	bne.n	8001ab6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a2f      	ldr	r2, [pc, #188]	@ (8001bac <HAL_DMA_Abort+0x444>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d04a      	beq.n	8001b8a <HAL_DMA_Abort+0x422>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a2d      	ldr	r2, [pc, #180]	@ (8001bb0 <HAL_DMA_Abort+0x448>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d045      	beq.n	8001b8a <HAL_DMA_Abort+0x422>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a2c      	ldr	r2, [pc, #176]	@ (8001bb4 <HAL_DMA_Abort+0x44c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d040      	beq.n	8001b8a <HAL_DMA_Abort+0x422>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001bb8 <HAL_DMA_Abort+0x450>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d03b      	beq.n	8001b8a <HAL_DMA_Abort+0x422>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a29      	ldr	r2, [pc, #164]	@ (8001bbc <HAL_DMA_Abort+0x454>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d036      	beq.n	8001b8a <HAL_DMA_Abort+0x422>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a27      	ldr	r2, [pc, #156]	@ (8001bc0 <HAL_DMA_Abort+0x458>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d031      	beq.n	8001b8a <HAL_DMA_Abort+0x422>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a26      	ldr	r2, [pc, #152]	@ (8001bc4 <HAL_DMA_Abort+0x45c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d02c      	beq.n	8001b8a <HAL_DMA_Abort+0x422>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a24      	ldr	r2, [pc, #144]	@ (8001bc8 <HAL_DMA_Abort+0x460>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d027      	beq.n	8001b8a <HAL_DMA_Abort+0x422>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a23      	ldr	r2, [pc, #140]	@ (8001bcc <HAL_DMA_Abort+0x464>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d022      	beq.n	8001b8a <HAL_DMA_Abort+0x422>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a21      	ldr	r2, [pc, #132]	@ (8001bd0 <HAL_DMA_Abort+0x468>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d01d      	beq.n	8001b8a <HAL_DMA_Abort+0x422>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a20      	ldr	r2, [pc, #128]	@ (8001bd4 <HAL_DMA_Abort+0x46c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d018      	beq.n	8001b8a <HAL_DMA_Abort+0x422>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001bd8 <HAL_DMA_Abort+0x470>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d013      	beq.n	8001b8a <HAL_DMA_Abort+0x422>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a1d      	ldr	r2, [pc, #116]	@ (8001bdc <HAL_DMA_Abort+0x474>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d00e      	beq.n	8001b8a <HAL_DMA_Abort+0x422>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a1b      	ldr	r2, [pc, #108]	@ (8001be0 <HAL_DMA_Abort+0x478>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d009      	beq.n	8001b8a <HAL_DMA_Abort+0x422>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8001be4 <HAL_DMA_Abort+0x47c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d004      	beq.n	8001b8a <HAL_DMA_Abort+0x422>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a18      	ldr	r2, [pc, #96]	@ (8001be8 <HAL_DMA_Abort+0x480>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d101      	bne.n	8001b8e <HAL_DMA_Abort+0x426>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <HAL_DMA_Abort+0x428>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d02b      	beq.n	8001bec <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b98:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	223f      	movs	r2, #63	@ 0x3f
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	e02a      	b.n	8001c02 <HAL_DMA_Abort+0x49a>
 8001bac:	40020010 	.word	0x40020010
 8001bb0:	40020028 	.word	0x40020028
 8001bb4:	40020040 	.word	0x40020040
 8001bb8:	40020058 	.word	0x40020058
 8001bbc:	40020070 	.word	0x40020070
 8001bc0:	40020088 	.word	0x40020088
 8001bc4:	400200a0 	.word	0x400200a0
 8001bc8:	400200b8 	.word	0x400200b8
 8001bcc:	40020410 	.word	0x40020410
 8001bd0:	40020428 	.word	0x40020428
 8001bd4:	40020440 	.word	0x40020440
 8001bd8:	40020458 	.word	0x40020458
 8001bdc:	40020470 	.word	0x40020470
 8001be0:	40020488 	.word	0x40020488
 8001be4:	400204a0 	.word	0x400204a0
 8001be8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a4f      	ldr	r2, [pc, #316]	@ (8001d44 <HAL_DMA_Abort+0x5dc>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d072      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a4d      	ldr	r2, [pc, #308]	@ (8001d48 <HAL_DMA_Abort+0x5e0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d06d      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a4c      	ldr	r2, [pc, #304]	@ (8001d4c <HAL_DMA_Abort+0x5e4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d068      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a4a      	ldr	r2, [pc, #296]	@ (8001d50 <HAL_DMA_Abort+0x5e8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d063      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a49      	ldr	r2, [pc, #292]	@ (8001d54 <HAL_DMA_Abort+0x5ec>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d05e      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a47      	ldr	r2, [pc, #284]	@ (8001d58 <HAL_DMA_Abort+0x5f0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d059      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a46      	ldr	r2, [pc, #280]	@ (8001d5c <HAL_DMA_Abort+0x5f4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d054      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a44      	ldr	r2, [pc, #272]	@ (8001d60 <HAL_DMA_Abort+0x5f8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d04f      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a43      	ldr	r2, [pc, #268]	@ (8001d64 <HAL_DMA_Abort+0x5fc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d04a      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a41      	ldr	r2, [pc, #260]	@ (8001d68 <HAL_DMA_Abort+0x600>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d045      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a40      	ldr	r2, [pc, #256]	@ (8001d6c <HAL_DMA_Abort+0x604>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d040      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a3e      	ldr	r2, [pc, #248]	@ (8001d70 <HAL_DMA_Abort+0x608>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d03b      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a3d      	ldr	r2, [pc, #244]	@ (8001d74 <HAL_DMA_Abort+0x60c>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d036      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a3b      	ldr	r2, [pc, #236]	@ (8001d78 <HAL_DMA_Abort+0x610>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d031      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a3a      	ldr	r2, [pc, #232]	@ (8001d7c <HAL_DMA_Abort+0x614>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d02c      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a38      	ldr	r2, [pc, #224]	@ (8001d80 <HAL_DMA_Abort+0x618>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d027      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a37      	ldr	r2, [pc, #220]	@ (8001d84 <HAL_DMA_Abort+0x61c>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d022      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a35      	ldr	r2, [pc, #212]	@ (8001d88 <HAL_DMA_Abort+0x620>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d01d      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a34      	ldr	r2, [pc, #208]	@ (8001d8c <HAL_DMA_Abort+0x624>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d018      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a32      	ldr	r2, [pc, #200]	@ (8001d90 <HAL_DMA_Abort+0x628>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d013      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a31      	ldr	r2, [pc, #196]	@ (8001d94 <HAL_DMA_Abort+0x62c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d00e      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a2f      	ldr	r2, [pc, #188]	@ (8001d98 <HAL_DMA_Abort+0x630>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d009      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a2e      	ldr	r2, [pc, #184]	@ (8001d9c <HAL_DMA_Abort+0x634>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d004      	beq.n	8001cf2 <HAL_DMA_Abort+0x58a>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a2c      	ldr	r2, [pc, #176]	@ (8001da0 <HAL_DMA_Abort+0x638>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d101      	bne.n	8001cf6 <HAL_DMA_Abort+0x58e>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <HAL_DMA_Abort+0x590>
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d015      	beq.n	8001d28 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001d04:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d1c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001d26:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40020010 	.word	0x40020010
 8001d48:	40020028 	.word	0x40020028
 8001d4c:	40020040 	.word	0x40020040
 8001d50:	40020058 	.word	0x40020058
 8001d54:	40020070 	.word	0x40020070
 8001d58:	40020088 	.word	0x40020088
 8001d5c:	400200a0 	.word	0x400200a0
 8001d60:	400200b8 	.word	0x400200b8
 8001d64:	40020410 	.word	0x40020410
 8001d68:	40020428 	.word	0x40020428
 8001d6c:	40020440 	.word	0x40020440
 8001d70:	40020458 	.word	0x40020458
 8001d74:	40020470 	.word	0x40020470
 8001d78:	40020488 	.word	0x40020488
 8001d7c:	400204a0 	.word	0x400204a0
 8001d80:	400204b8 	.word	0x400204b8
 8001d84:	58025408 	.word	0x58025408
 8001d88:	5802541c 	.word	0x5802541c
 8001d8c:	58025430 	.word	0x58025430
 8001d90:	58025444 	.word	0x58025444
 8001d94:	58025458 	.word	0x58025458
 8001d98:	5802546c 	.word	0x5802546c
 8001d9c:	58025480 	.word	0x58025480
 8001da0:	58025494 	.word	0x58025494

08001da4 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	@ 0x28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	460b      	mov	r3, r1
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	76fb      	strb	r3, [r7, #27]
  uint32_t cpltlevel_mask;
  uint32_t tickstart = HAL_GetTick();
 8001db6:	f7fe fee7 	bl	8000b88 <HAL_GetTick>
 8001dba:	6178      	str	r0, [r7, #20]
  __IO uint32_t *isr_reg;
  /* IT clear flag register */
  __IO uint32_t *ifcr_reg;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_DMA_PollForTransfer+0x22>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e374      	b.n	80024b0 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d008      	beq.n	8001de4 <HAL_DMA_PollForTransfer+0x40>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2280      	movs	r2, #128	@ 0x80
 8001dd6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e365      	b.n	80024b0 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a7b      	ldr	r2, [pc, #492]	@ (8001fd8 <HAL_DMA_PollForTransfer+0x234>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d04a      	beq.n	8001e84 <HAL_DMA_PollForTransfer+0xe0>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a7a      	ldr	r2, [pc, #488]	@ (8001fdc <HAL_DMA_PollForTransfer+0x238>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d045      	beq.n	8001e84 <HAL_DMA_PollForTransfer+0xe0>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a78      	ldr	r2, [pc, #480]	@ (8001fe0 <HAL_DMA_PollForTransfer+0x23c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d040      	beq.n	8001e84 <HAL_DMA_PollForTransfer+0xe0>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a77      	ldr	r2, [pc, #476]	@ (8001fe4 <HAL_DMA_PollForTransfer+0x240>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d03b      	beq.n	8001e84 <HAL_DMA_PollForTransfer+0xe0>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a75      	ldr	r2, [pc, #468]	@ (8001fe8 <HAL_DMA_PollForTransfer+0x244>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d036      	beq.n	8001e84 <HAL_DMA_PollForTransfer+0xe0>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a74      	ldr	r2, [pc, #464]	@ (8001fec <HAL_DMA_PollForTransfer+0x248>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d031      	beq.n	8001e84 <HAL_DMA_PollForTransfer+0xe0>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a72      	ldr	r2, [pc, #456]	@ (8001ff0 <HAL_DMA_PollForTransfer+0x24c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d02c      	beq.n	8001e84 <HAL_DMA_PollForTransfer+0xe0>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a71      	ldr	r2, [pc, #452]	@ (8001ff4 <HAL_DMA_PollForTransfer+0x250>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d027      	beq.n	8001e84 <HAL_DMA_PollForTransfer+0xe0>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a6f      	ldr	r2, [pc, #444]	@ (8001ff8 <HAL_DMA_PollForTransfer+0x254>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d022      	beq.n	8001e84 <HAL_DMA_PollForTransfer+0xe0>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a6e      	ldr	r2, [pc, #440]	@ (8001ffc <HAL_DMA_PollForTransfer+0x258>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d01d      	beq.n	8001e84 <HAL_DMA_PollForTransfer+0xe0>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a6c      	ldr	r2, [pc, #432]	@ (8002000 <HAL_DMA_PollForTransfer+0x25c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d018      	beq.n	8001e84 <HAL_DMA_PollForTransfer+0xe0>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a6b      	ldr	r2, [pc, #428]	@ (8002004 <HAL_DMA_PollForTransfer+0x260>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d013      	beq.n	8001e84 <HAL_DMA_PollForTransfer+0xe0>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a69      	ldr	r2, [pc, #420]	@ (8002008 <HAL_DMA_PollForTransfer+0x264>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d00e      	beq.n	8001e84 <HAL_DMA_PollForTransfer+0xe0>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a68      	ldr	r2, [pc, #416]	@ (800200c <HAL_DMA_PollForTransfer+0x268>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d009      	beq.n	8001e84 <HAL_DMA_PollForTransfer+0xe0>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a66      	ldr	r2, [pc, #408]	@ (8002010 <HAL_DMA_PollForTransfer+0x26c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d004      	beq.n	8001e84 <HAL_DMA_PollForTransfer+0xe0>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a65      	ldr	r2, [pc, #404]	@ (8002014 <HAL_DMA_PollForTransfer+0x270>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d101      	bne.n	8001e88 <HAL_DMA_PollForTransfer+0xe4>
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <HAL_DMA_PollForTransfer+0xe6>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d028      	beq.n	8001ee0 <HAL_DMA_PollForTransfer+0x13c>
  {
    /* Polling mode not supported in circular mode and double buffering mode */
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d005      	beq.n	8001ea8 <HAL_DMA_PollForTransfer+0x104>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ea2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e303      	b.n	80024b0 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8001ea8:	7afb      	ldrb	r3, [r7, #11]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d108      	bne.n	8001ec0 <HAL_DMA_PollForTransfer+0x11c>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb2:	f003 031f 	and.w	r3, r3, #31
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ebe:	e007      	b.n	8001ed0 <HAL_DMA_PollForTransfer+0x12c>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	2210      	movs	r2, #16
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed4:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eda:	3308      	adds	r3, #8
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	e1d5      	b.n	800228c <HAL_DMA_PollForTransfer+0x4e8>
  }
  else /* BDMA channel */
  {
    /* Polling mode not supported in circular mode */
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0320 	and.w	r3, r3, #32
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d005      	beq.n	8001efa <HAL_DMA_PollForTransfer+0x156>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ef4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e2da      	b.n	80024b0 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8001efa:	7afb      	ldrb	r3, [r7, #11]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d108      	bne.n	8001f12 <HAL_DMA_PollForTransfer+0x16e>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	2202      	movs	r2, #2
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f10:	e007      	b.n	8001f22 <HAL_DMA_PollForTransfer+0x17e>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f26:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	61fb      	str	r3, [r7, #28]
  }

  while(((*isr_reg) & cpltlevel_mask) == 0U)
 8001f30:	e1ac      	b.n	800228c <HAL_DMA_PollForTransfer+0x4e8>
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a28      	ldr	r2, [pc, #160]	@ (8001fd8 <HAL_DMA_PollForTransfer+0x234>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d04a      	beq.n	8001fd2 <HAL_DMA_PollForTransfer+0x22e>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a26      	ldr	r2, [pc, #152]	@ (8001fdc <HAL_DMA_PollForTransfer+0x238>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d045      	beq.n	8001fd2 <HAL_DMA_PollForTransfer+0x22e>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a25      	ldr	r2, [pc, #148]	@ (8001fe0 <HAL_DMA_PollForTransfer+0x23c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d040      	beq.n	8001fd2 <HAL_DMA_PollForTransfer+0x22e>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a23      	ldr	r2, [pc, #140]	@ (8001fe4 <HAL_DMA_PollForTransfer+0x240>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d03b      	beq.n	8001fd2 <HAL_DMA_PollForTransfer+0x22e>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a22      	ldr	r2, [pc, #136]	@ (8001fe8 <HAL_DMA_PollForTransfer+0x244>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d036      	beq.n	8001fd2 <HAL_DMA_PollForTransfer+0x22e>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a20      	ldr	r2, [pc, #128]	@ (8001fec <HAL_DMA_PollForTransfer+0x248>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d031      	beq.n	8001fd2 <HAL_DMA_PollForTransfer+0x22e>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff0 <HAL_DMA_PollForTransfer+0x24c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d02c      	beq.n	8001fd2 <HAL_DMA_PollForTransfer+0x22e>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff4 <HAL_DMA_PollForTransfer+0x250>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d027      	beq.n	8001fd2 <HAL_DMA_PollForTransfer+0x22e>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff8 <HAL_DMA_PollForTransfer+0x254>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d022      	beq.n	8001fd2 <HAL_DMA_PollForTransfer+0x22e>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1a      	ldr	r2, [pc, #104]	@ (8001ffc <HAL_DMA_PollForTransfer+0x258>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d01d      	beq.n	8001fd2 <HAL_DMA_PollForTransfer+0x22e>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a19      	ldr	r2, [pc, #100]	@ (8002000 <HAL_DMA_PollForTransfer+0x25c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d018      	beq.n	8001fd2 <HAL_DMA_PollForTransfer+0x22e>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a17      	ldr	r2, [pc, #92]	@ (8002004 <HAL_DMA_PollForTransfer+0x260>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d013      	beq.n	8001fd2 <HAL_DMA_PollForTransfer+0x22e>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a16      	ldr	r2, [pc, #88]	@ (8002008 <HAL_DMA_PollForTransfer+0x264>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d00e      	beq.n	8001fd2 <HAL_DMA_PollForTransfer+0x22e>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a14      	ldr	r2, [pc, #80]	@ (800200c <HAL_DMA_PollForTransfer+0x268>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d009      	beq.n	8001fd2 <HAL_DMA_PollForTransfer+0x22e>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a13      	ldr	r2, [pc, #76]	@ (8002010 <HAL_DMA_PollForTransfer+0x26c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d004      	beq.n	8001fd2 <HAL_DMA_PollForTransfer+0x22e>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a11      	ldr	r2, [pc, #68]	@ (8002014 <HAL_DMA_PollForTransfer+0x270>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d122      	bne.n	8002018 <HAL_DMA_PollForTransfer+0x274>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e021      	b.n	800201a <HAL_DMA_PollForTransfer+0x276>
 8001fd6:	bf00      	nop
 8001fd8:	40020010 	.word	0x40020010
 8001fdc:	40020028 	.word	0x40020028
 8001fe0:	40020040 	.word	0x40020040
 8001fe4:	40020058 	.word	0x40020058
 8001fe8:	40020070 	.word	0x40020070
 8001fec:	40020088 	.word	0x40020088
 8001ff0:	400200a0 	.word	0x400200a0
 8001ff4:	400200b8 	.word	0x400200b8
 8001ff8:	40020410 	.word	0x40020410
 8001ffc:	40020428 	.word	0x40020428
 8002000:	40020440 	.word	0x40020440
 8002004:	40020458 	.word	0x40020458
 8002008:	40020470 	.word	0x40020470
 800200c:	40020488 	.word	0x40020488
 8002010:	400204a0 	.word	0x400204a0
 8002014:	400204b8 	.word	0x400204b8
 8002018:	2300      	movs	r3, #0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d057      	beq.n	80020ce <HAL_DMA_PollForTransfer+0x32a>
    {
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	fa22 f303 	lsr.w	r3, r2, r3
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00d      	beq.n	8002052 <HAL_DMA_PollForTransfer+0x2ae>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203a:	f043 0202 	orr.w	r2, r3, #2
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the FIFO error flag */
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	2201      	movs	r2, #1
 800204c:	409a      	lsls	r2, r3
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205a:	f003 031f 	and.w	r3, r3, #31
 800205e:	2104      	movs	r1, #4
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00d      	beq.n	8002086 <HAL_DMA_PollForTransfer+0x2e2>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800206e:	f043 0204 	orr.w	r2, r3, #4
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the Direct Mode error flag */
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800207a:	f003 031f 	and.w	r3, r3, #31
 800207e:	2204      	movs	r2, #4
 8002080:	409a      	lsls	r2, r3
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800208e:	f003 031f 	and.w	r3, r3, #31
 8002092:	2108      	movs	r1, #8
 8002094:	fa01 f303 	lsl.w	r3, r1, r3
 8002098:	4013      	ands	r3, r2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d038      	beq.n	8002110 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a2:	f043 0201 	orr.w	r2, r3, #1
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the transfer error flag */
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ae:	f003 031f 	and.w	r3, r3, #31
 80020b2:	2208      	movs	r2, #8
 80020b4:	409a      	lsls	r2, r3
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e1f0      	b.n	80024b0 <HAL_DMA_PollForTransfer+0x70c>
      }
    }
    else /* BDMA channel */
    {
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d6:	f003 031f 	and.w	r3, r3, #31
 80020da:	2108      	movs	r1, #8
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d014      	beq.n	8002110 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* When a DMA transfer error occurs */
        /* A hardware clear of its EN bits is performed */
        /* Clear all flags */
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	2201      	movs	r2, #1
 80020f0:	409a      	lsls	r2, r3
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	601a      	str	r2, [r3, #0]

        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2201      	movs	r2, #1
 80020fa:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e1cf      	b.n	80024b0 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002116:	d012      	beq.n	800213e <HAL_DMA_PollForTransfer+0x39a>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002118:	f7fe fd36 	bl	8000b88 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	429a      	cmp	r2, r3
 8002126:	d302      	bcc.n	800212e <HAL_DMA_PollForTransfer+0x38a>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d107      	bne.n	800213e <HAL_DMA_PollForTransfer+0x39a>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2220      	movs	r2, #32
 8002132:	655a      	str	r2, [r3, #84]	@ 0x54

        /* if timeout then abort the current transfer */
        /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
        (void) HAL_DMA_Abort(hdma);
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7ff fb17 	bl	8001768 <HAL_DMA_Abort>
              - Clear the transfer error flags
              - Unlock
              - Set the State
          */

        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e1b8      	b.n	80024b0 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a81      	ldr	r2, [pc, #516]	@ (8002348 <HAL_DMA_PollForTransfer+0x5a4>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d072      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a7f      	ldr	r2, [pc, #508]	@ (800234c <HAL_DMA_PollForTransfer+0x5a8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d06d      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a7e      	ldr	r2, [pc, #504]	@ (8002350 <HAL_DMA_PollForTransfer+0x5ac>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d068      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a7c      	ldr	r2, [pc, #496]	@ (8002354 <HAL_DMA_PollForTransfer+0x5b0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d063      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a7b      	ldr	r2, [pc, #492]	@ (8002358 <HAL_DMA_PollForTransfer+0x5b4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d05e      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a79      	ldr	r2, [pc, #484]	@ (800235c <HAL_DMA_PollForTransfer+0x5b8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d059      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a78      	ldr	r2, [pc, #480]	@ (8002360 <HAL_DMA_PollForTransfer+0x5bc>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d054      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a76      	ldr	r2, [pc, #472]	@ (8002364 <HAL_DMA_PollForTransfer+0x5c0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d04f      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a75      	ldr	r2, [pc, #468]	@ (8002368 <HAL_DMA_PollForTransfer+0x5c4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d04a      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a73      	ldr	r2, [pc, #460]	@ (800236c <HAL_DMA_PollForTransfer+0x5c8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d045      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a72      	ldr	r2, [pc, #456]	@ (8002370 <HAL_DMA_PollForTransfer+0x5cc>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d040      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a70      	ldr	r2, [pc, #448]	@ (8002374 <HAL_DMA_PollForTransfer+0x5d0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d03b      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a6f      	ldr	r2, [pc, #444]	@ (8002378 <HAL_DMA_PollForTransfer+0x5d4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d036      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a6d      	ldr	r2, [pc, #436]	@ (800237c <HAL_DMA_PollForTransfer+0x5d8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d031      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a6c      	ldr	r2, [pc, #432]	@ (8002380 <HAL_DMA_PollForTransfer+0x5dc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d02c      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a6a      	ldr	r2, [pc, #424]	@ (8002384 <HAL_DMA_PollForTransfer+0x5e0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d027      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a69      	ldr	r2, [pc, #420]	@ (8002388 <HAL_DMA_PollForTransfer+0x5e4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d022      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a67      	ldr	r2, [pc, #412]	@ (800238c <HAL_DMA_PollForTransfer+0x5e8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01d      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a66      	ldr	r2, [pc, #408]	@ (8002390 <HAL_DMA_PollForTransfer+0x5ec>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d018      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a64      	ldr	r2, [pc, #400]	@ (8002394 <HAL_DMA_PollForTransfer+0x5f0>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d013      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a63      	ldr	r2, [pc, #396]	@ (8002398 <HAL_DMA_PollForTransfer+0x5f4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d00e      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a61      	ldr	r2, [pc, #388]	@ (800239c <HAL_DMA_PollForTransfer+0x5f8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d009      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a60      	ldr	r2, [pc, #384]	@ (80023a0 <HAL_DMA_PollForTransfer+0x5fc>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d004      	beq.n	800222e <HAL_DMA_PollForTransfer+0x48a>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a5e      	ldr	r2, [pc, #376]	@ (80023a4 <HAL_DMA_PollForTransfer+0x600>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d101      	bne.n	8002232 <HAL_DMA_PollForTransfer+0x48e>
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <HAL_DMA_PollForTransfer+0x490>
 8002232:	2300      	movs	r3, #0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d029      	beq.n	800228c <HAL_DMA_PollForTransfer+0x4e8>
    {
      /* Check for DMAMUX Request generator (if used) overrun status */
      if(hdma->DMAmuxRequestGen != 0U)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800223c:	2b00      	cmp	r3, #0
 800223e:	d012      	beq.n	8002266 <HAL_DMA_PollForTransfer+0x4c2>
      {
        /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800224a:	4013      	ands	r3, r2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_DMA_PollForTransfer+0x4c2>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002258:	605a      	str	r2, [r3, #4]

          /* Update error code */
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }

      /* Check for DMAMUX Synchronization overrun */
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002270:	4013      	ands	r3, r2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_DMA_PollForTransfer+0x4e8>
      {
        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800227e:	605a      	str	r2, [r3, #4]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002284:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	655a      	str	r2, [r3, #84]	@ 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002292:	4013      	ands	r3, r2
 8002294:	2b00      	cmp	r3, #0
 8002296:	f43f ae4c 	beq.w	8001f32 <HAL_DMA_PollForTransfer+0x18e>
    }
  }


  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800229a:	7afb      	ldrb	r3, [r7, #11]
 800229c:	2b00      	cmp	r3, #0
 800229e:	f040 80a0 	bne.w	80023e2 <HAL_DMA_PollForTransfer+0x63e>
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a28      	ldr	r2, [pc, #160]	@ (8002348 <HAL_DMA_PollForTransfer+0x5a4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d04a      	beq.n	8002342 <HAL_DMA_PollForTransfer+0x59e>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a26      	ldr	r2, [pc, #152]	@ (800234c <HAL_DMA_PollForTransfer+0x5a8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d045      	beq.n	8002342 <HAL_DMA_PollForTransfer+0x59e>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a25      	ldr	r2, [pc, #148]	@ (8002350 <HAL_DMA_PollForTransfer+0x5ac>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d040      	beq.n	8002342 <HAL_DMA_PollForTransfer+0x59e>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a23      	ldr	r2, [pc, #140]	@ (8002354 <HAL_DMA_PollForTransfer+0x5b0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d03b      	beq.n	8002342 <HAL_DMA_PollForTransfer+0x59e>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a22      	ldr	r2, [pc, #136]	@ (8002358 <HAL_DMA_PollForTransfer+0x5b4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d036      	beq.n	8002342 <HAL_DMA_PollForTransfer+0x59e>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a20      	ldr	r2, [pc, #128]	@ (800235c <HAL_DMA_PollForTransfer+0x5b8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d031      	beq.n	8002342 <HAL_DMA_PollForTransfer+0x59e>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002360 <HAL_DMA_PollForTransfer+0x5bc>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d02c      	beq.n	8002342 <HAL_DMA_PollForTransfer+0x59e>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002364 <HAL_DMA_PollForTransfer+0x5c0>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d027      	beq.n	8002342 <HAL_DMA_PollForTransfer+0x59e>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002368 <HAL_DMA_PollForTransfer+0x5c4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d022      	beq.n	8002342 <HAL_DMA_PollForTransfer+0x59e>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a1a      	ldr	r2, [pc, #104]	@ (800236c <HAL_DMA_PollForTransfer+0x5c8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d01d      	beq.n	8002342 <HAL_DMA_PollForTransfer+0x59e>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a19      	ldr	r2, [pc, #100]	@ (8002370 <HAL_DMA_PollForTransfer+0x5cc>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d018      	beq.n	8002342 <HAL_DMA_PollForTransfer+0x59e>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a17      	ldr	r2, [pc, #92]	@ (8002374 <HAL_DMA_PollForTransfer+0x5d0>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <HAL_DMA_PollForTransfer+0x59e>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a16      	ldr	r2, [pc, #88]	@ (8002378 <HAL_DMA_PollForTransfer+0x5d4>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d00e      	beq.n	8002342 <HAL_DMA_PollForTransfer+0x59e>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a14      	ldr	r2, [pc, #80]	@ (800237c <HAL_DMA_PollForTransfer+0x5d8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d009      	beq.n	8002342 <HAL_DMA_PollForTransfer+0x59e>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a13      	ldr	r2, [pc, #76]	@ (8002380 <HAL_DMA_PollForTransfer+0x5dc>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d004      	beq.n	8002342 <HAL_DMA_PollForTransfer+0x59e>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a11      	ldr	r2, [pc, #68]	@ (8002384 <HAL_DMA_PollForTransfer+0x5e0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d132      	bne.n	80023a8 <HAL_DMA_PollForTransfer+0x604>
 8002342:	2301      	movs	r3, #1
 8002344:	e031      	b.n	80023aa <HAL_DMA_PollForTransfer+0x606>
 8002346:	bf00      	nop
 8002348:	40020010 	.word	0x40020010
 800234c:	40020028 	.word	0x40020028
 8002350:	40020040 	.word	0x40020040
 8002354:	40020058 	.word	0x40020058
 8002358:	40020070 	.word	0x40020070
 800235c:	40020088 	.word	0x40020088
 8002360:	400200a0 	.word	0x400200a0
 8002364:	400200b8 	.word	0x400200b8
 8002368:	40020410 	.word	0x40020410
 800236c:	40020428 	.word	0x40020428
 8002370:	40020440 	.word	0x40020440
 8002374:	40020458 	.word	0x40020458
 8002378:	40020470 	.word	0x40020470
 800237c:	40020488 	.word	0x40020488
 8002380:	400204a0 	.word	0x400204a0
 8002384:	400204b8 	.word	0x400204b8
 8002388:	58025408 	.word	0x58025408
 800238c:	5802541c 	.word	0x5802541c
 8002390:	58025430 	.word	0x58025430
 8002394:	58025444 	.word	0x58025444
 8002398:	58025458 	.word	0x58025458
 800239c:	5802546c 	.word	0x5802546c
 80023a0:	58025480 	.word	0x58025480
 80023a4:	58025494 	.word	0x58025494
 80023a8:	2300      	movs	r3, #0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d008      	beq.n	80023c0 <HAL_DMA_PollForTransfer+0x61c>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	2230      	movs	r2, #48	@ 0x30
 80023b8:	409a      	lsls	r2, r3
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	e007      	b.n	80023d0 <HAL_DMA_PollForTransfer+0x62c>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	2202      	movs	r2, #2
 80023ca:	409a      	lsls	r2, r3
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	601a      	str	r2, [r3, #0]
    }

    hdma->State = HAL_DMA_STATE_READY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80023e0:	e065      	b.n	80024ae <HAL_DMA_PollForTransfer+0x70a>
  }
  else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a34      	ldr	r2, [pc, #208]	@ (80024b8 <HAL_DMA_PollForTransfer+0x714>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d04a      	beq.n	8002482 <HAL_DMA_PollForTransfer+0x6de>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a32      	ldr	r2, [pc, #200]	@ (80024bc <HAL_DMA_PollForTransfer+0x718>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d045      	beq.n	8002482 <HAL_DMA_PollForTransfer+0x6de>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a31      	ldr	r2, [pc, #196]	@ (80024c0 <HAL_DMA_PollForTransfer+0x71c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d040      	beq.n	8002482 <HAL_DMA_PollForTransfer+0x6de>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a2f      	ldr	r2, [pc, #188]	@ (80024c4 <HAL_DMA_PollForTransfer+0x720>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d03b      	beq.n	8002482 <HAL_DMA_PollForTransfer+0x6de>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a2e      	ldr	r2, [pc, #184]	@ (80024c8 <HAL_DMA_PollForTransfer+0x724>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d036      	beq.n	8002482 <HAL_DMA_PollForTransfer+0x6de>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a2c      	ldr	r2, [pc, #176]	@ (80024cc <HAL_DMA_PollForTransfer+0x728>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d031      	beq.n	8002482 <HAL_DMA_PollForTransfer+0x6de>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a2b      	ldr	r2, [pc, #172]	@ (80024d0 <HAL_DMA_PollForTransfer+0x72c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d02c      	beq.n	8002482 <HAL_DMA_PollForTransfer+0x6de>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a29      	ldr	r2, [pc, #164]	@ (80024d4 <HAL_DMA_PollForTransfer+0x730>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d027      	beq.n	8002482 <HAL_DMA_PollForTransfer+0x6de>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a28      	ldr	r2, [pc, #160]	@ (80024d8 <HAL_DMA_PollForTransfer+0x734>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d022      	beq.n	8002482 <HAL_DMA_PollForTransfer+0x6de>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a26      	ldr	r2, [pc, #152]	@ (80024dc <HAL_DMA_PollForTransfer+0x738>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d01d      	beq.n	8002482 <HAL_DMA_PollForTransfer+0x6de>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a25      	ldr	r2, [pc, #148]	@ (80024e0 <HAL_DMA_PollForTransfer+0x73c>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d018      	beq.n	8002482 <HAL_DMA_PollForTransfer+0x6de>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a23      	ldr	r2, [pc, #140]	@ (80024e4 <HAL_DMA_PollForTransfer+0x740>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d013      	beq.n	8002482 <HAL_DMA_PollForTransfer+0x6de>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a22      	ldr	r2, [pc, #136]	@ (80024e8 <HAL_DMA_PollForTransfer+0x744>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d00e      	beq.n	8002482 <HAL_DMA_PollForTransfer+0x6de>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a20      	ldr	r2, [pc, #128]	@ (80024ec <HAL_DMA_PollForTransfer+0x748>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d009      	beq.n	8002482 <HAL_DMA_PollForTransfer+0x6de>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a1f      	ldr	r2, [pc, #124]	@ (80024f0 <HAL_DMA_PollForTransfer+0x74c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d004      	beq.n	8002482 <HAL_DMA_PollForTransfer+0x6de>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1d      	ldr	r2, [pc, #116]	@ (80024f4 <HAL_DMA_PollForTransfer+0x750>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d101      	bne.n	8002486 <HAL_DMA_PollForTransfer+0x6e2>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <HAL_DMA_PollForTransfer+0x6e4>
 8002486:	2300      	movs	r3, #0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_DMA_PollForTransfer+0x6fa>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	2210      	movs	r2, #16
 8002496:	409a      	lsls	r2, r3
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	e007      	b.n	80024ae <HAL_DMA_PollForTransfer+0x70a>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a2:	f003 031f 	and.w	r3, r3, #31
 80024a6:	2204      	movs	r2, #4
 80024a8:	409a      	lsls	r2, r3
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 80024ae:	7efb      	ldrb	r3, [r7, #27]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3728      	adds	r7, #40	@ 0x28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40020010 	.word	0x40020010
 80024bc:	40020028 	.word	0x40020028
 80024c0:	40020040 	.word	0x40020040
 80024c4:	40020058 	.word	0x40020058
 80024c8:	40020070 	.word	0x40020070
 80024cc:	40020088 	.word	0x40020088
 80024d0:	400200a0 	.word	0x400200a0
 80024d4:	400200b8 	.word	0x400200b8
 80024d8:	40020410 	.word	0x40020410
 80024dc:	40020428 	.word	0x40020428
 80024e0:	40020440 	.word	0x40020440
 80024e4:	40020458 	.word	0x40020458
 80024e8:	40020470 	.word	0x40020470
 80024ec:	40020488 	.word	0x40020488
 80024f0:	400204a0 	.word	0x400204a0
 80024f4:	400204b8 	.word	0x400204b8

080024f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002510:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a7f      	ldr	r2, [pc, #508]	@ (8002714 <DMA_SetConfig+0x21c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d072      	beq.n	8002602 <DMA_SetConfig+0x10a>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a7d      	ldr	r2, [pc, #500]	@ (8002718 <DMA_SetConfig+0x220>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d06d      	beq.n	8002602 <DMA_SetConfig+0x10a>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a7c      	ldr	r2, [pc, #496]	@ (800271c <DMA_SetConfig+0x224>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d068      	beq.n	8002602 <DMA_SetConfig+0x10a>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a7a      	ldr	r2, [pc, #488]	@ (8002720 <DMA_SetConfig+0x228>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d063      	beq.n	8002602 <DMA_SetConfig+0x10a>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a79      	ldr	r2, [pc, #484]	@ (8002724 <DMA_SetConfig+0x22c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d05e      	beq.n	8002602 <DMA_SetConfig+0x10a>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a77      	ldr	r2, [pc, #476]	@ (8002728 <DMA_SetConfig+0x230>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d059      	beq.n	8002602 <DMA_SetConfig+0x10a>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a76      	ldr	r2, [pc, #472]	@ (800272c <DMA_SetConfig+0x234>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d054      	beq.n	8002602 <DMA_SetConfig+0x10a>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a74      	ldr	r2, [pc, #464]	@ (8002730 <DMA_SetConfig+0x238>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d04f      	beq.n	8002602 <DMA_SetConfig+0x10a>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a73      	ldr	r2, [pc, #460]	@ (8002734 <DMA_SetConfig+0x23c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d04a      	beq.n	8002602 <DMA_SetConfig+0x10a>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a71      	ldr	r2, [pc, #452]	@ (8002738 <DMA_SetConfig+0x240>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d045      	beq.n	8002602 <DMA_SetConfig+0x10a>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a70      	ldr	r2, [pc, #448]	@ (800273c <DMA_SetConfig+0x244>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d040      	beq.n	8002602 <DMA_SetConfig+0x10a>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a6e      	ldr	r2, [pc, #440]	@ (8002740 <DMA_SetConfig+0x248>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d03b      	beq.n	8002602 <DMA_SetConfig+0x10a>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a6d      	ldr	r2, [pc, #436]	@ (8002744 <DMA_SetConfig+0x24c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d036      	beq.n	8002602 <DMA_SetConfig+0x10a>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a6b      	ldr	r2, [pc, #428]	@ (8002748 <DMA_SetConfig+0x250>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d031      	beq.n	8002602 <DMA_SetConfig+0x10a>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a6a      	ldr	r2, [pc, #424]	@ (800274c <DMA_SetConfig+0x254>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d02c      	beq.n	8002602 <DMA_SetConfig+0x10a>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a68      	ldr	r2, [pc, #416]	@ (8002750 <DMA_SetConfig+0x258>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d027      	beq.n	8002602 <DMA_SetConfig+0x10a>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a67      	ldr	r2, [pc, #412]	@ (8002754 <DMA_SetConfig+0x25c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d022      	beq.n	8002602 <DMA_SetConfig+0x10a>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a65      	ldr	r2, [pc, #404]	@ (8002758 <DMA_SetConfig+0x260>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d01d      	beq.n	8002602 <DMA_SetConfig+0x10a>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a64      	ldr	r2, [pc, #400]	@ (800275c <DMA_SetConfig+0x264>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d018      	beq.n	8002602 <DMA_SetConfig+0x10a>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a62      	ldr	r2, [pc, #392]	@ (8002760 <DMA_SetConfig+0x268>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <DMA_SetConfig+0x10a>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a61      	ldr	r2, [pc, #388]	@ (8002764 <DMA_SetConfig+0x26c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d00e      	beq.n	8002602 <DMA_SetConfig+0x10a>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a5f      	ldr	r2, [pc, #380]	@ (8002768 <DMA_SetConfig+0x270>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d009      	beq.n	8002602 <DMA_SetConfig+0x10a>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a5e      	ldr	r2, [pc, #376]	@ (800276c <DMA_SetConfig+0x274>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d004      	beq.n	8002602 <DMA_SetConfig+0x10a>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a5c      	ldr	r2, [pc, #368]	@ (8002770 <DMA_SetConfig+0x278>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <DMA_SetConfig+0x10e>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <DMA_SetConfig+0x110>
 8002606:	2300      	movs	r3, #0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00d      	beq.n	8002628 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002614:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800261a:	2b00      	cmp	r3, #0
 800261c:	d004      	beq.n	8002628 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002626:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a39      	ldr	r2, [pc, #228]	@ (8002714 <DMA_SetConfig+0x21c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d04a      	beq.n	80026c8 <DMA_SetConfig+0x1d0>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a38      	ldr	r2, [pc, #224]	@ (8002718 <DMA_SetConfig+0x220>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d045      	beq.n	80026c8 <DMA_SetConfig+0x1d0>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a36      	ldr	r2, [pc, #216]	@ (800271c <DMA_SetConfig+0x224>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d040      	beq.n	80026c8 <DMA_SetConfig+0x1d0>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a35      	ldr	r2, [pc, #212]	@ (8002720 <DMA_SetConfig+0x228>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d03b      	beq.n	80026c8 <DMA_SetConfig+0x1d0>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a33      	ldr	r2, [pc, #204]	@ (8002724 <DMA_SetConfig+0x22c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d036      	beq.n	80026c8 <DMA_SetConfig+0x1d0>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a32      	ldr	r2, [pc, #200]	@ (8002728 <DMA_SetConfig+0x230>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d031      	beq.n	80026c8 <DMA_SetConfig+0x1d0>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a30      	ldr	r2, [pc, #192]	@ (800272c <DMA_SetConfig+0x234>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d02c      	beq.n	80026c8 <DMA_SetConfig+0x1d0>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a2f      	ldr	r2, [pc, #188]	@ (8002730 <DMA_SetConfig+0x238>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d027      	beq.n	80026c8 <DMA_SetConfig+0x1d0>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a2d      	ldr	r2, [pc, #180]	@ (8002734 <DMA_SetConfig+0x23c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d022      	beq.n	80026c8 <DMA_SetConfig+0x1d0>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a2c      	ldr	r2, [pc, #176]	@ (8002738 <DMA_SetConfig+0x240>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d01d      	beq.n	80026c8 <DMA_SetConfig+0x1d0>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a2a      	ldr	r2, [pc, #168]	@ (800273c <DMA_SetConfig+0x244>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d018      	beq.n	80026c8 <DMA_SetConfig+0x1d0>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a29      	ldr	r2, [pc, #164]	@ (8002740 <DMA_SetConfig+0x248>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d013      	beq.n	80026c8 <DMA_SetConfig+0x1d0>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a27      	ldr	r2, [pc, #156]	@ (8002744 <DMA_SetConfig+0x24c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00e      	beq.n	80026c8 <DMA_SetConfig+0x1d0>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a26      	ldr	r2, [pc, #152]	@ (8002748 <DMA_SetConfig+0x250>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d009      	beq.n	80026c8 <DMA_SetConfig+0x1d0>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a24      	ldr	r2, [pc, #144]	@ (800274c <DMA_SetConfig+0x254>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d004      	beq.n	80026c8 <DMA_SetConfig+0x1d0>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a23      	ldr	r2, [pc, #140]	@ (8002750 <DMA_SetConfig+0x258>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d101      	bne.n	80026cc <DMA_SetConfig+0x1d4>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <DMA_SetConfig+0x1d6>
 80026cc:	2300      	movs	r3, #0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d059      	beq.n	8002786 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	223f      	movs	r2, #63	@ 0x3f
 80026dc:	409a      	lsls	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80026f0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b40      	cmp	r3, #64	@ 0x40
 8002700:	d138      	bne.n	8002774 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002712:	e086      	b.n	8002822 <DMA_SetConfig+0x32a>
 8002714:	40020010 	.word	0x40020010
 8002718:	40020028 	.word	0x40020028
 800271c:	40020040 	.word	0x40020040
 8002720:	40020058 	.word	0x40020058
 8002724:	40020070 	.word	0x40020070
 8002728:	40020088 	.word	0x40020088
 800272c:	400200a0 	.word	0x400200a0
 8002730:	400200b8 	.word	0x400200b8
 8002734:	40020410 	.word	0x40020410
 8002738:	40020428 	.word	0x40020428
 800273c:	40020440 	.word	0x40020440
 8002740:	40020458 	.word	0x40020458
 8002744:	40020470 	.word	0x40020470
 8002748:	40020488 	.word	0x40020488
 800274c:	400204a0 	.word	0x400204a0
 8002750:	400204b8 	.word	0x400204b8
 8002754:	58025408 	.word	0x58025408
 8002758:	5802541c 	.word	0x5802541c
 800275c:	58025430 	.word	0x58025430
 8002760:	58025444 	.word	0x58025444
 8002764:	58025458 	.word	0x58025458
 8002768:	5802546c 	.word	0x5802546c
 800276c:	58025480 	.word	0x58025480
 8002770:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	60da      	str	r2, [r3, #12]
}
 8002784:	e04d      	b.n	8002822 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a29      	ldr	r2, [pc, #164]	@ (8002830 <DMA_SetConfig+0x338>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d022      	beq.n	80027d6 <DMA_SetConfig+0x2de>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a27      	ldr	r2, [pc, #156]	@ (8002834 <DMA_SetConfig+0x33c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d01d      	beq.n	80027d6 <DMA_SetConfig+0x2de>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a26      	ldr	r2, [pc, #152]	@ (8002838 <DMA_SetConfig+0x340>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d018      	beq.n	80027d6 <DMA_SetConfig+0x2de>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a24      	ldr	r2, [pc, #144]	@ (800283c <DMA_SetConfig+0x344>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d013      	beq.n	80027d6 <DMA_SetConfig+0x2de>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a23      	ldr	r2, [pc, #140]	@ (8002840 <DMA_SetConfig+0x348>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d00e      	beq.n	80027d6 <DMA_SetConfig+0x2de>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a21      	ldr	r2, [pc, #132]	@ (8002844 <DMA_SetConfig+0x34c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d009      	beq.n	80027d6 <DMA_SetConfig+0x2de>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a20      	ldr	r2, [pc, #128]	@ (8002848 <DMA_SetConfig+0x350>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d004      	beq.n	80027d6 <DMA_SetConfig+0x2de>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a1e      	ldr	r2, [pc, #120]	@ (800284c <DMA_SetConfig+0x354>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d101      	bne.n	80027da <DMA_SetConfig+0x2e2>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <DMA_SetConfig+0x2e4>
 80027da:	2300      	movs	r3, #0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d020      	beq.n	8002822 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e4:	f003 031f 	and.w	r3, r3, #31
 80027e8:	2201      	movs	r2, #1
 80027ea:	409a      	lsls	r2, r3
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b40      	cmp	r3, #64	@ 0x40
 80027fe:	d108      	bne.n	8002812 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	60da      	str	r2, [r3, #12]
}
 8002810:	e007      	b.n	8002822 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	60da      	str	r2, [r3, #12]
}
 8002822:	bf00      	nop
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	58025408 	.word	0x58025408
 8002834:	5802541c 	.word	0x5802541c
 8002838:	58025430 	.word	0x58025430
 800283c:	58025444 	.word	0x58025444
 8002840:	58025458 	.word	0x58025458
 8002844:	5802546c 	.word	0x5802546c
 8002848:	58025480 	.word	0x58025480
 800284c:	58025494 	.word	0x58025494

08002850 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a42      	ldr	r2, [pc, #264]	@ (8002968 <DMA_CalcBaseAndBitshift+0x118>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d04a      	beq.n	80028f8 <DMA_CalcBaseAndBitshift+0xa8>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a41      	ldr	r2, [pc, #260]	@ (800296c <DMA_CalcBaseAndBitshift+0x11c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d045      	beq.n	80028f8 <DMA_CalcBaseAndBitshift+0xa8>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a3f      	ldr	r2, [pc, #252]	@ (8002970 <DMA_CalcBaseAndBitshift+0x120>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d040      	beq.n	80028f8 <DMA_CalcBaseAndBitshift+0xa8>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a3e      	ldr	r2, [pc, #248]	@ (8002974 <DMA_CalcBaseAndBitshift+0x124>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d03b      	beq.n	80028f8 <DMA_CalcBaseAndBitshift+0xa8>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a3c      	ldr	r2, [pc, #240]	@ (8002978 <DMA_CalcBaseAndBitshift+0x128>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d036      	beq.n	80028f8 <DMA_CalcBaseAndBitshift+0xa8>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a3b      	ldr	r2, [pc, #236]	@ (800297c <DMA_CalcBaseAndBitshift+0x12c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d031      	beq.n	80028f8 <DMA_CalcBaseAndBitshift+0xa8>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a39      	ldr	r2, [pc, #228]	@ (8002980 <DMA_CalcBaseAndBitshift+0x130>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d02c      	beq.n	80028f8 <DMA_CalcBaseAndBitshift+0xa8>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a38      	ldr	r2, [pc, #224]	@ (8002984 <DMA_CalcBaseAndBitshift+0x134>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d027      	beq.n	80028f8 <DMA_CalcBaseAndBitshift+0xa8>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a36      	ldr	r2, [pc, #216]	@ (8002988 <DMA_CalcBaseAndBitshift+0x138>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d022      	beq.n	80028f8 <DMA_CalcBaseAndBitshift+0xa8>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a35      	ldr	r2, [pc, #212]	@ (800298c <DMA_CalcBaseAndBitshift+0x13c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d01d      	beq.n	80028f8 <DMA_CalcBaseAndBitshift+0xa8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a33      	ldr	r2, [pc, #204]	@ (8002990 <DMA_CalcBaseAndBitshift+0x140>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d018      	beq.n	80028f8 <DMA_CalcBaseAndBitshift+0xa8>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a32      	ldr	r2, [pc, #200]	@ (8002994 <DMA_CalcBaseAndBitshift+0x144>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d013      	beq.n	80028f8 <DMA_CalcBaseAndBitshift+0xa8>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a30      	ldr	r2, [pc, #192]	@ (8002998 <DMA_CalcBaseAndBitshift+0x148>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00e      	beq.n	80028f8 <DMA_CalcBaseAndBitshift+0xa8>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a2f      	ldr	r2, [pc, #188]	@ (800299c <DMA_CalcBaseAndBitshift+0x14c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d009      	beq.n	80028f8 <DMA_CalcBaseAndBitshift+0xa8>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a2d      	ldr	r2, [pc, #180]	@ (80029a0 <DMA_CalcBaseAndBitshift+0x150>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d004      	beq.n	80028f8 <DMA_CalcBaseAndBitshift+0xa8>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a2c      	ldr	r2, [pc, #176]	@ (80029a4 <DMA_CalcBaseAndBitshift+0x154>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d101      	bne.n	80028fc <DMA_CalcBaseAndBitshift+0xac>
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <DMA_CalcBaseAndBitshift+0xae>
 80028fc:	2300      	movs	r3, #0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d024      	beq.n	800294c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	3b10      	subs	r3, #16
 800290a:	4a27      	ldr	r2, [pc, #156]	@ (80029a8 <DMA_CalcBaseAndBitshift+0x158>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	4a24      	ldr	r2, [pc, #144]	@ (80029ac <DMA_CalcBaseAndBitshift+0x15c>)
 800291c:	5cd3      	ldrb	r3, [r2, r3]
 800291e:	461a      	mov	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b03      	cmp	r3, #3
 8002928:	d908      	bls.n	800293c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	4b1f      	ldr	r3, [pc, #124]	@ (80029b0 <DMA_CalcBaseAndBitshift+0x160>)
 8002932:	4013      	ands	r3, r2
 8002934:	1d1a      	adds	r2, r3, #4
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	659a      	str	r2, [r3, #88]	@ 0x58
 800293a:	e00d      	b.n	8002958 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	4b1b      	ldr	r3, [pc, #108]	@ (80029b0 <DMA_CalcBaseAndBitshift+0x160>)
 8002944:	4013      	ands	r3, r2
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6593      	str	r3, [r2, #88]	@ 0x58
 800294a:	e005      	b.n	8002958 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	40020010 	.word	0x40020010
 800296c:	40020028 	.word	0x40020028
 8002970:	40020040 	.word	0x40020040
 8002974:	40020058 	.word	0x40020058
 8002978:	40020070 	.word	0x40020070
 800297c:	40020088 	.word	0x40020088
 8002980:	400200a0 	.word	0x400200a0
 8002984:	400200b8 	.word	0x400200b8
 8002988:	40020410 	.word	0x40020410
 800298c:	40020428 	.word	0x40020428
 8002990:	40020440 	.word	0x40020440
 8002994:	40020458 	.word	0x40020458
 8002998:	40020470 	.word	0x40020470
 800299c:	40020488 	.word	0x40020488
 80029a0:	400204a0 	.word	0x400204a0
 80029a4:	400204b8 	.word	0x400204b8
 80029a8:	aaaaaaab 	.word	0xaaaaaaab
 80029ac:	08004010 	.word	0x08004010
 80029b0:	fffffc00 	.word	0xfffffc00

080029b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d120      	bne.n	8002a0a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d858      	bhi.n	8002a82 <DMA_CheckFifoParam+0xce>
 80029d0:	a201      	add	r2, pc, #4	@ (adr r2, 80029d8 <DMA_CheckFifoParam+0x24>)
 80029d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d6:	bf00      	nop
 80029d8:	080029e9 	.word	0x080029e9
 80029dc:	080029fb 	.word	0x080029fb
 80029e0:	080029e9 	.word	0x080029e9
 80029e4:	08002a83 	.word	0x08002a83
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d048      	beq.n	8002a86 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80029f8:	e045      	b.n	8002a86 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a02:	d142      	bne.n	8002a8a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002a08:	e03f      	b.n	8002a8a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a12:	d123      	bne.n	8002a5c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d838      	bhi.n	8002a8e <DMA_CheckFifoParam+0xda>
 8002a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a24 <DMA_CheckFifoParam+0x70>)
 8002a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a22:	bf00      	nop
 8002a24:	08002a35 	.word	0x08002a35
 8002a28:	08002a3b 	.word	0x08002a3b
 8002a2c:	08002a35 	.word	0x08002a35
 8002a30:	08002a4d 	.word	0x08002a4d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
        break;
 8002a38:	e030      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d025      	beq.n	8002a92 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002a4a:	e022      	b.n	8002a92 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a54:	d11f      	bne.n	8002a96 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002a5a:	e01c      	b.n	8002a96 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d902      	bls.n	8002a6a <DMA_CheckFifoParam+0xb6>
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d003      	beq.n	8002a70 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002a68:	e018      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a6e:	e015      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00e      	beq.n	8002a9a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
    break;
 8002a80:	e00b      	b.n	8002a9a <DMA_CheckFifoParam+0xe6>
        break;
 8002a82:	bf00      	nop
 8002a84:	e00a      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
        break;
 8002a86:	bf00      	nop
 8002a88:	e008      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
        break;
 8002a8a:	bf00      	nop
 8002a8c:	e006      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
        break;
 8002a8e:	bf00      	nop
 8002a90:	e004      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
        break;
 8002a92:	bf00      	nop
 8002a94:	e002      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
        break;
 8002a96:	bf00      	nop
 8002a98:	e000      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
    break;
 8002a9a:	bf00      	nop
    }
  }

  return status;
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop

08002aac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a38      	ldr	r2, [pc, #224]	@ (8002ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d022      	beq.n	8002b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a36      	ldr	r2, [pc, #216]	@ (8002ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d01d      	beq.n	8002b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a35      	ldr	r2, [pc, #212]	@ (8002ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d018      	beq.n	8002b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a33      	ldr	r2, [pc, #204]	@ (8002bac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d013      	beq.n	8002b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a32      	ldr	r2, [pc, #200]	@ (8002bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00e      	beq.n	8002b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a30      	ldr	r2, [pc, #192]	@ (8002bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d009      	beq.n	8002b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a2f      	ldr	r2, [pc, #188]	@ (8002bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d004      	beq.n	8002b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a2d      	ldr	r2, [pc, #180]	@ (8002bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d101      	bne.n	8002b0e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d01a      	beq.n	8002b4a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	3b08      	subs	r3, #8
 8002b1c:	4a28      	ldr	r2, [pc, #160]	@ (8002bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	091b      	lsrs	r3, r3, #4
 8002b24:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4b26      	ldr	r3, [pc, #152]	@ (8002bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	461a      	mov	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a24      	ldr	r2, [pc, #144]	@ (8002bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002b38:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f003 031f 	and.w	r3, r3, #31
 8002b40:	2201      	movs	r2, #1
 8002b42:	409a      	lsls	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002b48:	e024      	b.n	8002b94 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	3b10      	subs	r3, #16
 8002b52:	4a1e      	ldr	r2, [pc, #120]	@ (8002bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002b54:	fba2 2303 	umull	r2, r3, r2, r3
 8002b58:	091b      	lsrs	r3, r3, #4
 8002b5a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d806      	bhi.n	8002b72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	4a1b      	ldr	r2, [pc, #108]	@ (8002bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d902      	bls.n	8002b72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	3308      	adds	r3, #8
 8002b70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4b18      	ldr	r3, [pc, #96]	@ (8002bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a16      	ldr	r2, [pc, #88]	@ (8002bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002b84:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f003 031f 	and.w	r3, r3, #31
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	409a      	lsls	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	58025408 	.word	0x58025408
 8002ba4:	5802541c 	.word	0x5802541c
 8002ba8:	58025430 	.word	0x58025430
 8002bac:	58025444 	.word	0x58025444
 8002bb0:	58025458 	.word	0x58025458
 8002bb4:	5802546c 	.word	0x5802546c
 8002bb8:	58025480 	.word	0x58025480
 8002bbc:	58025494 	.word	0x58025494
 8002bc0:	cccccccd 	.word	0xcccccccd
 8002bc4:	16009600 	.word	0x16009600
 8002bc8:	58025880 	.word	0x58025880
 8002bcc:	aaaaaaab 	.word	0xaaaaaaab
 8002bd0:	400204b8 	.word	0x400204b8
 8002bd4:	4002040f 	.word	0x4002040f
 8002bd8:	10008200 	.word	0x10008200
 8002bdc:	40020880 	.word	0x40020880

08002be0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d04a      	beq.n	8002c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d847      	bhi.n	8002c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a25      	ldr	r2, [pc, #148]	@ (8002c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d022      	beq.n	8002c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a24      	ldr	r2, [pc, #144]	@ (8002c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d01d      	beq.n	8002c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a22      	ldr	r2, [pc, #136]	@ (8002ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d018      	beq.n	8002c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a21      	ldr	r2, [pc, #132]	@ (8002ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d013      	beq.n	8002c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00e      	beq.n	8002c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1e      	ldr	r2, [pc, #120]	@ (8002cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d009      	beq.n	8002c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d004      	beq.n	8002c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a1b      	ldr	r2, [pc, #108]	@ (8002cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d101      	bne.n	8002c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002c50:	2300      	movs	r3, #0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4b17      	ldr	r3, [pc, #92]	@ (8002cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	461a      	mov	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a15      	ldr	r2, [pc, #84]	@ (8002cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002c68:	671a      	str	r2, [r3, #112]	@ 0x70
 8002c6a:	e009      	b.n	8002c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	4b14      	ldr	r3, [pc, #80]	@ (8002cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	461a      	mov	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a11      	ldr	r2, [pc, #68]	@ (8002cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002c7e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	2201      	movs	r2, #1
 8002c86:	409a      	lsls	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	58025408 	.word	0x58025408
 8002c9c:	5802541c 	.word	0x5802541c
 8002ca0:	58025430 	.word	0x58025430
 8002ca4:	58025444 	.word	0x58025444
 8002ca8:	58025458 	.word	0x58025458
 8002cac:	5802546c 	.word	0x5802546c
 8002cb0:	58025480 	.word	0x58025480
 8002cb4:	58025494 	.word	0x58025494
 8002cb8:	1600963f 	.word	0x1600963f
 8002cbc:	58025940 	.word	0x58025940
 8002cc0:	1000823f 	.word	0x1000823f
 8002cc4:	40020940 	.word	0x40020940

08002cc8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002cd0:	4b19      	ldr	r3, [pc, #100]	@ (8002d38 <HAL_PWREx_ConfigSupply+0x70>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d00a      	beq.n	8002cf2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002cdc:	4b16      	ldr	r3, [pc, #88]	@ (8002d38 <HAL_PWREx_ConfigSupply+0x70>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d001      	beq.n	8002cee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e01f      	b.n	8002d2e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e01d      	b.n	8002d2e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002cf2:	4b11      	ldr	r3, [pc, #68]	@ (8002d38 <HAL_PWREx_ConfigSupply+0x70>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f023 0207 	bic.w	r2, r3, #7
 8002cfa:	490f      	ldr	r1, [pc, #60]	@ (8002d38 <HAL_PWREx_ConfigSupply+0x70>)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002d02:	f7fd ff41 	bl	8000b88 <HAL_GetTick>
 8002d06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d08:	e009      	b.n	8002d1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d0a:	f7fd ff3d 	bl	8000b88 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d18:	d901      	bls.n	8002d1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e007      	b.n	8002d2e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d1e:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <HAL_PWREx_ConfigSupply+0x70>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d2a:	d1ee      	bne.n	8002d0a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	58024800 	.word	0x58024800

08002d3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08c      	sub	sp, #48	@ 0x30
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d102      	bne.n	8002d50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	f000 bc48 	b.w	80035e0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8088 	beq.w	8002e6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d5e:	4b99      	ldr	r3, [pc, #612]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d68:	4b96      	ldr	r3, [pc, #600]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d70:	2b10      	cmp	r3, #16
 8002d72:	d007      	beq.n	8002d84 <HAL_RCC_OscConfig+0x48>
 8002d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d76:	2b18      	cmp	r3, #24
 8002d78:	d111      	bne.n	8002d9e <HAL_RCC_OscConfig+0x62>
 8002d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d10c      	bne.n	8002d9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d84:	4b8f      	ldr	r3, [pc, #572]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d06d      	beq.n	8002e6c <HAL_RCC_OscConfig+0x130>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d169      	bne.n	8002e6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f000 bc21 	b.w	80035e0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002da6:	d106      	bne.n	8002db6 <HAL_RCC_OscConfig+0x7a>
 8002da8:	4b86      	ldr	r3, [pc, #536]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a85      	ldr	r2, [pc, #532]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002dae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	e02e      	b.n	8002e14 <HAL_RCC_OscConfig+0xd8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x9c>
 8002dbe:	4b81      	ldr	r3, [pc, #516]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a80      	ldr	r2, [pc, #512]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002dc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	4b7e      	ldr	r3, [pc, #504]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a7d      	ldr	r2, [pc, #500]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002dd0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	e01d      	b.n	8002e14 <HAL_RCC_OscConfig+0xd8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCC_OscConfig+0xc0>
 8002de2:	4b78      	ldr	r3, [pc, #480]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a77      	ldr	r2, [pc, #476]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002de8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	4b75      	ldr	r3, [pc, #468]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a74      	ldr	r2, [pc, #464]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e00b      	b.n	8002e14 <HAL_RCC_OscConfig+0xd8>
 8002dfc:	4b71      	ldr	r3, [pc, #452]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a70      	ldr	r2, [pc, #448]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002e02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	4b6e      	ldr	r3, [pc, #440]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a6d      	ldr	r2, [pc, #436]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002e0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d013      	beq.n	8002e44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7fd feb4 	bl	8000b88 <HAL_GetTick>
 8002e20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e24:	f7fd feb0 	bl	8000b88 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b64      	cmp	r3, #100	@ 0x64
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e3d4      	b.n	80035e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e36:	4b63      	ldr	r3, [pc, #396]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0xe8>
 8002e42:	e014      	b.n	8002e6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fd fea0 	bl	8000b88 <HAL_GetTick>
 8002e48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e4c:	f7fd fe9c 	bl	8000b88 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b64      	cmp	r3, #100	@ 0x64
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e3c0      	b.n	80035e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e5e:	4b59      	ldr	r3, [pc, #356]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x110>
 8002e6a:	e000      	b.n	8002e6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 80ca 	beq.w	8003010 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e7c:	4b51      	ldr	r3, [pc, #324]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e84:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e86:	4b4f      	ldr	r3, [pc, #316]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x166>
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	2b18      	cmp	r3, #24
 8002e96:	d156      	bne.n	8002f46 <HAL_RCC_OscConfig+0x20a>
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d151      	bne.n	8002f46 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ea2:	4b48      	ldr	r3, [pc, #288]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d005      	beq.n	8002eba <HAL_RCC_OscConfig+0x17e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e392      	b.n	80035e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002eba:	4b42      	ldr	r3, [pc, #264]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 0219 	bic.w	r2, r3, #25
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	493f      	ldr	r1, [pc, #252]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fd fe5c 	bl	8000b88 <HAL_GetTick>
 8002ed0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed4:	f7fd fe58 	bl	8000b88 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e37c      	b.n	80035e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ee6:	4b37      	ldr	r3, [pc, #220]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef2:	f7fd fe55 	bl	8000ba0 <HAL_GetREVID>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d817      	bhi.n	8002f30 <HAL_RCC_OscConfig+0x1f4>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	2b40      	cmp	r3, #64	@ 0x40
 8002f06:	d108      	bne.n	8002f1a <HAL_RCC_OscConfig+0x1de>
 8002f08:	4b2e      	ldr	r3, [pc, #184]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002f10:	4a2c      	ldr	r2, [pc, #176]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002f12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f16:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f18:	e07a      	b.n	8003010 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	031b      	lsls	r3, r3, #12
 8002f28:	4926      	ldr	r1, [pc, #152]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f2e:	e06f      	b.n	8003010 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f30:	4b24      	ldr	r3, [pc, #144]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	061b      	lsls	r3, r3, #24
 8002f3e:	4921      	ldr	r1, [pc, #132]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f44:	e064      	b.n	8003010 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d047      	beq.n	8002fde <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 0219 	bic.w	r2, r3, #25
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	491a      	ldr	r1, [pc, #104]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7fd fe12 	bl	8000b88 <HAL_GetTick>
 8002f64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f68:	f7fd fe0e 	bl	8000b88 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e332      	b.n	80035e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f7a:	4b12      	ldr	r3, [pc, #72]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f86:	f7fd fe0b 	bl	8000ba0 <HAL_GetREVID>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d819      	bhi.n	8002fc8 <HAL_RCC_OscConfig+0x28c>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2b40      	cmp	r3, #64	@ 0x40
 8002f9a:	d108      	bne.n	8002fae <HAL_RCC_OscConfig+0x272>
 8002f9c:	4b09      	ldr	r3, [pc, #36]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002fa4:	4a07      	ldr	r2, [pc, #28]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002fa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002faa:	6053      	str	r3, [r2, #4]
 8002fac:	e030      	b.n	8003010 <HAL_RCC_OscConfig+0x2d4>
 8002fae:	4b05      	ldr	r3, [pc, #20]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	031b      	lsls	r3, r3, #12
 8002fbc:	4901      	ldr	r1, [pc, #4]	@ (8002fc4 <HAL_RCC_OscConfig+0x288>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	604b      	str	r3, [r1, #4]
 8002fc2:	e025      	b.n	8003010 <HAL_RCC_OscConfig+0x2d4>
 8002fc4:	58024400 	.word	0x58024400
 8002fc8:	4b9a      	ldr	r3, [pc, #616]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	061b      	lsls	r3, r3, #24
 8002fd6:	4997      	ldr	r1, [pc, #604]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
 8002fdc:	e018      	b.n	8003010 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fde:	4b95      	ldr	r3, [pc, #596]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a94      	ldr	r2, [pc, #592]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 8002fe4:	f023 0301 	bic.w	r3, r3, #1
 8002fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fea:	f7fd fdcd 	bl	8000b88 <HAL_GetTick>
 8002fee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff2:	f7fd fdc9 	bl	8000b88 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e2ed      	b.n	80035e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003004:	4b8b      	ldr	r3, [pc, #556]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1f0      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 80a9 	beq.w	8003170 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800301e:	4b85      	ldr	r3, [pc, #532]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003026:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003028:	4b82      	ldr	r3, [pc, #520]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 800302a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	2b08      	cmp	r3, #8
 8003032:	d007      	beq.n	8003044 <HAL_RCC_OscConfig+0x308>
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2b18      	cmp	r3, #24
 8003038:	d13a      	bne.n	80030b0 <HAL_RCC_OscConfig+0x374>
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d135      	bne.n	80030b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003044:	4b7b      	ldr	r3, [pc, #492]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_RCC_OscConfig+0x320>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	2b80      	cmp	r3, #128	@ 0x80
 8003056:	d001      	beq.n	800305c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e2c1      	b.n	80035e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800305c:	f7fd fda0 	bl	8000ba0 <HAL_GetREVID>
 8003060:	4603      	mov	r3, r0
 8003062:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003066:	4293      	cmp	r3, r2
 8003068:	d817      	bhi.n	800309a <HAL_RCC_OscConfig+0x35e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	2b20      	cmp	r3, #32
 8003070:	d108      	bne.n	8003084 <HAL_RCC_OscConfig+0x348>
 8003072:	4b70      	ldr	r3, [pc, #448]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800307a:	4a6e      	ldr	r2, [pc, #440]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 800307c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003080:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003082:	e075      	b.n	8003170 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003084:	4b6b      	ldr	r3, [pc, #428]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	069b      	lsls	r3, r3, #26
 8003092:	4968      	ldr	r1, [pc, #416]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 8003094:	4313      	orrs	r3, r2
 8003096:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003098:	e06a      	b.n	8003170 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800309a:	4b66      	ldr	r3, [pc, #408]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	061b      	lsls	r3, r3, #24
 80030a8:	4962      	ldr	r1, [pc, #392]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030ae:	e05f      	b.n	8003170 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d042      	beq.n	800313e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80030b8:	4b5e      	ldr	r3, [pc, #376]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a5d      	ldr	r2, [pc, #372]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 80030be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7fd fd60 	bl	8000b88 <HAL_GetTick>
 80030c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80030cc:	f7fd fd5c 	bl	8000b88 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e280      	b.n	80035e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030de:	4b55      	ldr	r3, [pc, #340]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030ea:	f7fd fd59 	bl	8000ba0 <HAL_GetREVID>
 80030ee:	4603      	mov	r3, r0
 80030f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d817      	bhi.n	8003128 <HAL_RCC_OscConfig+0x3ec>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d108      	bne.n	8003112 <HAL_RCC_OscConfig+0x3d6>
 8003100:	4b4c      	ldr	r3, [pc, #304]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003108:	4a4a      	ldr	r2, [pc, #296]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 800310a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800310e:	6053      	str	r3, [r2, #4]
 8003110:	e02e      	b.n	8003170 <HAL_RCC_OscConfig+0x434>
 8003112:	4b48      	ldr	r3, [pc, #288]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	069b      	lsls	r3, r3, #26
 8003120:	4944      	ldr	r1, [pc, #272]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 8003122:	4313      	orrs	r3, r2
 8003124:	604b      	str	r3, [r1, #4]
 8003126:	e023      	b.n	8003170 <HAL_RCC_OscConfig+0x434>
 8003128:	4b42      	ldr	r3, [pc, #264]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	061b      	lsls	r3, r3, #24
 8003136:	493f      	ldr	r1, [pc, #252]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 8003138:	4313      	orrs	r3, r2
 800313a:	60cb      	str	r3, [r1, #12]
 800313c:	e018      	b.n	8003170 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800313e:	4b3d      	ldr	r3, [pc, #244]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a3c      	ldr	r2, [pc, #240]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 8003144:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314a:	f7fd fd1d 	bl	8000b88 <HAL_GetTick>
 800314e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003152:	f7fd fd19 	bl	8000b88 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e23d      	b.n	80035e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003164:	4b33      	ldr	r3, [pc, #204]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f0      	bne.n	8003152 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b00      	cmp	r3, #0
 800317a:	d036      	beq.n	80031ea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d019      	beq.n	80031b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003184:	4b2b      	ldr	r3, [pc, #172]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 8003186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003188:	4a2a      	ldr	r2, [pc, #168]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003190:	f7fd fcfa 	bl	8000b88 <HAL_GetTick>
 8003194:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003198:	f7fd fcf6 	bl	8000b88 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e21a      	b.n	80035e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031aa:	4b22      	ldr	r3, [pc, #136]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 80031ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0x45c>
 80031b6:	e018      	b.n	80031ea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 80031ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 80031be:	f023 0301 	bic.w	r3, r3, #1
 80031c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c4:	f7fd fce0 	bl	8000b88 <HAL_GetTick>
 80031c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031cc:	f7fd fcdc 	bl	8000b88 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e200      	b.n	80035e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031de:	4b15      	ldr	r3, [pc, #84]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 80031e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0320 	and.w	r3, r3, #32
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d039      	beq.n	800326a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d01c      	beq.n	8003238 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a0c      	ldr	r2, [pc, #48]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 8003204:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003208:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800320a:	f7fd fcbd 	bl	8000b88 <HAL_GetTick>
 800320e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003212:	f7fd fcb9 	bl	8000b88 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e1dd      	b.n	80035e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003224:	4b03      	ldr	r3, [pc, #12]	@ (8003234 <HAL_RCC_OscConfig+0x4f8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0f0      	beq.n	8003212 <HAL_RCC_OscConfig+0x4d6>
 8003230:	e01b      	b.n	800326a <HAL_RCC_OscConfig+0x52e>
 8003232:	bf00      	nop
 8003234:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003238:	4b9b      	ldr	r3, [pc, #620]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a9a      	ldr	r2, [pc, #616]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 800323e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003242:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003244:	f7fd fca0 	bl	8000b88 <HAL_GetTick>
 8003248:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800324c:	f7fd fc9c 	bl	8000b88 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e1c0      	b.n	80035e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800325e:	4b92      	ldr	r3, [pc, #584]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 8081 	beq.w	800337a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003278:	4b8c      	ldr	r3, [pc, #560]	@ (80034ac <HAL_RCC_OscConfig+0x770>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a8b      	ldr	r2, [pc, #556]	@ (80034ac <HAL_RCC_OscConfig+0x770>)
 800327e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003282:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003284:	f7fd fc80 	bl	8000b88 <HAL_GetTick>
 8003288:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328c:	f7fd fc7c 	bl	8000b88 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b64      	cmp	r3, #100	@ 0x64
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e1a0      	b.n	80035e0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800329e:	4b83      	ldr	r3, [pc, #524]	@ (80034ac <HAL_RCC_OscConfig+0x770>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d106      	bne.n	80032c0 <HAL_RCC_OscConfig+0x584>
 80032b2:	4b7d      	ldr	r3, [pc, #500]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b6:	4a7c      	ldr	r2, [pc, #496]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80032be:	e02d      	b.n	800331c <HAL_RCC_OscConfig+0x5e0>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10c      	bne.n	80032e2 <HAL_RCC_OscConfig+0x5a6>
 80032c8:	4b77      	ldr	r3, [pc, #476]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032cc:	4a76      	ldr	r2, [pc, #472]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 80032ce:	f023 0301 	bic.w	r3, r3, #1
 80032d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80032d4:	4b74      	ldr	r3, [pc, #464]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d8:	4a73      	ldr	r2, [pc, #460]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 80032da:	f023 0304 	bic.w	r3, r3, #4
 80032de:	6713      	str	r3, [r2, #112]	@ 0x70
 80032e0:	e01c      	b.n	800331c <HAL_RCC_OscConfig+0x5e0>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b05      	cmp	r3, #5
 80032e8:	d10c      	bne.n	8003304 <HAL_RCC_OscConfig+0x5c8>
 80032ea:	4b6f      	ldr	r3, [pc, #444]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 80032ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ee:	4a6e      	ldr	r2, [pc, #440]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 80032f0:	f043 0304 	orr.w	r3, r3, #4
 80032f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f6:	4b6c      	ldr	r3, [pc, #432]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032fa:	4a6b      	ldr	r2, [pc, #428]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6713      	str	r3, [r2, #112]	@ 0x70
 8003302:	e00b      	b.n	800331c <HAL_RCC_OscConfig+0x5e0>
 8003304:	4b68      	ldr	r3, [pc, #416]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003308:	4a67      	ldr	r2, [pc, #412]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 800330a:	f023 0301 	bic.w	r3, r3, #1
 800330e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003310:	4b65      	ldr	r3, [pc, #404]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003314:	4a64      	ldr	r2, [pc, #400]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 8003316:	f023 0304 	bic.w	r3, r3, #4
 800331a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d015      	beq.n	8003350 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003324:	f7fd fc30 	bl	8000b88 <HAL_GetTick>
 8003328:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800332a:	e00a      	b.n	8003342 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800332c:	f7fd fc2c 	bl	8000b88 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800333a:	4293      	cmp	r3, r2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e14e      	b.n	80035e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003342:	4b59      	ldr	r3, [pc, #356]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0ee      	beq.n	800332c <HAL_RCC_OscConfig+0x5f0>
 800334e:	e014      	b.n	800337a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003350:	f7fd fc1a 	bl	8000b88 <HAL_GetTick>
 8003354:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003356:	e00a      	b.n	800336e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003358:	f7fd fc16 	bl	8000b88 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e138      	b.n	80035e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800336e:	4b4e      	ldr	r3, [pc, #312]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1ee      	bne.n	8003358 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 812d 	beq.w	80035de <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003384:	4b48      	ldr	r3, [pc, #288]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800338c:	2b18      	cmp	r3, #24
 800338e:	f000 80bd 	beq.w	800350c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	2b02      	cmp	r3, #2
 8003398:	f040 809e 	bne.w	80034d8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339c:	4b42      	ldr	r3, [pc, #264]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a41      	ldr	r2, [pc, #260]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 80033a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7fd fbee 	bl	8000b88 <HAL_GetTick>
 80033ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b0:	f7fd fbea 	bl	8000b88 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e10e      	b.n	80035e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033c2:	4b39      	ldr	r3, [pc, #228]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ce:	4b36      	ldr	r3, [pc, #216]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 80033d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033d2:	4b37      	ldr	r3, [pc, #220]	@ (80034b0 <HAL_RCC_OscConfig+0x774>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80033de:	0112      	lsls	r2, r2, #4
 80033e0:	430a      	orrs	r2, r1
 80033e2:	4931      	ldr	r1, [pc, #196]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ec:	3b01      	subs	r3, #1
 80033ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f6:	3b01      	subs	r3, #1
 80033f8:	025b      	lsls	r3, r3, #9
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003402:	3b01      	subs	r3, #1
 8003404:	041b      	lsls	r3, r3, #16
 8003406:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003410:	3b01      	subs	r3, #1
 8003412:	061b      	lsls	r3, r3, #24
 8003414:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003418:	4923      	ldr	r1, [pc, #140]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 800341a:	4313      	orrs	r3, r2
 800341c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800341e:	4b22      	ldr	r3, [pc, #136]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 8003420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003422:	4a21      	ldr	r2, [pc, #132]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 8003424:	f023 0301 	bic.w	r3, r3, #1
 8003428:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800342a:	4b1f      	ldr	r3, [pc, #124]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 800342c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800342e:	4b21      	ldr	r3, [pc, #132]	@ (80034b4 <HAL_RCC_OscConfig+0x778>)
 8003430:	4013      	ands	r3, r2
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003436:	00d2      	lsls	r2, r2, #3
 8003438:	491b      	ldr	r1, [pc, #108]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 800343a:	4313      	orrs	r3, r2
 800343c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800343e:	4b1a      	ldr	r3, [pc, #104]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 8003440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003442:	f023 020c 	bic.w	r2, r3, #12
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344a:	4917      	ldr	r1, [pc, #92]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 800344c:	4313      	orrs	r3, r2
 800344e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003450:	4b15      	ldr	r3, [pc, #84]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 8003452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003454:	f023 0202 	bic.w	r2, r3, #2
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345c:	4912      	ldr	r1, [pc, #72]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 800345e:	4313      	orrs	r3, r2
 8003460:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003462:	4b11      	ldr	r3, [pc, #68]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 8003464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003466:	4a10      	ldr	r2, [pc, #64]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 8003468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800346c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800346e:	4b0e      	ldr	r3, [pc, #56]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 8003470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003472:	4a0d      	ldr	r2, [pc, #52]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 8003474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003478:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800347a:	4b0b      	ldr	r3, [pc, #44]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 800347c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347e:	4a0a      	ldr	r2, [pc, #40]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 8003480:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003484:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003486:	4b08      	ldr	r3, [pc, #32]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 8003488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348a:	4a07      	ldr	r2, [pc, #28]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003492:	4b05      	ldr	r3, [pc, #20]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a04      	ldr	r2, [pc, #16]	@ (80034a8 <HAL_RCC_OscConfig+0x76c>)
 8003498:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800349c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349e:	f7fd fb73 	bl	8000b88 <HAL_GetTick>
 80034a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034a4:	e011      	b.n	80034ca <HAL_RCC_OscConfig+0x78e>
 80034a6:	bf00      	nop
 80034a8:	58024400 	.word	0x58024400
 80034ac:	58024800 	.word	0x58024800
 80034b0:	fffffc0c 	.word	0xfffffc0c
 80034b4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b8:	f7fd fb66 	bl	8000b88 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e08a      	b.n	80035e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034ca:	4b47      	ldr	r3, [pc, #284]	@ (80035e8 <HAL_RCC_OscConfig+0x8ac>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0x77c>
 80034d6:	e082      	b.n	80035de <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d8:	4b43      	ldr	r3, [pc, #268]	@ (80035e8 <HAL_RCC_OscConfig+0x8ac>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a42      	ldr	r2, [pc, #264]	@ (80035e8 <HAL_RCC_OscConfig+0x8ac>)
 80034de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fd fb50 	bl	8000b88 <HAL_GetTick>
 80034e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ec:	f7fd fb4c 	bl	8000b88 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e070      	b.n	80035e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034fe:	4b3a      	ldr	r3, [pc, #232]	@ (80035e8 <HAL_RCC_OscConfig+0x8ac>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x7b0>
 800350a:	e068      	b.n	80035de <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800350c:	4b36      	ldr	r3, [pc, #216]	@ (80035e8 <HAL_RCC_OscConfig+0x8ac>)
 800350e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003510:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003512:	4b35      	ldr	r3, [pc, #212]	@ (80035e8 <HAL_RCC_OscConfig+0x8ac>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003516:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351c:	2b01      	cmp	r3, #1
 800351e:	d031      	beq.n	8003584 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f003 0203 	and.w	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800352a:	429a      	cmp	r2, r3
 800352c:	d12a      	bne.n	8003584 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	091b      	lsrs	r3, r3, #4
 8003532:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353a:	429a      	cmp	r2, r3
 800353c:	d122      	bne.n	8003584 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003548:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800354a:	429a      	cmp	r2, r3
 800354c:	d11a      	bne.n	8003584 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	0a5b      	lsrs	r3, r3, #9
 8003552:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800355a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d111      	bne.n	8003584 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	0c1b      	lsrs	r3, r3, #16
 8003564:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800356e:	429a      	cmp	r2, r3
 8003570:	d108      	bne.n	8003584 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	0e1b      	lsrs	r3, r3, #24
 8003576:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800357e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e02b      	b.n	80035e0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003588:	4b17      	ldr	r3, [pc, #92]	@ (80035e8 <HAL_RCC_OscConfig+0x8ac>)
 800358a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800358c:	08db      	lsrs	r3, r3, #3
 800358e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003592:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	429a      	cmp	r2, r3
 800359c:	d01f      	beq.n	80035de <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800359e:	4b12      	ldr	r3, [pc, #72]	@ (80035e8 <HAL_RCC_OscConfig+0x8ac>)
 80035a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a2:	4a11      	ldr	r2, [pc, #68]	@ (80035e8 <HAL_RCC_OscConfig+0x8ac>)
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035aa:	f7fd faed 	bl	8000b88 <HAL_GetTick>
 80035ae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80035b0:	bf00      	nop
 80035b2:	f7fd fae9 	bl	8000b88 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d0f9      	beq.n	80035b2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80035be:	4b0a      	ldr	r3, [pc, #40]	@ (80035e8 <HAL_RCC_OscConfig+0x8ac>)
 80035c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035c2:	4b0a      	ldr	r3, [pc, #40]	@ (80035ec <HAL_RCC_OscConfig+0x8b0>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80035ca:	00d2      	lsls	r2, r2, #3
 80035cc:	4906      	ldr	r1, [pc, #24]	@ (80035e8 <HAL_RCC_OscConfig+0x8ac>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80035d2:	4b05      	ldr	r3, [pc, #20]	@ (80035e8 <HAL_RCC_OscConfig+0x8ac>)
 80035d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d6:	4a04      	ldr	r2, [pc, #16]	@ (80035e8 <HAL_RCC_OscConfig+0x8ac>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3730      	adds	r7, #48	@ 0x30
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	58024400 	.word	0x58024400
 80035ec:	ffff0007 	.word	0xffff0007

080035f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e19c      	b.n	800393e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003604:	4b8a      	ldr	r3, [pc, #552]	@ (8003830 <HAL_RCC_ClockConfig+0x240>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d910      	bls.n	8003634 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b87      	ldr	r3, [pc, #540]	@ (8003830 <HAL_RCC_ClockConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 020f 	bic.w	r2, r3, #15
 800361a:	4985      	ldr	r1, [pc, #532]	@ (8003830 <HAL_RCC_ClockConfig+0x240>)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003622:	4b83      	ldr	r3, [pc, #524]	@ (8003830 <HAL_RCC_ClockConfig+0x240>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d001      	beq.n	8003634 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e184      	b.n	800393e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d010      	beq.n	8003662 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	4b7b      	ldr	r3, [pc, #492]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800364c:	429a      	cmp	r2, r3
 800364e:	d908      	bls.n	8003662 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003650:	4b78      	ldr	r3, [pc, #480]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	4975      	ldr	r1, [pc, #468]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 800365e:	4313      	orrs	r3, r2
 8003660:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d010      	beq.n	8003690 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695a      	ldr	r2, [r3, #20]
 8003672:	4b70      	ldr	r3, [pc, #448]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800367a:	429a      	cmp	r2, r3
 800367c:	d908      	bls.n	8003690 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800367e:	4b6d      	ldr	r3, [pc, #436]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	496a      	ldr	r1, [pc, #424]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 800368c:	4313      	orrs	r3, r2
 800368e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b00      	cmp	r3, #0
 800369a:	d010      	beq.n	80036be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699a      	ldr	r2, [r3, #24]
 80036a0:	4b64      	ldr	r3, [pc, #400]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d908      	bls.n	80036be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036ac:	4b61      	ldr	r3, [pc, #388]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	495e      	ldr	r1, [pc, #376]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d010      	beq.n	80036ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69da      	ldr	r2, [r3, #28]
 80036ce:	4b59      	ldr	r3, [pc, #356]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d908      	bls.n	80036ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80036da:	4b56      	ldr	r3, [pc, #344]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	4953      	ldr	r1, [pc, #332]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d010      	beq.n	800371a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	4b4d      	ldr	r3, [pc, #308]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	f003 030f 	and.w	r3, r3, #15
 8003704:	429a      	cmp	r2, r3
 8003706:	d908      	bls.n	800371a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003708:	4b4a      	ldr	r3, [pc, #296]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	f023 020f 	bic.w	r2, r3, #15
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4947      	ldr	r1, [pc, #284]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 8003716:	4313      	orrs	r3, r2
 8003718:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d055      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003726:	4b43      	ldr	r3, [pc, #268]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	4940      	ldr	r1, [pc, #256]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 8003734:	4313      	orrs	r3, r2
 8003736:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d107      	bne.n	8003750 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003740:	4b3c      	ldr	r3, [pc, #240]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d121      	bne.n	8003790 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0f6      	b.n	800393e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b03      	cmp	r3, #3
 8003756:	d107      	bne.n	8003768 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003758:	4b36      	ldr	r3, [pc, #216]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d115      	bne.n	8003790 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0ea      	b.n	800393e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d107      	bne.n	8003780 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003770:	4b30      	ldr	r3, [pc, #192]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d109      	bne.n	8003790 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0de      	b.n	800393e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003780:	4b2c      	ldr	r3, [pc, #176]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0d6      	b.n	800393e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003790:	4b28      	ldr	r3, [pc, #160]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f023 0207 	bic.w	r2, r3, #7
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	4925      	ldr	r1, [pc, #148]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a2:	f7fd f9f1 	bl	8000b88 <HAL_GetTick>
 80037a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a8:	e00a      	b.n	80037c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037aa:	f7fd f9ed 	bl	8000b88 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e0be      	b.n	800393e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d1eb      	bne.n	80037aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d010      	beq.n	8003800 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	4b14      	ldr	r3, [pc, #80]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d208      	bcs.n	8003800 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ee:	4b11      	ldr	r3, [pc, #68]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f023 020f 	bic.w	r2, r3, #15
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	490e      	ldr	r1, [pc, #56]	@ (8003834 <HAL_RCC_ClockConfig+0x244>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003800:	4b0b      	ldr	r3, [pc, #44]	@ (8003830 <HAL_RCC_ClockConfig+0x240>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d214      	bcs.n	8003838 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380e:	4b08      	ldr	r3, [pc, #32]	@ (8003830 <HAL_RCC_ClockConfig+0x240>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f023 020f 	bic.w	r2, r3, #15
 8003816:	4906      	ldr	r1, [pc, #24]	@ (8003830 <HAL_RCC_ClockConfig+0x240>)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381e:	4b04      	ldr	r3, [pc, #16]	@ (8003830 <HAL_RCC_ClockConfig+0x240>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d005      	beq.n	8003838 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e086      	b.n	800393e <HAL_RCC_ClockConfig+0x34e>
 8003830:	52002000 	.word	0x52002000
 8003834:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d010      	beq.n	8003866 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	4b3f      	ldr	r3, [pc, #252]	@ (8003948 <HAL_RCC_ClockConfig+0x358>)
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003850:	429a      	cmp	r2, r3
 8003852:	d208      	bcs.n	8003866 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003854:	4b3c      	ldr	r3, [pc, #240]	@ (8003948 <HAL_RCC_ClockConfig+0x358>)
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	4939      	ldr	r1, [pc, #228]	@ (8003948 <HAL_RCC_ClockConfig+0x358>)
 8003862:	4313      	orrs	r3, r2
 8003864:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d010      	beq.n	8003894 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	4b34      	ldr	r3, [pc, #208]	@ (8003948 <HAL_RCC_ClockConfig+0x358>)
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800387e:	429a      	cmp	r2, r3
 8003880:	d208      	bcs.n	8003894 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003882:	4b31      	ldr	r3, [pc, #196]	@ (8003948 <HAL_RCC_ClockConfig+0x358>)
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	492e      	ldr	r1, [pc, #184]	@ (8003948 <HAL_RCC_ClockConfig+0x358>)
 8003890:	4313      	orrs	r3, r2
 8003892:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b00      	cmp	r3, #0
 800389e:	d010      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699a      	ldr	r2, [r3, #24]
 80038a4:	4b28      	ldr	r3, [pc, #160]	@ (8003948 <HAL_RCC_ClockConfig+0x358>)
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d208      	bcs.n	80038c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038b0:	4b25      	ldr	r3, [pc, #148]	@ (8003948 <HAL_RCC_ClockConfig+0x358>)
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	4922      	ldr	r1, [pc, #136]	@ (8003948 <HAL_RCC_ClockConfig+0x358>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d010      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69da      	ldr	r2, [r3, #28]
 80038d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003948 <HAL_RCC_ClockConfig+0x358>)
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038da:	429a      	cmp	r2, r3
 80038dc:	d208      	bcs.n	80038f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80038de:	4b1a      	ldr	r3, [pc, #104]	@ (8003948 <HAL_RCC_ClockConfig+0x358>)
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	4917      	ldr	r1, [pc, #92]	@ (8003948 <HAL_RCC_ClockConfig+0x358>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038f0:	f000 f834 	bl	800395c <HAL_RCC_GetSysClockFreq>
 80038f4:	4602      	mov	r2, r0
 80038f6:	4b14      	ldr	r3, [pc, #80]	@ (8003948 <HAL_RCC_ClockConfig+0x358>)
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	0a1b      	lsrs	r3, r3, #8
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	4912      	ldr	r1, [pc, #72]	@ (800394c <HAL_RCC_ClockConfig+0x35c>)
 8003902:	5ccb      	ldrb	r3, [r1, r3]
 8003904:	f003 031f 	and.w	r3, r3, #31
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
 800390c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800390e:	4b0e      	ldr	r3, [pc, #56]	@ (8003948 <HAL_RCC_ClockConfig+0x358>)
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	4a0d      	ldr	r2, [pc, #52]	@ (800394c <HAL_RCC_ClockConfig+0x35c>)
 8003918:	5cd3      	ldrb	r3, [r2, r3]
 800391a:	f003 031f 	and.w	r3, r3, #31
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
 8003924:	4a0a      	ldr	r2, [pc, #40]	@ (8003950 <HAL_RCC_ClockConfig+0x360>)
 8003926:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003928:	4a0a      	ldr	r2, [pc, #40]	@ (8003954 <HAL_RCC_ClockConfig+0x364>)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800392e:	4b0a      	ldr	r3, [pc, #40]	@ (8003958 <HAL_RCC_ClockConfig+0x368>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7fd f8de 	bl	8000af4 <HAL_InitTick>
 8003938:	4603      	mov	r3, r0
 800393a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800393c:	7bfb      	ldrb	r3, [r7, #15]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	58024400 	.word	0x58024400
 800394c:	08004000 	.word	0x08004000
 8003950:	24000004 	.word	0x24000004
 8003954:	24000000 	.word	0x24000000
 8003958:	24000008 	.word	0x24000008

0800395c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800395c:	b480      	push	{r7}
 800395e:	b089      	sub	sp, #36	@ 0x24
 8003960:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003962:	4bb3      	ldr	r3, [pc, #716]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800396a:	2b18      	cmp	r3, #24
 800396c:	f200 8155 	bhi.w	8003c1a <HAL_RCC_GetSysClockFreq+0x2be>
 8003970:	a201      	add	r2, pc, #4	@ (adr r2, 8003978 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003976:	bf00      	nop
 8003978:	080039dd 	.word	0x080039dd
 800397c:	08003c1b 	.word	0x08003c1b
 8003980:	08003c1b 	.word	0x08003c1b
 8003984:	08003c1b 	.word	0x08003c1b
 8003988:	08003c1b 	.word	0x08003c1b
 800398c:	08003c1b 	.word	0x08003c1b
 8003990:	08003c1b 	.word	0x08003c1b
 8003994:	08003c1b 	.word	0x08003c1b
 8003998:	08003a03 	.word	0x08003a03
 800399c:	08003c1b 	.word	0x08003c1b
 80039a0:	08003c1b 	.word	0x08003c1b
 80039a4:	08003c1b 	.word	0x08003c1b
 80039a8:	08003c1b 	.word	0x08003c1b
 80039ac:	08003c1b 	.word	0x08003c1b
 80039b0:	08003c1b 	.word	0x08003c1b
 80039b4:	08003c1b 	.word	0x08003c1b
 80039b8:	08003a09 	.word	0x08003a09
 80039bc:	08003c1b 	.word	0x08003c1b
 80039c0:	08003c1b 	.word	0x08003c1b
 80039c4:	08003c1b 	.word	0x08003c1b
 80039c8:	08003c1b 	.word	0x08003c1b
 80039cc:	08003c1b 	.word	0x08003c1b
 80039d0:	08003c1b 	.word	0x08003c1b
 80039d4:	08003c1b 	.word	0x08003c1b
 80039d8:	08003a0f 	.word	0x08003a0f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039dc:	4b94      	ldr	r3, [pc, #592]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d009      	beq.n	80039fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039e8:	4b91      	ldr	r3, [pc, #580]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	08db      	lsrs	r3, r3, #3
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	4a90      	ldr	r2, [pc, #576]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
 80039f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80039fa:	e111      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80039fc:	4b8d      	ldr	r3, [pc, #564]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039fe:	61bb      	str	r3, [r7, #24]
      break;
 8003a00:	e10e      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003a02:	4b8d      	ldr	r3, [pc, #564]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a04:	61bb      	str	r3, [r7, #24]
      break;
 8003a06:	e10b      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003a08:	4b8c      	ldr	r3, [pc, #560]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003a0a:	61bb      	str	r3, [r7, #24]
      break;
 8003a0c:	e108      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a0e:	4b88      	ldr	r3, [pc, #544]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003a18:	4b85      	ldr	r3, [pc, #532]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1c:	091b      	lsrs	r3, r3, #4
 8003a1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a22:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a24:	4b82      	ldr	r3, [pc, #520]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003a2e:	4b80      	ldr	r3, [pc, #512]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a32:	08db      	lsrs	r3, r3, #3
 8003a34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	ee07 3a90 	vmov	s15, r3
 8003a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a46:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 80e1 	beq.w	8003c14 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	f000 8083 	beq.w	8003b60 <HAL_RCC_GetSysClockFreq+0x204>
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	f200 80a1 	bhi.w	8003ba4 <HAL_RCC_GetSysClockFreq+0x248>
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_RCC_GetSysClockFreq+0x114>
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d056      	beq.n	8003b1c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003a6e:	e099      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a70:	4b6f      	ldr	r3, [pc, #444]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d02d      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a7c:	4b6c      	ldr	r3, [pc, #432]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	08db      	lsrs	r3, r3, #3
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	4a6b      	ldr	r2, [pc, #428]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a88:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	ee07 3a90 	vmov	s15, r3
 8003a94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aa6:	4b62      	ldr	r3, [pc, #392]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003aba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003ad6:	e087      	b.n	8003be8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003c44 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aea:	4b51      	ldr	r3, [pc, #324]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af2:	ee07 3a90 	vmov	s15, r3
 8003af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003afe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b1a:	e065      	b.n	8003be8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	ee07 3a90 	vmov	s15, r3
 8003b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b26:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003c48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b2e:	4b40      	ldr	r3, [pc, #256]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b36:	ee07 3a90 	vmov	s15, r3
 8003b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b42:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b5e:	e043      	b.n	8003be8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	ee07 3a90 	vmov	s15, r3
 8003b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003c4c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b72:	4b2f      	ldr	r3, [pc, #188]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b7a:	ee07 3a90 	vmov	s15, r3
 8003b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b86:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ba2:	e021      	b.n	8003be8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	ee07 3a90 	vmov	s15, r3
 8003baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003c48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003be6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003be8:	4b11      	ldr	r3, [pc, #68]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bec:	0a5b      	lsrs	r3, r3, #9
 8003bee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	ee07 3a90 	vmov	s15, r3
 8003bfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c00:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c0c:	ee17 3a90 	vmov	r3, s15
 8003c10:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003c12:	e005      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61bb      	str	r3, [r7, #24]
      break;
 8003c18:	e002      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003c1a:	4b07      	ldr	r3, [pc, #28]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c1c:	61bb      	str	r3, [r7, #24]
      break;
 8003c1e:	bf00      	nop
  }

  return sysclockfreq;
 8003c20:	69bb      	ldr	r3, [r7, #24]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3724      	adds	r7, #36	@ 0x24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	58024400 	.word	0x58024400
 8003c34:	03d09000 	.word	0x03d09000
 8003c38:	003d0900 	.word	0x003d0900
 8003c3c:	017d7840 	.word	0x017d7840
 8003c40:	46000000 	.word	0x46000000
 8003c44:	4c742400 	.word	0x4c742400
 8003c48:	4a742400 	.word	0x4a742400
 8003c4c:	4bbebc20 	.word	0x4bbebc20

08003c50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e049      	b.n	8003cf6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f841 	bl	8003cfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4610      	mov	r0, r2
 8003c90:	f000 f8d8 	bl	8003e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d001      	beq.n	8003d2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e04c      	b.n	8003dc6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a26      	ldr	r2, [pc, #152]	@ (8003dd4 <HAL_TIM_Base_Start+0xc0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d022      	beq.n	8003d84 <HAL_TIM_Base_Start+0x70>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d46:	d01d      	beq.n	8003d84 <HAL_TIM_Base_Start+0x70>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a22      	ldr	r2, [pc, #136]	@ (8003dd8 <HAL_TIM_Base_Start+0xc4>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d018      	beq.n	8003d84 <HAL_TIM_Base_Start+0x70>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a21      	ldr	r2, [pc, #132]	@ (8003ddc <HAL_TIM_Base_Start+0xc8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d013      	beq.n	8003d84 <HAL_TIM_Base_Start+0x70>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1f      	ldr	r2, [pc, #124]	@ (8003de0 <HAL_TIM_Base_Start+0xcc>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d00e      	beq.n	8003d84 <HAL_TIM_Base_Start+0x70>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8003de4 <HAL_TIM_Base_Start+0xd0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d009      	beq.n	8003d84 <HAL_TIM_Base_Start+0x70>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1c      	ldr	r2, [pc, #112]	@ (8003de8 <HAL_TIM_Base_Start+0xd4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d004      	beq.n	8003d84 <HAL_TIM_Base_Start+0x70>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003dec <HAL_TIM_Base_Start+0xd8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d115      	bne.n	8003db0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	4b19      	ldr	r3, [pc, #100]	@ (8003df0 <HAL_TIM_Base_Start+0xdc>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b06      	cmp	r3, #6
 8003d94:	d015      	beq.n	8003dc2 <HAL_TIM_Base_Start+0xae>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d9c:	d011      	beq.n	8003dc2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f042 0201 	orr.w	r2, r2, #1
 8003dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dae:	e008      	b.n	8003dc2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	e000      	b.n	8003dc4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40010000 	.word	0x40010000
 8003dd8:	40000400 	.word	0x40000400
 8003ddc:	40000800 	.word	0x40000800
 8003de0:	40000c00 	.word	0x40000c00
 8003de4:	40010400 	.word	0x40010400
 8003de8:	40001800 	.word	0x40001800
 8003dec:	40014000 	.word	0x40014000
 8003df0:	00010007 	.word	0x00010007

08003df4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6a1a      	ldr	r2, [r3, #32]
 8003e02:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10f      	bne.n	8003e2c <HAL_TIM_Base_Stop+0x38>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6a1a      	ldr	r2, [r3, #32]
 8003e12:	f240 4344 	movw	r3, #1092	@ 0x444
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d107      	bne.n	8003e2c <HAL_TIM_Base_Stop+0x38>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0201 	bic.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
	...

08003e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a46      	ldr	r2, [pc, #280]	@ (8003f70 <TIM_Base_SetConfig+0x12c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d013      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e62:	d00f      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a43      	ldr	r2, [pc, #268]	@ (8003f74 <TIM_Base_SetConfig+0x130>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00b      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a42      	ldr	r2, [pc, #264]	@ (8003f78 <TIM_Base_SetConfig+0x134>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d007      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a41      	ldr	r2, [pc, #260]	@ (8003f7c <TIM_Base_SetConfig+0x138>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a40      	ldr	r2, [pc, #256]	@ (8003f80 <TIM_Base_SetConfig+0x13c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d108      	bne.n	8003e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a35      	ldr	r2, [pc, #212]	@ (8003f70 <TIM_Base_SetConfig+0x12c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01f      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea4:	d01b      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a32      	ldr	r2, [pc, #200]	@ (8003f74 <TIM_Base_SetConfig+0x130>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d017      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a31      	ldr	r2, [pc, #196]	@ (8003f78 <TIM_Base_SetConfig+0x134>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a30      	ldr	r2, [pc, #192]	@ (8003f7c <TIM_Base_SetConfig+0x138>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00f      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8003f80 <TIM_Base_SetConfig+0x13c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00b      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a2e      	ldr	r2, [pc, #184]	@ (8003f84 <TIM_Base_SetConfig+0x140>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d007      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a2d      	ldr	r2, [pc, #180]	@ (8003f88 <TIM_Base_SetConfig+0x144>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d003      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2c      	ldr	r2, [pc, #176]	@ (8003f8c <TIM_Base_SetConfig+0x148>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d108      	bne.n	8003ef0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a16      	ldr	r2, [pc, #88]	@ (8003f70 <TIM_Base_SetConfig+0x12c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00f      	beq.n	8003f3c <TIM_Base_SetConfig+0xf8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a18      	ldr	r2, [pc, #96]	@ (8003f80 <TIM_Base_SetConfig+0x13c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00b      	beq.n	8003f3c <TIM_Base_SetConfig+0xf8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a17      	ldr	r2, [pc, #92]	@ (8003f84 <TIM_Base_SetConfig+0x140>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d007      	beq.n	8003f3c <TIM_Base_SetConfig+0xf8>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a16      	ldr	r2, [pc, #88]	@ (8003f88 <TIM_Base_SetConfig+0x144>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d003      	beq.n	8003f3c <TIM_Base_SetConfig+0xf8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a15      	ldr	r2, [pc, #84]	@ (8003f8c <TIM_Base_SetConfig+0x148>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d103      	bne.n	8003f44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d105      	bne.n	8003f62 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f023 0201 	bic.w	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	611a      	str	r2, [r3, #16]
  }
}
 8003f62:	bf00      	nop
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40010000 	.word	0x40010000
 8003f74:	40000400 	.word	0x40000400
 8003f78:	40000800 	.word	0x40000800
 8003f7c:	40000c00 	.word	0x40000c00
 8003f80:	40010400 	.word	0x40010400
 8003f84:	40014000 	.word	0x40014000
 8003f88:	40014400 	.word	0x40014400
 8003f8c:	40014800 	.word	0x40014800

08003f90 <memset>:
 8003f90:	4402      	add	r2, r0
 8003f92:	4603      	mov	r3, r0
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d100      	bne.n	8003f9a <memset+0xa>
 8003f98:	4770      	bx	lr
 8003f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f9e:	e7f9      	b.n	8003f94 <memset+0x4>

08003fa0 <__libc_init_array>:
 8003fa0:	b570      	push	{r4, r5, r6, lr}
 8003fa2:	4d0d      	ldr	r5, [pc, #52]	@ (8003fd8 <__libc_init_array+0x38>)
 8003fa4:	4c0d      	ldr	r4, [pc, #52]	@ (8003fdc <__libc_init_array+0x3c>)
 8003fa6:	1b64      	subs	r4, r4, r5
 8003fa8:	10a4      	asrs	r4, r4, #2
 8003faa:	2600      	movs	r6, #0
 8003fac:	42a6      	cmp	r6, r4
 8003fae:	d109      	bne.n	8003fc4 <__libc_init_array+0x24>
 8003fb0:	4d0b      	ldr	r5, [pc, #44]	@ (8003fe0 <__libc_init_array+0x40>)
 8003fb2:	4c0c      	ldr	r4, [pc, #48]	@ (8003fe4 <__libc_init_array+0x44>)
 8003fb4:	f000 f818 	bl	8003fe8 <_init>
 8003fb8:	1b64      	subs	r4, r4, r5
 8003fba:	10a4      	asrs	r4, r4, #2
 8003fbc:	2600      	movs	r6, #0
 8003fbe:	42a6      	cmp	r6, r4
 8003fc0:	d105      	bne.n	8003fce <__libc_init_array+0x2e>
 8003fc2:	bd70      	pop	{r4, r5, r6, pc}
 8003fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc8:	4798      	blx	r3
 8003fca:	3601      	adds	r6, #1
 8003fcc:	e7ee      	b.n	8003fac <__libc_init_array+0xc>
 8003fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd2:	4798      	blx	r3
 8003fd4:	3601      	adds	r6, #1
 8003fd6:	e7f2      	b.n	8003fbe <__libc_init_array+0x1e>
 8003fd8:	08004018 	.word	0x08004018
 8003fdc:	08004018 	.word	0x08004018
 8003fe0:	08004018 	.word	0x08004018
 8003fe4:	0800401c 	.word	0x0800401c

08003fe8 <_init>:
 8003fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fea:	bf00      	nop
 8003fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fee:	bc08      	pop	{r3}
 8003ff0:	469e      	mov	lr, r3
 8003ff2:	4770      	bx	lr

08003ff4 <_fini>:
 8003ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff6:	bf00      	nop
 8003ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ffa:	bc08      	pop	{r3}
 8003ffc:	469e      	mov	lr, r3
 8003ffe:	4770      	bx	lr
