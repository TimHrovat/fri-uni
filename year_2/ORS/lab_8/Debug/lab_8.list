
lab_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060fc  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08006394  08006394  00007394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080063c4  080063c4  000073c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080063cc  080063cc  000073cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080063d0  080063d0  000073d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  080063d4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009d6c  24000010  080063e4  00008010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24009d7c  080063e4  00008d7c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011622  00000000  00000000  0000803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001d95  00000000  00000000  00019660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000df8  00000000  00000000  0001b3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000af5  00000000  00000000  0001c1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036c73  00000000  00000000  0001cce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013707  00000000  00000000  00053958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00163693  00000000  00000000  0006705f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ca6f2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003b6c  00000000  00000000  001ca738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005e  00000000  00000000  001ce2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800637c 	.word	0x0800637c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800637c 	.word	0x0800637c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <start_timer>:
#define SIZE 40000
uint8_t data[SIZE];
DMA_HandleTypeDef dma1_struct = {0};
UART_HandleTypeDef uart;

void start_timer() {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	@ 0x50
 80005cc:	af00      	add	r7, sp, #0
  __HAL_RCC_TIM2_CLK_ENABLE();
 80005ce:	4b16      	ldr	r3, [pc, #88]	@ (8000628 <start_timer+0x60>)
 80005d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80005d4:	4a14      	ldr	r2, [pc, #80]	@ (8000628 <start_timer+0x60>)
 80005d6:	f043 0301 	orr.w	r3, r3, #1
 80005da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80005de:	4b12      	ldr	r3, [pc, #72]	@ (8000628 <start_timer+0x60>)
 80005e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	683b      	ldr	r3, [r7, #0]
  TIM_HandleTypeDef timer = {0};
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	224c      	movs	r2, #76	@ 0x4c
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f005 fe96 	bl	8006324 <memset>
  timer.Instance = TIM2;
 80005f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005fc:	607b      	str	r3, [r7, #4]
  timer.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
  timer.Init.Period = 100000000;
 8000602:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <start_timer+0x64>)
 8000604:	613b      	str	r3, [r7, #16]
  timer.Init.Prescaler = 64 -1;
 8000606:	233f      	movs	r3, #63	@ 0x3f
 8000608:	60bb      	str	r3, [r7, #8]
  HAL_TIM_Base_Init(&timer);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f005 fce9 	bl	8005fe4 <HAL_TIM_Base_Init>

  HAL_TIM_Base_Start(&timer);
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	4618      	mov	r0, r3
 8000616:	f005 fd47 	bl	80060a8 <HAL_TIM_Base_Start>
  __HAL_TIM_SetCounter(&timer, 0);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000620:	bf00      	nop
 8000622:	3750      	adds	r7, #80	@ 0x50
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	58024400 	.word	0x58024400
 800062c:	05f5e100 	.word	0x05f5e100

08000630 <stop_timer>:

void stop_timer() {
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	@ 0x50
 8000634:	af00      	add	r7, sp, #0
  TIM_HandleTypeDef timer = {0};
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	224c      	movs	r2, #76	@ 0x4c
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f005 fe71 	bl	8006324 <memset>
  timer.Instance = TIM2;
 8000642:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000646:	607b      	str	r3, [r7, #4]
  HAL_TIM_Base_Stop(&timer);
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	4618      	mov	r0, r3
 800064c:	f005 fd9c 	bl	8006188 <HAL_TIM_Base_Stop>
}
 8000650:	bf00      	nop
 8000652:	3750      	adds	r7, #80	@ 0x50
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <get_time>:

uint32_t get_time() {
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	@ 0x50
 800065c:	af00      	add	r7, sp, #0
  TIM_HandleTypeDef timer = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	224c      	movs	r2, #76	@ 0x4c
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f005 fe5d 	bl	8006324 <memset>
  timer.Instance = TIM2;
 800066a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800066e:	607b      	str	r3, [r7, #4]
  return __HAL_TIM_GetCounter(&timer);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8000674:	4618      	mov	r0, r3
 8000676:	3750      	adds	r7, #80	@ 0x50
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <init_leds>:

void init_leds() {
 800067c:	b580      	push	{r7, lr}
 800067e:	b090      	sub	sp, #64	@ 0x40
 8000680:	af00      	add	r7, sp, #0
	  // green led
	  GPIO_InitTypeDef led_pd3 = {0};
 8000682:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]
	  led_pd3.Pin = GPIO_PIN_3;
 8000692:	2308      	movs	r3, #8
 8000694:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  led_pd3.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	633b      	str	r3, [r7, #48]	@ 0x30
	  led_pd3.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	637b      	str	r3, [r7, #52]	@ 0x34
	  led_pd3.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	63bb      	str	r3, [r7, #56]	@ 0x38
	  HAL_GPIO_Init(GPIOD, &led_pd3);
 80006a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006a6:	4619      	mov	r1, r3
 80006a8:	4820      	ldr	r0, [pc, #128]	@ (800072c <init_leds+0xb0>)
 80006aa:	f003 fff3 	bl	8004694 <HAL_GPIO_Init>

	  // green led
	  GPIO_InitTypeDef led_pj2 = {0};
 80006ae:	f107 0318 	add.w	r3, r7, #24
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]
	  led_pj2.Pin = GPIO_PIN_2;
 80006be:	2304      	movs	r3, #4
 80006c0:	61bb      	str	r3, [r7, #24]
	  led_pj2.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	61fb      	str	r3, [r7, #28]
	  led_pj2.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	623b      	str	r3, [r7, #32]
	  led_pj2.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
	  HAL_GPIO_Init(GPIOJ, &led_pj2);
 80006ce:	f107 0318 	add.w	r3, r7, #24
 80006d2:	4619      	mov	r1, r3
 80006d4:	4816      	ldr	r0, [pc, #88]	@ (8000730 <init_leds+0xb4>)
 80006d6:	f003 ffdd 	bl	8004694 <HAL_GPIO_Init>

	  // red led
	  GPIO_InitTypeDef led_pi13 = {0};
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
	  led_pi13.Pin = GPIO_PIN_13;
 80006e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ec:	607b      	str	r3, [r7, #4]
	  led_pi13.Mode = GPIO_MODE_OUTPUT_OD;
 80006ee:	2311      	movs	r3, #17
 80006f0:	60bb      	str	r3, [r7, #8]
	  led_pi13.Pull = GPIO_PULLUP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	60fb      	str	r3, [r7, #12]
	  led_pi13.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOI, &led_pi13);
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4619      	mov	r1, r3
 80006fe:	480d      	ldr	r0, [pc, #52]	@ (8000734 <init_leds+0xb8>)
 8000700:	f003 ffc8 	bl	8004694 <HAL_GPIO_Init>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2108      	movs	r1, #8
 8000708:	4808      	ldr	r0, [pc, #32]	@ (800072c <init_leds+0xb0>)
 800070a:	f004 f973 	bl	80049f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2, GPIO_PIN_SET);
 800070e:	2201      	movs	r2, #1
 8000710:	2104      	movs	r1, #4
 8000712:	4807      	ldr	r0, [pc, #28]	@ (8000730 <init_leds+0xb4>)
 8000714:	f004 f96e 	bl	80049f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800071e:	4805      	ldr	r0, [pc, #20]	@ (8000734 <init_leds+0xb8>)
 8000720:	f004 f968 	bl	80049f4 <HAL_GPIO_WritePin>
}
 8000724:	bf00      	nop
 8000726:	3740      	adds	r7, #64	@ 0x40
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	58020c00 	.word	0x58020c00
 8000730:	58022400 	.word	0x58022400
 8000734:	58022000 	.word	0x58022000

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	@ 0x28
 800073c:	af00      	add	r7, sp, #0
    MPU_Config();
 800073e:	f000 f997 	bl	8000a70 <MPU_Config>
    HAL_Init();
 8000742:	f001 fca9 	bl	8002098 <HAL_Init>
    SystemClock_Config();
 8000746:	f000 f929 	bl	800099c <SystemClock_Config>

    __HAL_RCC_DMA1_CLK_ENABLE();
 800074a:	4b7f      	ldr	r3, [pc, #508]	@ (8000948 <main+0x210>)
 800074c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000750:	4a7d      	ldr	r2, [pc, #500]	@ (8000948 <main+0x210>)
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800075a:	4b7b      	ldr	r3, [pc, #492]	@ (8000948 <main+0x210>)
 800075c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000768:	4b77      	ldr	r3, [pc, #476]	@ (8000948 <main+0x210>)
 800076a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800076e:	4a76      	ldr	r2, [pc, #472]	@ (8000948 <main+0x210>)
 8000770:	f043 0308 	orr.w	r3, r3, #8
 8000774:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000778:	4b73      	ldr	r3, [pc, #460]	@ (8000948 <main+0x210>)
 800077a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800077e:	f003 0308 	and.w	r3, r3, #8
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000786:	4b70      	ldr	r3, [pc, #448]	@ (8000948 <main+0x210>)
 8000788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800078c:	4a6e      	ldr	r2, [pc, #440]	@ (8000948 <main+0x210>)
 800078e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000792:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000796:	4b6c      	ldr	r3, [pc, #432]	@ (8000948 <main+0x210>)
 8000798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800079c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80007a4:	4b68      	ldr	r3, [pc, #416]	@ (8000948 <main+0x210>)
 80007a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007aa:	4a67      	ldr	r2, [pc, #412]	@ (8000948 <main+0x210>)
 80007ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b4:	4b64      	ldr	r3, [pc, #400]	@ (8000948 <main+0x210>)
 80007b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b61      	ldr	r3, [pc, #388]	@ (8000948 <main+0x210>)
 80007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c8:	4a5f      	ldr	r2, [pc, #380]	@ (8000948 <main+0x210>)
 80007ca:	f043 0302 	orr.w	r3, r3, #2
 80007ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d2:	4b5d      	ldr	r3, [pc, #372]	@ (8000948 <main+0x210>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	f003 0302 	and.w	r3, r3, #2
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_USART3_CLK_ENABLE();
 80007e0:	4b59      	ldr	r3, [pc, #356]	@ (8000948 <main+0x210>)
 80007e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80007e6:	4a58      	ldr	r2, [pc, #352]	@ (8000948 <main+0x210>)
 80007e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80007f0:	4b55      	ldr	r3, [pc, #340]	@ (8000948 <main+0x210>)
 80007f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80007f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

    init_leds();
 80007fe:	f7ff ff3d 	bl	800067c <init_leds>

    // UART and DMA initialization
    uart.Instance = USART3;
 8000802:	4b52      	ldr	r3, [pc, #328]	@ (800094c <main+0x214>)
 8000804:	4a52      	ldr	r2, [pc, #328]	@ (8000950 <main+0x218>)
 8000806:	601a      	str	r2, [r3, #0]
    uart.Init.BaudRate = 115200;
 8000808:	4b50      	ldr	r3, [pc, #320]	@ (800094c <main+0x214>)
 800080a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800080e:	605a      	str	r2, [r3, #4]
    uart.Init.WordLength = UART_WORDLENGTH_8B;
 8000810:	4b4e      	ldr	r3, [pc, #312]	@ (800094c <main+0x214>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
    uart.Init.StopBits = UART_STOPBITS_1;
 8000816:	4b4d      	ldr	r3, [pc, #308]	@ (800094c <main+0x214>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
    uart.Init.Parity = UART_PARITY_NONE;
 800081c:	4b4b      	ldr	r3, [pc, #300]	@ (800094c <main+0x214>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
    uart.Init.Mode = UART_MODE_TX_RX;
 8000822:	4b4a      	ldr	r3, [pc, #296]	@ (800094c <main+0x214>)
 8000824:	220c      	movs	r2, #12
 8000826:	615a      	str	r2, [r3, #20]
    uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000828:	4b48      	ldr	r3, [pc, #288]	@ (800094c <main+0x214>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
    HAL_UART_Init(&uart);
 800082e:	4847      	ldr	r0, [pc, #284]	@ (800094c <main+0x214>)
 8000830:	f000 f96a 	bl	8000b08 <HAL_UART_Init>

    dma1_struct.Instance = DMA1_Stream0;
 8000834:	4b47      	ldr	r3, [pc, #284]	@ (8000954 <main+0x21c>)
 8000836:	4a48      	ldr	r2, [pc, #288]	@ (8000958 <main+0x220>)
 8000838:	601a      	str	r2, [r3, #0]
    dma1_struct.Init.Request = DMA_REQUEST_USART3_TX;
 800083a:	4b46      	ldr	r3, [pc, #280]	@ (8000954 <main+0x21c>)
 800083c:	222e      	movs	r2, #46	@ 0x2e
 800083e:	605a      	str	r2, [r3, #4]
    dma1_struct.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000840:	4b44      	ldr	r3, [pc, #272]	@ (8000954 <main+0x21c>)
 8000842:	2240      	movs	r2, #64	@ 0x40
 8000844:	609a      	str	r2, [r3, #8]
    dma1_struct.Init.PeriphInc = DMA_PINC_DISABLE;
 8000846:	4b43      	ldr	r3, [pc, #268]	@ (8000954 <main+0x21c>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
    dma1_struct.Init.MemInc = DMA_MINC_ENABLE;
 800084c:	4b41      	ldr	r3, [pc, #260]	@ (8000954 <main+0x21c>)
 800084e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000852:	611a      	str	r2, [r3, #16]
    dma1_struct.Init.PeriphDataAlignment = DMA_MDATAALIGN_BYTE;
 8000854:	4b3f      	ldr	r3, [pc, #252]	@ (8000954 <main+0x21c>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
    dma1_struct.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800085a:	4b3e      	ldr	r3, [pc, #248]	@ (8000954 <main+0x21c>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
    dma1_struct.Init.Mode = DMA_NORMAL;
 8000860:	4b3c      	ldr	r3, [pc, #240]	@ (8000954 <main+0x21c>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
    dma1_struct.Init.Priority = DMA_PRIORITY_LOW;
 8000866:	4b3b      	ldr	r3, [pc, #236]	@ (8000954 <main+0x21c>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
    dma1_struct.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800086c:	4b39      	ldr	r3, [pc, #228]	@ (8000954 <main+0x21c>)
 800086e:	2204      	movs	r2, #4
 8000870:	625a      	str	r2, [r3, #36]	@ 0x24
    dma1_struct.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8000872:	4b38      	ldr	r3, [pc, #224]	@ (8000954 <main+0x21c>)
 8000874:	2200      	movs	r2, #0
 8000876:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_DMA_Init(&dma1_struct);
 8000878:	4836      	ldr	r0, [pc, #216]	@ (8000954 <main+0x21c>)
 800087a:	f001 fe33 	bl	80024e4 <HAL_DMA_Init>

    __HAL_LINKDMA(&uart, hdmatx, dma1_struct);
 800087e:	4b33      	ldr	r3, [pc, #204]	@ (800094c <main+0x214>)
 8000880:	4a34      	ldr	r2, [pc, #208]	@ (8000954 <main+0x21c>)
 8000882:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000884:	4b33      	ldr	r3, [pc, #204]	@ (8000954 <main+0x21c>)
 8000886:	4a31      	ldr	r2, [pc, #196]	@ (800094c <main+0x214>)
 8000888:	639a      	str	r2, [r3, #56]	@ 0x38

    HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 5);
 800088a:	2205      	movs	r2, #5
 800088c:	2105      	movs	r1, #5
 800088e:	200b      	movs	r0, #11
 8000890:	f001 fd7b 	bl	800238a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000894:	200b      	movs	r0, #11
 8000896:	f001 fd92 	bl	80023be <HAL_NVIC_EnableIRQ>

    uint32_t start_time, dma_time, uart_time;

    // Initialize data buffer
    for (int i = 0; i < SIZE; i++) {
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
 800089e:	e014      	b.n	80008ca <main+0x192>
        data[i] = i % 255;
 80008a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008a2:	4b2e      	ldr	r3, [pc, #184]	@ (800095c <main+0x224>)
 80008a4:	fb83 1302 	smull	r1, r3, r3, r2
 80008a8:	4413      	add	r3, r2
 80008aa:	11d9      	asrs	r1, r3, #7
 80008ac:	17d3      	asrs	r3, r2, #31
 80008ae:	1ac9      	subs	r1, r1, r3
 80008b0:	460b      	mov	r3, r1
 80008b2:	021b      	lsls	r3, r3, #8
 80008b4:	1a5b      	subs	r3, r3, r1
 80008b6:	1ad1      	subs	r1, r2, r3
 80008b8:	b2c9      	uxtb	r1, r1
 80008ba:	4a29      	ldr	r2, [pc, #164]	@ (8000960 <main+0x228>)
 80008bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008be:	4413      	add	r3, r2
 80008c0:	460a      	mov	r2, r1
 80008c2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < SIZE; i++) {
 80008c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c6:	3301      	adds	r3, #1
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80008ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008cc:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80008d0:	4293      	cmp	r3, r2
 80008d2:	dde5      	ble.n	80008a0 <main+0x168>
    }

    // DMA Transfer
    start_timer();
 80008d4:	f7ff fe78 	bl	80005c8 <start_timer>
    start_time = get_time();
 80008d8:	f7ff febe 	bl	8000658 <get_time>
 80008dc:	6238      	str	r0, [r7, #32]
    HAL_UART_Transmit_DMA(&uart, data, SIZE);
 80008de:	f649 4240 	movw	r2, #40000	@ 0x9c40
 80008e2:	491f      	ldr	r1, [pc, #124]	@ (8000960 <main+0x228>)
 80008e4:	4819      	ldr	r0, [pc, #100]	@ (800094c <main+0x214>)
 80008e6:	f000 f9f7 	bl	8000cd8 <HAL_UART_Transmit_DMA>

    // Wait for DMA completion

    dma_time = get_time() - start_time;
 80008ea:	f7ff feb5 	bl	8000658 <get_time>
 80008ee:	4602      	mov	r2, r0
 80008f0:	6a3b      	ldr	r3, [r7, #32]
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	61fb      	str	r3, [r7, #28]
    stop_timer();
 80008f6:	f7ff fe9b 	bl	8000630 <stop_timer>

    // Set LED states to indicate completion
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2108      	movs	r1, #8
 80008fe:	4819      	ldr	r0, [pc, #100]	@ (8000964 <main+0x22c>)
 8000900:	f004 f878 	bl	80049f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2, GPIO_PIN_SET);
 8000904:	2201      	movs	r2, #1
 8000906:	2104      	movs	r1, #4
 8000908:	4817      	ldr	r0, [pc, #92]	@ (8000968 <main+0x230>)
 800090a:	f004 f873 	bl	80049f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_SET);
 800090e:	2201      	movs	r2, #1
 8000910:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000914:	4815      	ldr	r0, [pc, #84]	@ (800096c <main+0x234>)
 8000916:	f004 f86d 	bl	80049f4 <HAL_GPIO_WritePin>

    // UART Transfer
    start_timer();
 800091a:	f7ff fe55 	bl	80005c8 <start_timer>
    start_time = get_time();
 800091e:	f7ff fe9b 	bl	8000658 <get_time>
 8000922:	6238      	str	r0, [r7, #32]
    HAL_UART_Transmit(&uart, data, SIZE, HAL_MAX_DELAY);
 8000924:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000928:	f649 4240 	movw	r2, #40000	@ 0x9c40
 800092c:	490c      	ldr	r1, [pc, #48]	@ (8000960 <main+0x228>)
 800092e:	4807      	ldr	r0, [pc, #28]	@ (800094c <main+0x214>)
 8000930:	f000 f944 	bl	8000bbc <HAL_UART_Transmit>
    uart_time = get_time() - start_time;
 8000934:	f7ff fe90 	bl	8000658 <get_time>
 8000938:	4602      	mov	r2, r0
 800093a:	6a3b      	ldr	r3, [r7, #32]
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	61bb      	str	r3, [r7, #24]
    stop_timer();
 8000940:	f7ff fe76 	bl	8000630 <stop_timer>

  while (1) {
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <main+0x20c>
 8000948:	58024400 	.word	0x58024400
 800094c:	24009ce4 	.word	0x24009ce4
 8000950:	40004800 	.word	0x40004800
 8000954:	24009c6c 	.word	0x24009c6c
 8000958:	40020010 	.word	0x40020010
 800095c:	80808081 	.word	0x80808081
 8000960:	2400002c 	.word	0x2400002c
 8000964:	58020c00 	.word	0x58020c00
 8000968:	58022400 	.word	0x58022400
 800096c:	58022000 	.word	0x58022000

08000970 <DMA1_Stream0_IRQHandler>:
  }
}

void DMA1_Stream0_IRQHandler(void) {
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&dma1_struct);
 8000974:	4807      	ldr	r0, [pc, #28]	@ (8000994 <DMA1_Stream0_IRQHandler+0x24>)
 8000976:	f002 fb7b 	bl	8003070 <HAL_DMA_IRQHandler>

    if (dma1_struct.State == HAL_DMA_STATE_READY) {
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <DMA1_Stream0_IRQHandler+0x24>)
 800097c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2b01      	cmp	r3, #1
 8000984:	d103      	bne.n	800098e <DMA1_Stream0_IRQHandler+0x1e>
        uart.gState = HAL_UART_STATE_READY;
 8000986:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <DMA1_Stream0_IRQHandler+0x28>)
 8000988:	2220      	movs	r2, #32
 800098a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	24009c6c 	.word	0x24009c6c
 8000998:	24009ce4 	.word	0x24009ce4

0800099c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b09c      	sub	sp, #112	@ 0x70
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a6:	224c      	movs	r2, #76	@ 0x4c
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f005 fcba 	bl	8006324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2220      	movs	r2, #32
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f005 fcb4 	bl	8006324 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009bc:	2002      	movs	r0, #2
 80009be:	f004 f833 	bl	8004a28 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4b28      	ldr	r3, [pc, #160]	@ (8000a68 <SystemClock_Config+0xcc>)
 80009c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ca:	4a27      	ldr	r2, [pc, #156]	@ (8000a68 <SystemClock_Config+0xcc>)
 80009cc:	f023 0301 	bic.w	r3, r3, #1
 80009d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009d2:	4b25      	ldr	r3, [pc, #148]	@ (8000a68 <SystemClock_Config+0xcc>)
 80009d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	4b23      	ldr	r3, [pc, #140]	@ (8000a6c <SystemClock_Config+0xd0>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009e4:	4a21      	ldr	r2, [pc, #132]	@ (8000a6c <SystemClock_Config+0xd0>)
 80009e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <SystemClock_Config+0xd0>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009f8:	bf00      	nop
 80009fa:	4b1c      	ldr	r3, [pc, #112]	@ (8000a6c <SystemClock_Config+0xd0>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a06:	d1f8      	bne.n	80009fa <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a10:	2340      	movs	r3, #64	@ 0x40
 8000a12:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f004 f83d 	bl	8004a9c <HAL_RCC_OscConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a28:	f000 f84e 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2c:	233f      	movs	r3, #63	@ 0x3f
 8000a2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2101      	movs	r1, #1
 8000a50:	4618      	mov	r0, r3
 8000a52:	f004 fc7d 	bl	8005350 <HAL_RCC_ClockConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a5c:	f000 f834 	bl	8000ac8 <Error_Handler>
  }
}
 8000a60:	bf00      	nop
 8000a62:	3770      	adds	r7, #112	@ 0x70
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	58000400 	.word	0x58000400
 8000a6c:	58024800 	.word	0x58024800

08000a70 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a76:	463b      	mov	r3, r7
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a82:	f001 fcb7 	bl	80023f4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a86:	2301      	movs	r3, #1
 8000a88:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a92:	231f      	movs	r3, #31
 8000a94:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a96:	2387      	movs	r3, #135	@ 0x87
 8000a98:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 fcd5 	bl	8002464 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000aba:	2004      	movs	r0, #4
 8000abc:	f001 fcb2 	bl	8002424 <HAL_MPU_Enable>

}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <Error_Handler+0x8>

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	4b0a      	ldr	r3, [pc, #40]	@ (8000b04 <HAL_MspInit+0x30>)
 8000adc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ae0:	4a08      	ldr	r2, [pc, #32]	@ (8000b04 <HAL_MspInit+0x30>)
 8000ae2:	f043 0302 	orr.w	r3, r3, #2
 8000ae6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_MspInit+0x30>)
 8000aec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000af0:	f003 0302 	and.w	r3, r3, #2
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	58024400 	.word	0x58024400

08000b08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d101      	bne.n	8000b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e042      	b.n	8000ba0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d106      	bne.n	8000b32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2200      	movs	r2, #0
 8000b28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f000 f83b 	bl	8000ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2224      	movs	r2, #36	@ 0x24
 8000b36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f022 0201 	bic.w	r2, r2, #1
 8000b48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d002      	beq.n	8000b58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f000 fec6 	bl	80018e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 f95b 	bl	8000e14 <UART_SetConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d101      	bne.n	8000b68 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	e01b      	b.n	8000ba0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8000b76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	689a      	ldr	r2, [r3, #8]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8000b86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f042 0201 	orr.w	r2, r2, #1
 8000b96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f000 ff45 	bl	8001a28 <UART_CheckIdleState>
 8000b9e:	4603      	mov	r3, r0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	@ 0x28
 8000bc0:	af02      	add	r7, sp, #8
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bd2:	2b20      	cmp	r3, #32
 8000bd4:	d17b      	bne.n	8000cce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d002      	beq.n	8000be2 <HAL_UART_Transmit+0x26>
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d101      	bne.n	8000be6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e074      	b.n	8000cd0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	2200      	movs	r2, #0
 8000bea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	2221      	movs	r2, #33	@ 0x21
 8000bf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000bf6:	f001 fad5 	bl	80021a4 <HAL_GetTick>
 8000bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	88fa      	ldrh	r2, [r7, #6]
 8000c00:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	88fa      	ldrh	r2, [r7, #6]
 8000c08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000c14:	d108      	bne.n	8000c28 <HAL_UART_Transmit+0x6c>
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	691b      	ldr	r3, [r3, #16]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d104      	bne.n	8000c28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	61bb      	str	r3, [r7, #24]
 8000c26:	e003      	b.n	8000c30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8000c30:	e030      	b.n	8000c94 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2180      	movs	r1, #128	@ 0x80
 8000c3c:	68f8      	ldr	r0, [r7, #12]
 8000c3e:	f000 ff9d 	bl	8001b7c <UART_WaitOnFlagUntilTimeout>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d005      	beq.n	8000c54 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2220      	movs	r2, #32
 8000c4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8000c50:	2303      	movs	r3, #3
 8000c52:	e03d      	b.n	8000cd0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10b      	bne.n	8000c72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c68:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	3302      	adds	r3, #2
 8000c6e:	61bb      	str	r3, [r7, #24]
 8000c70:	e007      	b.n	8000c82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	781a      	ldrb	r2, [r3, #0]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d1c8      	bne.n	8000c32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2140      	movs	r1, #64	@ 0x40
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f000 ff66 	bl	8001b7c <UART_WaitOnFlagUntilTimeout>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d005      	beq.n	8000cc2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2220      	movs	r2, #32
 8000cba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	e006      	b.n	8000cd0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2220      	movs	r2, #32
 8000cc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e000      	b.n	8000cd0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8000cce:	2302      	movs	r3, #2
  }
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	@ 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cec:	2b20      	cmp	r3, #32
 8000cee:	d167      	bne.n	8000dc0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <HAL_UART_Transmit_DMA+0x24>
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d101      	bne.n	8000d00 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e060      	b.n	8000dc2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	88fa      	ldrh	r2, [r7, #6]
 8000d0a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	88fa      	ldrh	r2, [r7, #6]
 8000d12:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2221      	movs	r2, #33	@ 0x21
 8000d22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d028      	beq.n	8000d80 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000d32:	4a26      	ldr	r2, [pc, #152]	@ (8000dcc <HAL_UART_Transmit_DMA+0xf4>)
 8000d34:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000d3a:	4a25      	ldr	r2, [pc, #148]	@ (8000dd0 <HAL_UART_Transmit_DMA+0xf8>)
 8000d3c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000d42:	4a24      	ldr	r2, [pc, #144]	@ (8000dd4 <HAL_UART_Transmit_DMA+0xfc>)
 8000d44:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d56:	4619      	mov	r1, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	3328      	adds	r3, #40	@ 0x28
 8000d5e:	461a      	mov	r2, r3
 8000d60:	88fb      	ldrh	r3, [r7, #6]
 8000d62:	f001 ff1b 	bl	8002b9c <HAL_DMA_Start_IT>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d009      	beq.n	8000d80 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2210      	movs	r2, #16
 8000d70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2220      	movs	r2, #32
 8000d78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e020      	b.n	8000dc2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2240      	movs	r2, #64	@ 0x40
 8000d86:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	3308      	adds	r3, #8
 8000d8e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	e853 3f00 	ldrex	r3, [r3]
 8000d96:	613b      	str	r3, [r7, #16]
   return(result);
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3308      	adds	r3, #8
 8000da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000da8:	623a      	str	r2, [r7, #32]
 8000daa:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000dac:	69f9      	ldr	r1, [r7, #28]
 8000dae:	6a3a      	ldr	r2, [r7, #32]
 8000db0:	e841 2300 	strex	r3, r2, [r1]
 8000db4:	61bb      	str	r3, [r7, #24]
   return(result);
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1e5      	bne.n	8000d88 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	e000      	b.n	8000dc2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8000dc0:	2302      	movs	r3, #2
  }
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3728      	adds	r7, #40	@ 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	08001da5 	.word	0x08001da5
 8000dd0:	08001e3b 	.word	0x08001e3b
 8000dd4:	08001e57 	.word	0x08001e57

08000dd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e18:	b092      	sub	sp, #72	@ 0x48
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	431a      	orrs	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	69db      	ldr	r3, [r3, #28]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4bbe      	ldr	r3, [pc, #760]	@ (800113c <UART_SetConfig+0x328>)
 8000e44:	4013      	ands	r3, r2
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	6812      	ldr	r2, [r2, #0]
 8000e4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	430a      	orrs	r2, r1
 8000e64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4ab3      	ldr	r2, [pc, #716]	@ (8001140 <UART_SetConfig+0x32c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d004      	beq.n	8000e80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	6a1b      	ldr	r3, [r3, #32]
 8000e7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	4baf      	ldr	r3, [pc, #700]	@ (8001144 <UART_SetConfig+0x330>)
 8000e88:	4013      	ands	r3, r2
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	6812      	ldr	r2, [r2, #0]
 8000e8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000e90:	430b      	orrs	r3, r1
 8000e92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e9a:	f023 010f 	bic.w	r1, r3, #15
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4aa6      	ldr	r2, [pc, #664]	@ (8001148 <UART_SetConfig+0x334>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d177      	bne.n	8000fa4 <UART_SetConfig+0x190>
 8000eb4:	4ba5      	ldr	r3, [pc, #660]	@ (800114c <UART_SetConfig+0x338>)
 8000eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000ebc:	2b28      	cmp	r3, #40	@ 0x28
 8000ebe:	d86d      	bhi.n	8000f9c <UART_SetConfig+0x188>
 8000ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ec8 <UART_SetConfig+0xb4>)
 8000ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec6:	bf00      	nop
 8000ec8:	08000f6d 	.word	0x08000f6d
 8000ecc:	08000f9d 	.word	0x08000f9d
 8000ed0:	08000f9d 	.word	0x08000f9d
 8000ed4:	08000f9d 	.word	0x08000f9d
 8000ed8:	08000f9d 	.word	0x08000f9d
 8000edc:	08000f9d 	.word	0x08000f9d
 8000ee0:	08000f9d 	.word	0x08000f9d
 8000ee4:	08000f9d 	.word	0x08000f9d
 8000ee8:	08000f75 	.word	0x08000f75
 8000eec:	08000f9d 	.word	0x08000f9d
 8000ef0:	08000f9d 	.word	0x08000f9d
 8000ef4:	08000f9d 	.word	0x08000f9d
 8000ef8:	08000f9d 	.word	0x08000f9d
 8000efc:	08000f9d 	.word	0x08000f9d
 8000f00:	08000f9d 	.word	0x08000f9d
 8000f04:	08000f9d 	.word	0x08000f9d
 8000f08:	08000f7d 	.word	0x08000f7d
 8000f0c:	08000f9d 	.word	0x08000f9d
 8000f10:	08000f9d 	.word	0x08000f9d
 8000f14:	08000f9d 	.word	0x08000f9d
 8000f18:	08000f9d 	.word	0x08000f9d
 8000f1c:	08000f9d 	.word	0x08000f9d
 8000f20:	08000f9d 	.word	0x08000f9d
 8000f24:	08000f9d 	.word	0x08000f9d
 8000f28:	08000f85 	.word	0x08000f85
 8000f2c:	08000f9d 	.word	0x08000f9d
 8000f30:	08000f9d 	.word	0x08000f9d
 8000f34:	08000f9d 	.word	0x08000f9d
 8000f38:	08000f9d 	.word	0x08000f9d
 8000f3c:	08000f9d 	.word	0x08000f9d
 8000f40:	08000f9d 	.word	0x08000f9d
 8000f44:	08000f9d 	.word	0x08000f9d
 8000f48:	08000f8d 	.word	0x08000f8d
 8000f4c:	08000f9d 	.word	0x08000f9d
 8000f50:	08000f9d 	.word	0x08000f9d
 8000f54:	08000f9d 	.word	0x08000f9d
 8000f58:	08000f9d 	.word	0x08000f9d
 8000f5c:	08000f9d 	.word	0x08000f9d
 8000f60:	08000f9d 	.word	0x08000f9d
 8000f64:	08000f9d 	.word	0x08000f9d
 8000f68:	08000f95 	.word	0x08000f95
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8000f72:	e222      	b.n	80013ba <UART_SetConfig+0x5a6>
 8000f74:	2304      	movs	r3, #4
 8000f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8000f7a:	e21e      	b.n	80013ba <UART_SetConfig+0x5a6>
 8000f7c:	2308      	movs	r3, #8
 8000f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8000f82:	e21a      	b.n	80013ba <UART_SetConfig+0x5a6>
 8000f84:	2310      	movs	r3, #16
 8000f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8000f8a:	e216      	b.n	80013ba <UART_SetConfig+0x5a6>
 8000f8c:	2320      	movs	r3, #32
 8000f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8000f92:	e212      	b.n	80013ba <UART_SetConfig+0x5a6>
 8000f94:	2340      	movs	r3, #64	@ 0x40
 8000f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8000f9a:	e20e      	b.n	80013ba <UART_SetConfig+0x5a6>
 8000f9c:	2380      	movs	r3, #128	@ 0x80
 8000f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8000fa2:	e20a      	b.n	80013ba <UART_SetConfig+0x5a6>
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a69      	ldr	r2, [pc, #420]	@ (8001150 <UART_SetConfig+0x33c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d130      	bne.n	8001010 <UART_SetConfig+0x1fc>
 8000fae:	4b67      	ldr	r3, [pc, #412]	@ (800114c <UART_SetConfig+0x338>)
 8000fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	2b05      	cmp	r3, #5
 8000fb8:	d826      	bhi.n	8001008 <UART_SetConfig+0x1f4>
 8000fba:	a201      	add	r2, pc, #4	@ (adr r2, 8000fc0 <UART_SetConfig+0x1ac>)
 8000fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc0:	08000fd9 	.word	0x08000fd9
 8000fc4:	08000fe1 	.word	0x08000fe1
 8000fc8:	08000fe9 	.word	0x08000fe9
 8000fcc:	08000ff1 	.word	0x08000ff1
 8000fd0:	08000ff9 	.word	0x08000ff9
 8000fd4:	08001001 	.word	0x08001001
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8000fde:	e1ec      	b.n	80013ba <UART_SetConfig+0x5a6>
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8000fe6:	e1e8      	b.n	80013ba <UART_SetConfig+0x5a6>
 8000fe8:	2308      	movs	r3, #8
 8000fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8000fee:	e1e4      	b.n	80013ba <UART_SetConfig+0x5a6>
 8000ff0:	2310      	movs	r3, #16
 8000ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8000ff6:	e1e0      	b.n	80013ba <UART_SetConfig+0x5a6>
 8000ff8:	2320      	movs	r3, #32
 8000ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8000ffe:	e1dc      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001000:	2340      	movs	r3, #64	@ 0x40
 8001002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001006:	e1d8      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001008:	2380      	movs	r3, #128	@ 0x80
 800100a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800100e:	e1d4      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a4f      	ldr	r2, [pc, #316]	@ (8001154 <UART_SetConfig+0x340>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d130      	bne.n	800107c <UART_SetConfig+0x268>
 800101a:	4b4c      	ldr	r3, [pc, #304]	@ (800114c <UART_SetConfig+0x338>)
 800101c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	2b05      	cmp	r3, #5
 8001024:	d826      	bhi.n	8001074 <UART_SetConfig+0x260>
 8001026:	a201      	add	r2, pc, #4	@ (adr r2, 800102c <UART_SetConfig+0x218>)
 8001028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102c:	08001045 	.word	0x08001045
 8001030:	0800104d 	.word	0x0800104d
 8001034:	08001055 	.word	0x08001055
 8001038:	0800105d 	.word	0x0800105d
 800103c:	08001065 	.word	0x08001065
 8001040:	0800106d 	.word	0x0800106d
 8001044:	2300      	movs	r3, #0
 8001046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800104a:	e1b6      	b.n	80013ba <UART_SetConfig+0x5a6>
 800104c:	2304      	movs	r3, #4
 800104e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001052:	e1b2      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001054:	2308      	movs	r3, #8
 8001056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800105a:	e1ae      	b.n	80013ba <UART_SetConfig+0x5a6>
 800105c:	2310      	movs	r3, #16
 800105e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001062:	e1aa      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001064:	2320      	movs	r3, #32
 8001066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800106a:	e1a6      	b.n	80013ba <UART_SetConfig+0x5a6>
 800106c:	2340      	movs	r3, #64	@ 0x40
 800106e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001072:	e1a2      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001074:	2380      	movs	r3, #128	@ 0x80
 8001076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800107a:	e19e      	b.n	80013ba <UART_SetConfig+0x5a6>
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a35      	ldr	r2, [pc, #212]	@ (8001158 <UART_SetConfig+0x344>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d130      	bne.n	80010e8 <UART_SetConfig+0x2d4>
 8001086:	4b31      	ldr	r3, [pc, #196]	@ (800114c <UART_SetConfig+0x338>)
 8001088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	2b05      	cmp	r3, #5
 8001090:	d826      	bhi.n	80010e0 <UART_SetConfig+0x2cc>
 8001092:	a201      	add	r2, pc, #4	@ (adr r2, 8001098 <UART_SetConfig+0x284>)
 8001094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001098:	080010b1 	.word	0x080010b1
 800109c:	080010b9 	.word	0x080010b9
 80010a0:	080010c1 	.word	0x080010c1
 80010a4:	080010c9 	.word	0x080010c9
 80010a8:	080010d1 	.word	0x080010d1
 80010ac:	080010d9 	.word	0x080010d9
 80010b0:	2300      	movs	r3, #0
 80010b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80010b6:	e180      	b.n	80013ba <UART_SetConfig+0x5a6>
 80010b8:	2304      	movs	r3, #4
 80010ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80010be:	e17c      	b.n	80013ba <UART_SetConfig+0x5a6>
 80010c0:	2308      	movs	r3, #8
 80010c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80010c6:	e178      	b.n	80013ba <UART_SetConfig+0x5a6>
 80010c8:	2310      	movs	r3, #16
 80010ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80010ce:	e174      	b.n	80013ba <UART_SetConfig+0x5a6>
 80010d0:	2320      	movs	r3, #32
 80010d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80010d6:	e170      	b.n	80013ba <UART_SetConfig+0x5a6>
 80010d8:	2340      	movs	r3, #64	@ 0x40
 80010da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80010de:	e16c      	b.n	80013ba <UART_SetConfig+0x5a6>
 80010e0:	2380      	movs	r3, #128	@ 0x80
 80010e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80010e6:	e168      	b.n	80013ba <UART_SetConfig+0x5a6>
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a1b      	ldr	r2, [pc, #108]	@ (800115c <UART_SetConfig+0x348>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d142      	bne.n	8001178 <UART_SetConfig+0x364>
 80010f2:	4b16      	ldr	r3, [pc, #88]	@ (800114c <UART_SetConfig+0x338>)
 80010f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	2b05      	cmp	r3, #5
 80010fc:	d838      	bhi.n	8001170 <UART_SetConfig+0x35c>
 80010fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001104 <UART_SetConfig+0x2f0>)
 8001100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001104:	0800111d 	.word	0x0800111d
 8001108:	08001125 	.word	0x08001125
 800110c:	0800112d 	.word	0x0800112d
 8001110:	08001135 	.word	0x08001135
 8001114:	08001161 	.word	0x08001161
 8001118:	08001169 	.word	0x08001169
 800111c:	2300      	movs	r3, #0
 800111e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001122:	e14a      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001124:	2304      	movs	r3, #4
 8001126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800112a:	e146      	b.n	80013ba <UART_SetConfig+0x5a6>
 800112c:	2308      	movs	r3, #8
 800112e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001132:	e142      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001134:	2310      	movs	r3, #16
 8001136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800113a:	e13e      	b.n	80013ba <UART_SetConfig+0x5a6>
 800113c:	cfff69f3 	.word	0xcfff69f3
 8001140:	58000c00 	.word	0x58000c00
 8001144:	11fff4ff 	.word	0x11fff4ff
 8001148:	40011000 	.word	0x40011000
 800114c:	58024400 	.word	0x58024400
 8001150:	40004400 	.word	0x40004400
 8001154:	40004800 	.word	0x40004800
 8001158:	40004c00 	.word	0x40004c00
 800115c:	40005000 	.word	0x40005000
 8001160:	2320      	movs	r3, #32
 8001162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001166:	e128      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001168:	2340      	movs	r3, #64	@ 0x40
 800116a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800116e:	e124      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001170:	2380      	movs	r3, #128	@ 0x80
 8001172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001176:	e120      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4acb      	ldr	r2, [pc, #812]	@ (80014ac <UART_SetConfig+0x698>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d176      	bne.n	8001270 <UART_SetConfig+0x45c>
 8001182:	4bcb      	ldr	r3, [pc, #812]	@ (80014b0 <UART_SetConfig+0x69c>)
 8001184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001186:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800118a:	2b28      	cmp	r3, #40	@ 0x28
 800118c:	d86c      	bhi.n	8001268 <UART_SetConfig+0x454>
 800118e:	a201      	add	r2, pc, #4	@ (adr r2, 8001194 <UART_SetConfig+0x380>)
 8001190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001194:	08001239 	.word	0x08001239
 8001198:	08001269 	.word	0x08001269
 800119c:	08001269 	.word	0x08001269
 80011a0:	08001269 	.word	0x08001269
 80011a4:	08001269 	.word	0x08001269
 80011a8:	08001269 	.word	0x08001269
 80011ac:	08001269 	.word	0x08001269
 80011b0:	08001269 	.word	0x08001269
 80011b4:	08001241 	.word	0x08001241
 80011b8:	08001269 	.word	0x08001269
 80011bc:	08001269 	.word	0x08001269
 80011c0:	08001269 	.word	0x08001269
 80011c4:	08001269 	.word	0x08001269
 80011c8:	08001269 	.word	0x08001269
 80011cc:	08001269 	.word	0x08001269
 80011d0:	08001269 	.word	0x08001269
 80011d4:	08001249 	.word	0x08001249
 80011d8:	08001269 	.word	0x08001269
 80011dc:	08001269 	.word	0x08001269
 80011e0:	08001269 	.word	0x08001269
 80011e4:	08001269 	.word	0x08001269
 80011e8:	08001269 	.word	0x08001269
 80011ec:	08001269 	.word	0x08001269
 80011f0:	08001269 	.word	0x08001269
 80011f4:	08001251 	.word	0x08001251
 80011f8:	08001269 	.word	0x08001269
 80011fc:	08001269 	.word	0x08001269
 8001200:	08001269 	.word	0x08001269
 8001204:	08001269 	.word	0x08001269
 8001208:	08001269 	.word	0x08001269
 800120c:	08001269 	.word	0x08001269
 8001210:	08001269 	.word	0x08001269
 8001214:	08001259 	.word	0x08001259
 8001218:	08001269 	.word	0x08001269
 800121c:	08001269 	.word	0x08001269
 8001220:	08001269 	.word	0x08001269
 8001224:	08001269 	.word	0x08001269
 8001228:	08001269 	.word	0x08001269
 800122c:	08001269 	.word	0x08001269
 8001230:	08001269 	.word	0x08001269
 8001234:	08001261 	.word	0x08001261
 8001238:	2301      	movs	r3, #1
 800123a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800123e:	e0bc      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001240:	2304      	movs	r3, #4
 8001242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001246:	e0b8      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001248:	2308      	movs	r3, #8
 800124a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800124e:	e0b4      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001250:	2310      	movs	r3, #16
 8001252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001256:	e0b0      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001258:	2320      	movs	r3, #32
 800125a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800125e:	e0ac      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001260:	2340      	movs	r3, #64	@ 0x40
 8001262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001266:	e0a8      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001268:	2380      	movs	r3, #128	@ 0x80
 800126a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800126e:	e0a4      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a8f      	ldr	r2, [pc, #572]	@ (80014b4 <UART_SetConfig+0x6a0>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d130      	bne.n	80012dc <UART_SetConfig+0x4c8>
 800127a:	4b8d      	ldr	r3, [pc, #564]	@ (80014b0 <UART_SetConfig+0x69c>)
 800127c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	2b05      	cmp	r3, #5
 8001284:	d826      	bhi.n	80012d4 <UART_SetConfig+0x4c0>
 8001286:	a201      	add	r2, pc, #4	@ (adr r2, 800128c <UART_SetConfig+0x478>)
 8001288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128c:	080012a5 	.word	0x080012a5
 8001290:	080012ad 	.word	0x080012ad
 8001294:	080012b5 	.word	0x080012b5
 8001298:	080012bd 	.word	0x080012bd
 800129c:	080012c5 	.word	0x080012c5
 80012a0:	080012cd 	.word	0x080012cd
 80012a4:	2300      	movs	r3, #0
 80012a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80012aa:	e086      	b.n	80013ba <UART_SetConfig+0x5a6>
 80012ac:	2304      	movs	r3, #4
 80012ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80012b2:	e082      	b.n	80013ba <UART_SetConfig+0x5a6>
 80012b4:	2308      	movs	r3, #8
 80012b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80012ba:	e07e      	b.n	80013ba <UART_SetConfig+0x5a6>
 80012bc:	2310      	movs	r3, #16
 80012be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80012c2:	e07a      	b.n	80013ba <UART_SetConfig+0x5a6>
 80012c4:	2320      	movs	r3, #32
 80012c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80012ca:	e076      	b.n	80013ba <UART_SetConfig+0x5a6>
 80012cc:	2340      	movs	r3, #64	@ 0x40
 80012ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80012d2:	e072      	b.n	80013ba <UART_SetConfig+0x5a6>
 80012d4:	2380      	movs	r3, #128	@ 0x80
 80012d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80012da:	e06e      	b.n	80013ba <UART_SetConfig+0x5a6>
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a75      	ldr	r2, [pc, #468]	@ (80014b8 <UART_SetConfig+0x6a4>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d130      	bne.n	8001348 <UART_SetConfig+0x534>
 80012e6:	4b72      	ldr	r3, [pc, #456]	@ (80014b0 <UART_SetConfig+0x69c>)
 80012e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	2b05      	cmp	r3, #5
 80012f0:	d826      	bhi.n	8001340 <UART_SetConfig+0x52c>
 80012f2:	a201      	add	r2, pc, #4	@ (adr r2, 80012f8 <UART_SetConfig+0x4e4>)
 80012f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f8:	08001311 	.word	0x08001311
 80012fc:	08001319 	.word	0x08001319
 8001300:	08001321 	.word	0x08001321
 8001304:	08001329 	.word	0x08001329
 8001308:	08001331 	.word	0x08001331
 800130c:	08001339 	.word	0x08001339
 8001310:	2300      	movs	r3, #0
 8001312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001316:	e050      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001318:	2304      	movs	r3, #4
 800131a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800131e:	e04c      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001320:	2308      	movs	r3, #8
 8001322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001326:	e048      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001328:	2310      	movs	r3, #16
 800132a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800132e:	e044      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001330:	2320      	movs	r3, #32
 8001332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001336:	e040      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001338:	2340      	movs	r3, #64	@ 0x40
 800133a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800133e:	e03c      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001340:	2380      	movs	r3, #128	@ 0x80
 8001342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001346:	e038      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a5b      	ldr	r2, [pc, #364]	@ (80014bc <UART_SetConfig+0x6a8>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d130      	bne.n	80013b4 <UART_SetConfig+0x5a0>
 8001352:	4b57      	ldr	r3, [pc, #348]	@ (80014b0 <UART_SetConfig+0x69c>)
 8001354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	2b05      	cmp	r3, #5
 800135c:	d826      	bhi.n	80013ac <UART_SetConfig+0x598>
 800135e:	a201      	add	r2, pc, #4	@ (adr r2, 8001364 <UART_SetConfig+0x550>)
 8001360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001364:	0800137d 	.word	0x0800137d
 8001368:	08001385 	.word	0x08001385
 800136c:	0800138d 	.word	0x0800138d
 8001370:	08001395 	.word	0x08001395
 8001374:	0800139d 	.word	0x0800139d
 8001378:	080013a5 	.word	0x080013a5
 800137c:	2302      	movs	r3, #2
 800137e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001382:	e01a      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001384:	2304      	movs	r3, #4
 8001386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800138a:	e016      	b.n	80013ba <UART_SetConfig+0x5a6>
 800138c:	2308      	movs	r3, #8
 800138e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001392:	e012      	b.n	80013ba <UART_SetConfig+0x5a6>
 8001394:	2310      	movs	r3, #16
 8001396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800139a:	e00e      	b.n	80013ba <UART_SetConfig+0x5a6>
 800139c:	2320      	movs	r3, #32
 800139e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80013a2:	e00a      	b.n	80013ba <UART_SetConfig+0x5a6>
 80013a4:	2340      	movs	r3, #64	@ 0x40
 80013a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80013aa:	e006      	b.n	80013ba <UART_SetConfig+0x5a6>
 80013ac:	2380      	movs	r3, #128	@ 0x80
 80013ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80013b2:	e002      	b.n	80013ba <UART_SetConfig+0x5a6>
 80013b4:	2380      	movs	r3, #128	@ 0x80
 80013b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a3f      	ldr	r2, [pc, #252]	@ (80014bc <UART_SetConfig+0x6a8>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	f040 80f8 	bne.w	80015b6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80013c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80013ca:	2b20      	cmp	r3, #32
 80013cc:	dc46      	bgt.n	800145c <UART_SetConfig+0x648>
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	f2c0 8082 	blt.w	80014d8 <UART_SetConfig+0x6c4>
 80013d4:	3b02      	subs	r3, #2
 80013d6:	2b1e      	cmp	r3, #30
 80013d8:	d87e      	bhi.n	80014d8 <UART_SetConfig+0x6c4>
 80013da:	a201      	add	r2, pc, #4	@ (adr r2, 80013e0 <UART_SetConfig+0x5cc>)
 80013dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e0:	08001463 	.word	0x08001463
 80013e4:	080014d9 	.word	0x080014d9
 80013e8:	0800146b 	.word	0x0800146b
 80013ec:	080014d9 	.word	0x080014d9
 80013f0:	080014d9 	.word	0x080014d9
 80013f4:	080014d9 	.word	0x080014d9
 80013f8:	0800147b 	.word	0x0800147b
 80013fc:	080014d9 	.word	0x080014d9
 8001400:	080014d9 	.word	0x080014d9
 8001404:	080014d9 	.word	0x080014d9
 8001408:	080014d9 	.word	0x080014d9
 800140c:	080014d9 	.word	0x080014d9
 8001410:	080014d9 	.word	0x080014d9
 8001414:	080014d9 	.word	0x080014d9
 8001418:	0800148b 	.word	0x0800148b
 800141c:	080014d9 	.word	0x080014d9
 8001420:	080014d9 	.word	0x080014d9
 8001424:	080014d9 	.word	0x080014d9
 8001428:	080014d9 	.word	0x080014d9
 800142c:	080014d9 	.word	0x080014d9
 8001430:	080014d9 	.word	0x080014d9
 8001434:	080014d9 	.word	0x080014d9
 8001438:	080014d9 	.word	0x080014d9
 800143c:	080014d9 	.word	0x080014d9
 8001440:	080014d9 	.word	0x080014d9
 8001444:	080014d9 	.word	0x080014d9
 8001448:	080014d9 	.word	0x080014d9
 800144c:	080014d9 	.word	0x080014d9
 8001450:	080014d9 	.word	0x080014d9
 8001454:	080014d9 	.word	0x080014d9
 8001458:	080014cb 	.word	0x080014cb
 800145c:	2b40      	cmp	r3, #64	@ 0x40
 800145e:	d037      	beq.n	80014d0 <UART_SetConfig+0x6bc>
 8001460:	e03a      	b.n	80014d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8001462:	f004 fb01 	bl	8005a68 <HAL_RCCEx_GetD3PCLK1Freq>
 8001466:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8001468:	e03c      	b.n	80014e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800146a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800146e:	4618      	mov	r0, r3
 8001470:	f004 fb10 	bl	8005a94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8001474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8001478:	e034      	b.n	80014e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800147a:	f107 0318 	add.w	r3, r7, #24
 800147e:	4618      	mov	r0, r3
 8001480:	f004 fc5c 	bl	8005d3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8001488:	e02c      	b.n	80014e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <UART_SetConfig+0x69c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0320 	and.w	r3, r3, #32
 8001492:	2b00      	cmp	r3, #0
 8001494:	d016      	beq.n	80014c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <UART_SetConfig+0x69c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	08db      	lsrs	r3, r3, #3
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	4a07      	ldr	r2, [pc, #28]	@ (80014c0 <UART_SetConfig+0x6ac>)
 80014a2:	fa22 f303 	lsr.w	r3, r2, r3
 80014a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80014a8:	e01c      	b.n	80014e4 <UART_SetConfig+0x6d0>
 80014aa:	bf00      	nop
 80014ac:	40011400 	.word	0x40011400
 80014b0:	58024400 	.word	0x58024400
 80014b4:	40007800 	.word	0x40007800
 80014b8:	40007c00 	.word	0x40007c00
 80014bc:	58000c00 	.word	0x58000c00
 80014c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80014c4:	4b9d      	ldr	r3, [pc, #628]	@ (800173c <UART_SetConfig+0x928>)
 80014c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80014c8:	e00c      	b.n	80014e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80014ca:	4b9d      	ldr	r3, [pc, #628]	@ (8001740 <UART_SetConfig+0x92c>)
 80014cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80014ce:	e009      	b.n	80014e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80014d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80014d6:	e005      	b.n	80014e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80014e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80014e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 81de 	beq.w	80018a8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f0:	4a94      	ldr	r2, [pc, #592]	@ (8001744 <UART_SetConfig+0x930>)
 80014f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f6:	461a      	mov	r2, r3
 80014f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80014fe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4413      	add	r3, r2
 800150a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800150c:	429a      	cmp	r2, r3
 800150e:	d305      	bcc.n	800151c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001516:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001518:	429a      	cmp	r2, r3
 800151a:	d903      	bls.n	8001524 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8001522:	e1c1      	b.n	80018a8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001526:	2200      	movs	r2, #0
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	60fa      	str	r2, [r7, #12]
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001530:	4a84      	ldr	r2, [pc, #528]	@ (8001744 <UART_SetConfig+0x930>)
 8001532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001536:	b29b      	uxth	r3, r3
 8001538:	2200      	movs	r2, #0
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001542:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001546:	f7fe fec7 	bl	80002d8 <__aeabi_uldivmod>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	f04f 0300 	mov.w	r3, #0
 800155a:	020b      	lsls	r3, r1, #8
 800155c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8001560:	0202      	lsls	r2, r0, #8
 8001562:	6979      	ldr	r1, [r7, #20]
 8001564:	6849      	ldr	r1, [r1, #4]
 8001566:	0849      	lsrs	r1, r1, #1
 8001568:	2000      	movs	r0, #0
 800156a:	460c      	mov	r4, r1
 800156c:	4605      	mov	r5, r0
 800156e:	eb12 0804 	adds.w	r8, r2, r4
 8001572:	eb43 0905 	adc.w	r9, r3, r5
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	469a      	mov	sl, r3
 800157e:	4693      	mov	fp, r2
 8001580:	4652      	mov	r2, sl
 8001582:	465b      	mov	r3, fp
 8001584:	4640      	mov	r0, r8
 8001586:	4649      	mov	r1, r9
 8001588:	f7fe fea6 	bl	80002d8 <__aeabi_uldivmod>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4613      	mov	r3, r2
 8001592:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001596:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800159a:	d308      	bcc.n	80015ae <UART_SetConfig+0x79a>
 800159c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800159e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80015a2:	d204      	bcs.n	80015ae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	e17c      	b.n	80018a8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80015b4:	e178      	b.n	80018a8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80015be:	f040 80c5 	bne.w	800174c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80015c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80015c6:	2b20      	cmp	r3, #32
 80015c8:	dc48      	bgt.n	800165c <UART_SetConfig+0x848>
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	db7b      	blt.n	80016c6 <UART_SetConfig+0x8b2>
 80015ce:	2b20      	cmp	r3, #32
 80015d0:	d879      	bhi.n	80016c6 <UART_SetConfig+0x8b2>
 80015d2:	a201      	add	r2, pc, #4	@ (adr r2, 80015d8 <UART_SetConfig+0x7c4>)
 80015d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d8:	08001663 	.word	0x08001663
 80015dc:	0800166b 	.word	0x0800166b
 80015e0:	080016c7 	.word	0x080016c7
 80015e4:	080016c7 	.word	0x080016c7
 80015e8:	08001673 	.word	0x08001673
 80015ec:	080016c7 	.word	0x080016c7
 80015f0:	080016c7 	.word	0x080016c7
 80015f4:	080016c7 	.word	0x080016c7
 80015f8:	08001683 	.word	0x08001683
 80015fc:	080016c7 	.word	0x080016c7
 8001600:	080016c7 	.word	0x080016c7
 8001604:	080016c7 	.word	0x080016c7
 8001608:	080016c7 	.word	0x080016c7
 800160c:	080016c7 	.word	0x080016c7
 8001610:	080016c7 	.word	0x080016c7
 8001614:	080016c7 	.word	0x080016c7
 8001618:	08001693 	.word	0x08001693
 800161c:	080016c7 	.word	0x080016c7
 8001620:	080016c7 	.word	0x080016c7
 8001624:	080016c7 	.word	0x080016c7
 8001628:	080016c7 	.word	0x080016c7
 800162c:	080016c7 	.word	0x080016c7
 8001630:	080016c7 	.word	0x080016c7
 8001634:	080016c7 	.word	0x080016c7
 8001638:	080016c7 	.word	0x080016c7
 800163c:	080016c7 	.word	0x080016c7
 8001640:	080016c7 	.word	0x080016c7
 8001644:	080016c7 	.word	0x080016c7
 8001648:	080016c7 	.word	0x080016c7
 800164c:	080016c7 	.word	0x080016c7
 8001650:	080016c7 	.word	0x080016c7
 8001654:	080016c7 	.word	0x080016c7
 8001658:	080016b9 	.word	0x080016b9
 800165c:	2b40      	cmp	r3, #64	@ 0x40
 800165e:	d02e      	beq.n	80016be <UART_SetConfig+0x8aa>
 8001660:	e031      	b.n	80016c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001662:	f004 f9d5 	bl	8005a10 <HAL_RCC_GetPCLK1Freq>
 8001666:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8001668:	e033      	b.n	80016d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800166a:	f004 f9e7 	bl	8005a3c <HAL_RCC_GetPCLK2Freq>
 800166e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8001670:	e02f      	b.n	80016d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8001672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001676:	4618      	mov	r0, r3
 8001678:	f004 fa0c 	bl	8005a94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800167c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800167e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8001680:	e027      	b.n	80016d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8001682:	f107 0318 	add.w	r3, r7, #24
 8001686:	4618      	mov	r0, r3
 8001688:	f004 fb58 	bl	8005d3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8001690:	e01f      	b.n	80016d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001692:	4b2d      	ldr	r3, [pc, #180]	@ (8001748 <UART_SetConfig+0x934>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0320 	and.w	r3, r3, #32
 800169a:	2b00      	cmp	r3, #0
 800169c:	d009      	beq.n	80016b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800169e:	4b2a      	ldr	r3, [pc, #168]	@ (8001748 <UART_SetConfig+0x934>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	08db      	lsrs	r3, r3, #3
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	4a24      	ldr	r2, [pc, #144]	@ (800173c <UART_SetConfig+0x928>)
 80016aa:	fa22 f303 	lsr.w	r3, r2, r3
 80016ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80016b0:	e00f      	b.n	80016d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80016b2:	4b22      	ldr	r3, [pc, #136]	@ (800173c <UART_SetConfig+0x928>)
 80016b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80016b6:	e00c      	b.n	80016d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80016b8:	4b21      	ldr	r3, [pc, #132]	@ (8001740 <UART_SetConfig+0x92c>)
 80016ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80016bc:	e009      	b.n	80016d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80016be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80016c4:	e005      	b.n	80016d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80016d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80016d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80e7 	beq.w	80018a8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016de:	4a19      	ldr	r2, [pc, #100]	@ (8001744 <UART_SetConfig+0x930>)
 80016e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016e4:	461a      	mov	r2, r3
 80016e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80016ec:	005a      	lsls	r2, r3, #1
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	085b      	lsrs	r3, r3, #1
 80016f4:	441a      	add	r2, r3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001702:	2b0f      	cmp	r3, #15
 8001704:	d916      	bls.n	8001734 <UART_SetConfig+0x920>
 8001706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800170c:	d212      	bcs.n	8001734 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800170e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001710:	b29b      	uxth	r3, r3
 8001712:	f023 030f 	bic.w	r3, r3, #15
 8001716:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800171a:	085b      	lsrs	r3, r3, #1
 800171c:	b29b      	uxth	r3, r3
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	b29a      	uxth	r2, r3
 8001724:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001726:	4313      	orrs	r3, r2
 8001728:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	e0b9      	b.n	80018a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800173a:	e0b5      	b.n	80018a8 <UART_SetConfig+0xa94>
 800173c:	03d09000 	.word	0x03d09000
 8001740:	003d0900 	.word	0x003d0900
 8001744:	08006394 	.word	0x08006394
 8001748:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800174c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001750:	2b20      	cmp	r3, #32
 8001752:	dc49      	bgt.n	80017e8 <UART_SetConfig+0x9d4>
 8001754:	2b00      	cmp	r3, #0
 8001756:	db7c      	blt.n	8001852 <UART_SetConfig+0xa3e>
 8001758:	2b20      	cmp	r3, #32
 800175a:	d87a      	bhi.n	8001852 <UART_SetConfig+0xa3e>
 800175c:	a201      	add	r2, pc, #4	@ (adr r2, 8001764 <UART_SetConfig+0x950>)
 800175e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001762:	bf00      	nop
 8001764:	080017ef 	.word	0x080017ef
 8001768:	080017f7 	.word	0x080017f7
 800176c:	08001853 	.word	0x08001853
 8001770:	08001853 	.word	0x08001853
 8001774:	080017ff 	.word	0x080017ff
 8001778:	08001853 	.word	0x08001853
 800177c:	08001853 	.word	0x08001853
 8001780:	08001853 	.word	0x08001853
 8001784:	0800180f 	.word	0x0800180f
 8001788:	08001853 	.word	0x08001853
 800178c:	08001853 	.word	0x08001853
 8001790:	08001853 	.word	0x08001853
 8001794:	08001853 	.word	0x08001853
 8001798:	08001853 	.word	0x08001853
 800179c:	08001853 	.word	0x08001853
 80017a0:	08001853 	.word	0x08001853
 80017a4:	0800181f 	.word	0x0800181f
 80017a8:	08001853 	.word	0x08001853
 80017ac:	08001853 	.word	0x08001853
 80017b0:	08001853 	.word	0x08001853
 80017b4:	08001853 	.word	0x08001853
 80017b8:	08001853 	.word	0x08001853
 80017bc:	08001853 	.word	0x08001853
 80017c0:	08001853 	.word	0x08001853
 80017c4:	08001853 	.word	0x08001853
 80017c8:	08001853 	.word	0x08001853
 80017cc:	08001853 	.word	0x08001853
 80017d0:	08001853 	.word	0x08001853
 80017d4:	08001853 	.word	0x08001853
 80017d8:	08001853 	.word	0x08001853
 80017dc:	08001853 	.word	0x08001853
 80017e0:	08001853 	.word	0x08001853
 80017e4:	08001845 	.word	0x08001845
 80017e8:	2b40      	cmp	r3, #64	@ 0x40
 80017ea:	d02e      	beq.n	800184a <UART_SetConfig+0xa36>
 80017ec:	e031      	b.n	8001852 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80017ee:	f004 f90f 	bl	8005a10 <HAL_RCC_GetPCLK1Freq>
 80017f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80017f4:	e033      	b.n	800185e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80017f6:	f004 f921 	bl	8005a3c <HAL_RCC_GetPCLK2Freq>
 80017fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80017fc:	e02f      	b.n	800185e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80017fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001802:	4618      	mov	r0, r3
 8001804:	f004 f946 	bl	8005a94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8001808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800180a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800180c:	e027      	b.n	800185e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800180e:	f107 0318 	add.w	r3, r7, #24
 8001812:	4618      	mov	r0, r3
 8001814:	f004 fa92 	bl	8005d3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800181c:	e01f      	b.n	800185e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800181e:	4b2d      	ldr	r3, [pc, #180]	@ (80018d4 <UART_SetConfig+0xac0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0320 	and.w	r3, r3, #32
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800182a:	4b2a      	ldr	r3, [pc, #168]	@ (80018d4 <UART_SetConfig+0xac0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	08db      	lsrs	r3, r3, #3
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	4a28      	ldr	r2, [pc, #160]	@ (80018d8 <UART_SetConfig+0xac4>)
 8001836:	fa22 f303 	lsr.w	r3, r2, r3
 800183a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800183c:	e00f      	b.n	800185e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800183e:	4b26      	ldr	r3, [pc, #152]	@ (80018d8 <UART_SetConfig+0xac4>)
 8001840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8001842:	e00c      	b.n	800185e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8001844:	4b25      	ldr	r3, [pc, #148]	@ (80018dc <UART_SetConfig+0xac8>)
 8001846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8001848:	e009      	b.n	800185e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800184a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800184e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8001850:	e005      	b.n	800185e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8001852:	2300      	movs	r3, #0
 8001854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800185c:	bf00      	nop
    }

    if (pclk != 0U)
 800185e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001860:	2b00      	cmp	r3, #0
 8001862:	d021      	beq.n	80018a8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001868:	4a1d      	ldr	r2, [pc, #116]	@ (80018e0 <UART_SetConfig+0xacc>)
 800186a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800186e:	461a      	mov	r2, r3
 8001870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001872:	fbb3 f2f2 	udiv	r2, r3, r2
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	085b      	lsrs	r3, r3, #1
 800187c:	441a      	add	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800188a:	2b0f      	cmp	r3, #15
 800188c:	d909      	bls.n	80018a2 <UART_SetConfig+0xa8e>
 800188e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001894:	d205      	bcs.n	80018a2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001898:	b29a      	uxth	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	e002      	b.n	80018a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2200      	movs	r2, #0
 80018bc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2200      	movs	r2, #0
 80018c2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80018c4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3748      	adds	r7, #72	@ 0x48
 80018cc:	46bd      	mov	sp, r7
 80018ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018d2:	bf00      	nop
 80018d4:	58024400 	.word	0x58024400
 80018d8:	03d09000 	.word	0x03d09000
 80018dc:	003d0900 	.word	0x003d0900
 80018e0:	08006394 	.word	0x08006394

080018e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00a      	beq.n	800190e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00a      	beq.n	8001930 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00a      	beq.n	8001952 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00a      	beq.n	8001974 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00a      	beq.n	8001996 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199a:	f003 0320 	and.w	r3, r3, #32
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00a      	beq.n	80019b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d01a      	beq.n	80019fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019e2:	d10a      	bne.n	80019fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00a      	beq.n	8001a1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	605a      	str	r2, [r3, #4]
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b098      	sub	sp, #96	@ 0x60
 8001a2c:	af02      	add	r7, sp, #8
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001a38:	f000 fbb4 	bl	80021a4 <HAL_GetTick>
 8001a3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	d12f      	bne.n	8001aac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a54:	2200      	movs	r2, #0
 8001a56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f88e 	bl	8001b7c <UART_WaitOnFlagUntilTimeout>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d022      	beq.n	8001aac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a6e:	e853 3f00 	ldrex	r3, [r3]
 8001a72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a84:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001a8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a8c:	e841 2300 	strex	r3, r2, [r1]
 8001a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001a92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1e6      	bne.n	8001a66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e063      	b.n	8001b74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d149      	bne.n	8001b4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001aba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f857 	bl	8001b7c <UART_WaitOnFlagUntilTimeout>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d03c      	beq.n	8001b4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001adc:	e853 3f00 	ldrex	r3, [r3]
 8001ae0:	623b      	str	r3, [r7, #32]
   return(result);
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001af2:	633b      	str	r3, [r7, #48]	@ 0x30
 8001af4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001af8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001afa:	e841 2300 	strex	r3, r2, [r1]
 8001afe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1e6      	bne.n	8001ad4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	3308      	adds	r3, #8
 8001b0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	e853 3f00 	ldrex	r3, [r3]
 8001b14:	60fb      	str	r3, [r7, #12]
   return(result);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	3308      	adds	r3, #8
 8001b24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b26:	61fa      	str	r2, [r7, #28]
 8001b28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b2a:	69b9      	ldr	r1, [r7, #24]
 8001b2c:	69fa      	ldr	r2, [r7, #28]
 8001b2e:	e841 2300 	strex	r3, r2, [r1]
 8001b32:	617b      	str	r3, [r7, #20]
   return(result);
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1e5      	bne.n	8001b06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e012      	b.n	8001b74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2220      	movs	r2, #32
 8001b52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3758      	adds	r7, #88	@ 0x58
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b8c:	e04f      	b.n	8001c2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b94:	d04b      	beq.n	8001c2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b96:	f000 fb05 	bl	80021a4 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d302      	bcc.n	8001bac <UART_WaitOnFlagUntilTimeout+0x30>
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e04e      	b.n	8001c4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d037      	beq.n	8001c2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b80      	cmp	r3, #128	@ 0x80
 8001bc2:	d034      	beq.n	8001c2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b40      	cmp	r3, #64	@ 0x40
 8001bc8:	d031      	beq.n	8001c2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d110      	bne.n	8001bfa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2208      	movs	r2, #8
 8001bde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f000 f879 	bl	8001cd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2208      	movs	r2, #8
 8001bea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e029      	b.n	8001c4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c08:	d111      	bne.n	8001c2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 f85f 	bl	8001cd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e00f      	b.n	8001c4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	69da      	ldr	r2, [r3, #28]
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	4013      	ands	r3, r2
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	bf0c      	ite	eq
 8001c3e:	2301      	moveq	r3, #1
 8001c40:	2300      	movne	r3, #0
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	461a      	mov	r2, r3
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d0a0      	beq.n	8001b8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b08f      	sub	sp, #60	@ 0x3c
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	e853 3f00 	ldrex	r3, [r3]
 8001c6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c7e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c84:	e841 2300 	strex	r3, r2, [r1]
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1e6      	bne.n	8001c5e <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3308      	adds	r3, #8
 8001c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	e853 3f00 	ldrex	r3, [r3]
 8001c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001ca6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3308      	adds	r3, #8
 8001cae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cb0:	61ba      	str	r2, [r7, #24]
 8001cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cb4:	6979      	ldr	r1, [r7, #20]
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	e841 2300 	strex	r3, r2, [r1]
 8001cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1e5      	bne.n	8001c90 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8001ccc:	bf00      	nop
 8001cce:	373c      	adds	r7, #60	@ 0x3c
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b095      	sub	sp, #84	@ 0x54
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ce8:	e853 3f00 	ldrex	r3, [r3]
 8001cec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cfe:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d00:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001d04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001d06:	e841 2300 	strex	r3, r2, [r1]
 8001d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1e6      	bne.n	8001ce0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	3308      	adds	r3, #8
 8001d18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	e853 3f00 	ldrex	r3, [r3]
 8001d20:	61fb      	str	r3, [r7, #28]
   return(result);
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	4b1e      	ldr	r3, [pc, #120]	@ (8001da0 <UART_EndRxTransfer+0xc8>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	3308      	adds	r3, #8
 8001d30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d3a:	e841 2300 	strex	r3, r2, [r1]
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1e5      	bne.n	8001d12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d118      	bne.n	8001d80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	e853 3f00 	ldrex	r3, [r3]
 8001d5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f023 0310 	bic.w	r3, r3, #16
 8001d62:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d6c:	61bb      	str	r3, [r7, #24]
 8001d6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d70:	6979      	ldr	r1, [r7, #20]
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	e841 2300 	strex	r3, r2, [r1]
 8001d78:	613b      	str	r3, [r7, #16]
   return(result);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1e6      	bne.n	8001d4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2220      	movs	r2, #32
 8001d84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8001d94:	bf00      	nop
 8001d96:	3754      	adds	r7, #84	@ 0x54
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	effffffe 	.word	0xeffffffe

08001da4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b090      	sub	sp, #64	@ 0x40
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001db0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dba:	d037      	beq.n	8001e2c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8001dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3308      	adds	r3, #8
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dce:	e853 3f00 	ldrex	r3, [r3]
 8001dd2:	623b      	str	r3, [r7, #32]
   return(result);
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001dda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	3308      	adds	r3, #8
 8001de2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001de4:	633a      	str	r2, [r7, #48]	@ 0x30
 8001de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001de8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001dea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001dec:	e841 2300 	strex	r3, r2, [r1]
 8001df0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1e5      	bne.n	8001dc4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001df8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	e853 3f00 	ldrex	r3, [r3]
 8001e04:	60fb      	str	r3, [r7, #12]
   return(result);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e1a:	69b9      	ldr	r1, [r7, #24]
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	e841 2300 	strex	r3, r2, [r1]
 8001e22:	617b      	str	r3, [r7, #20]
   return(result);
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1e6      	bne.n	8001df8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001e2a:	e002      	b.n	8001e32 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8001e2c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001e2e:	f7fe ffd3 	bl	8000dd8 <HAL_UART_TxCpltCallback>
}
 8001e32:	bf00      	nop
 8001e34:	3740      	adds	r7, #64	@ 0x40
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e46:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f7fe ffcf 	bl	8000dec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001e4e:	bf00      	nop
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e62:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e6a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e7e:	2b80      	cmp	r3, #128	@ 0x80
 8001e80:	d109      	bne.n	8001e96 <UART_DMAError+0x40>
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	2b21      	cmp	r3, #33	@ 0x21
 8001e86:	d106      	bne.n	8001e96 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8001e90:	6978      	ldr	r0, [r7, #20]
 8001e92:	f7ff fee0 	bl	8001c56 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ea0:	2b40      	cmp	r3, #64	@ 0x40
 8001ea2:	d109      	bne.n	8001eb8 <UART_DMAError+0x62>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b22      	cmp	r3, #34	@ 0x22
 8001ea8:	d106      	bne.n	8001eb8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f7ff ff10 	bl	8001cd8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ebe:	f043 0210 	orr.w	r2, r3, #16
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001ec8:	6978      	ldr	r0, [r7, #20]
 8001eca:	f7fe ff99 	bl	8000e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001ece:	bf00      	nop
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001eda:	bf00      	nop
 8001edc:	e7fd      	b.n	8001eda <NMI_Handler+0x4>

08001ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee2:	bf00      	nop
 8001ee4:	e7fd      	b.n	8001ee2 <HardFault_Handler+0x4>

08001ee6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eea:	bf00      	nop
 8001eec:	e7fd      	b.n	8001eea <MemManage_Handler+0x4>

08001eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef2:	bf00      	nop
 8001ef4:	e7fd      	b.n	8001ef2 <BusFault_Handler+0x4>

08001ef6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001efa:	bf00      	nop
 8001efc:	e7fd      	b.n	8001efa <UsageFault_Handler+0x4>

08001efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f2c:	f000 f926 	bl	800217c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f38:	4b37      	ldr	r3, [pc, #220]	@ (8002018 <SystemInit+0xe4>)
 8001f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f3e:	4a36      	ldr	r2, [pc, #216]	@ (8002018 <SystemInit+0xe4>)
 8001f40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f48:	4b34      	ldr	r3, [pc, #208]	@ (800201c <SystemInit+0xe8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	2b06      	cmp	r3, #6
 8001f52:	d807      	bhi.n	8001f64 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f54:	4b31      	ldr	r3, [pc, #196]	@ (800201c <SystemInit+0xe8>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f023 030f 	bic.w	r3, r3, #15
 8001f5c:	4a2f      	ldr	r2, [pc, #188]	@ (800201c <SystemInit+0xe8>)
 8001f5e:	f043 0307 	orr.w	r3, r3, #7
 8001f62:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001f64:	4b2e      	ldr	r3, [pc, #184]	@ (8002020 <SystemInit+0xec>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a2d      	ldr	r2, [pc, #180]	@ (8002020 <SystemInit+0xec>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f70:	4b2b      	ldr	r3, [pc, #172]	@ (8002020 <SystemInit+0xec>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001f76:	4b2a      	ldr	r3, [pc, #168]	@ (8002020 <SystemInit+0xec>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	4929      	ldr	r1, [pc, #164]	@ (8002020 <SystemInit+0xec>)
 8001f7c:	4b29      	ldr	r3, [pc, #164]	@ (8002024 <SystemInit+0xf0>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f82:	4b26      	ldr	r3, [pc, #152]	@ (800201c <SystemInit+0xe8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d007      	beq.n	8001f9e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f8e:	4b23      	ldr	r3, [pc, #140]	@ (800201c <SystemInit+0xe8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 030f 	bic.w	r3, r3, #15
 8001f96:	4a21      	ldr	r2, [pc, #132]	@ (800201c <SystemInit+0xe8>)
 8001f98:	f043 0307 	orr.w	r3, r3, #7
 8001f9c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001f9e:	4b20      	ldr	r3, [pc, #128]	@ (8002020 <SystemInit+0xec>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8002020 <SystemInit+0xec>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001faa:	4b1d      	ldr	r3, [pc, #116]	@ (8002020 <SystemInit+0xec>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002020 <SystemInit+0xec>)
 8001fb2:	4a1d      	ldr	r2, [pc, #116]	@ (8002028 <SystemInit+0xf4>)
 8001fb4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002020 <SystemInit+0xec>)
 8001fb8:	4a1c      	ldr	r2, [pc, #112]	@ (800202c <SystemInit+0xf8>)
 8001fba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001fbc:	4b18      	ldr	r3, [pc, #96]	@ (8002020 <SystemInit+0xec>)
 8001fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8002030 <SystemInit+0xfc>)
 8001fc0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001fc2:	4b17      	ldr	r3, [pc, #92]	@ (8002020 <SystemInit+0xec>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001fc8:	4b15      	ldr	r3, [pc, #84]	@ (8002020 <SystemInit+0xec>)
 8001fca:	4a19      	ldr	r2, [pc, #100]	@ (8002030 <SystemInit+0xfc>)
 8001fcc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001fce:	4b14      	ldr	r3, [pc, #80]	@ (8002020 <SystemInit+0xec>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001fd4:	4b12      	ldr	r3, [pc, #72]	@ (8002020 <SystemInit+0xec>)
 8001fd6:	4a16      	ldr	r2, [pc, #88]	@ (8002030 <SystemInit+0xfc>)
 8001fd8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001fda:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <SystemInit+0xec>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8002020 <SystemInit+0xec>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8002020 <SystemInit+0xec>)
 8001fe6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001fec:	4b0c      	ldr	r3, [pc, #48]	@ (8002020 <SystemInit+0xec>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001ff2:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <SystemInit+0x100>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	4b10      	ldr	r3, [pc, #64]	@ (8002038 <SystemInit+0x104>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ffe:	d202      	bcs.n	8002006 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002000:	4b0e      	ldr	r3, [pc, #56]	@ (800203c <SystemInit+0x108>)
 8002002:	2201      	movs	r2, #1
 8002004:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002006:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <SystemInit+0x10c>)
 8002008:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800200c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800200e:	bf00      	nop
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000ed00 	.word	0xe000ed00
 800201c:	52002000 	.word	0x52002000
 8002020:	58024400 	.word	0x58024400
 8002024:	eaf6ed7f 	.word	0xeaf6ed7f
 8002028:	02020200 	.word	0x02020200
 800202c:	01ff0000 	.word	0x01ff0000
 8002030:	01010280 	.word	0x01010280
 8002034:	5c001000 	.word	0x5c001000
 8002038:	ffff0000 	.word	0xffff0000
 800203c:	51008108 	.word	0x51008108
 8002040:	52004000 	.word	0x52004000

08002044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002044:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800207c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002048:	f7ff ff74 	bl	8001f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800204c:	480c      	ldr	r0, [pc, #48]	@ (8002080 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800204e:	490d      	ldr	r1, [pc, #52]	@ (8002084 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002050:	4a0d      	ldr	r2, [pc, #52]	@ (8002088 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002054:	e002      	b.n	800205c <LoopCopyDataInit>

08002056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800205a:	3304      	adds	r3, #4

0800205c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800205c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002060:	d3f9      	bcc.n	8002056 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002062:	4a0a      	ldr	r2, [pc, #40]	@ (800208c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002064:	4c0a      	ldr	r4, [pc, #40]	@ (8002090 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002068:	e001      	b.n	800206e <LoopFillZerobss>

0800206a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800206a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800206c:	3204      	adds	r2, #4

0800206e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002070:	d3fb      	bcc.n	800206a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002072:	f004 f95f 	bl	8006334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002076:	f7fe fb5f 	bl	8000738 <main>
  bx  lr
 800207a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800207c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002080:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002084:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8002088:	080063d4 	.word	0x080063d4
  ldr r2, =_sbss
 800208c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8002090:	24009d7c 	.word	0x24009d7c

08002094 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002094:	e7fe      	b.n	8002094 <ADC3_IRQHandler>
	...

08002098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800209e:	2003      	movs	r0, #3
 80020a0:	f000 f968 	bl	8002374 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020a4:	f003 fb0a 	bl	80056bc <HAL_RCC_GetSysClockFreq>
 80020a8:	4602      	mov	r2, r0
 80020aa:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <HAL_Init+0x68>)
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	f003 030f 	and.w	r3, r3, #15
 80020b4:	4913      	ldr	r1, [pc, #76]	@ (8002104 <HAL_Init+0x6c>)
 80020b6:	5ccb      	ldrb	r3, [r1, r3]
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	fa22 f303 	lsr.w	r3, r2, r3
 80020c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002100 <HAL_Init+0x68>)
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002104 <HAL_Init+0x6c>)
 80020cc:	5cd3      	ldrb	r3, [r2, r3]
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
 80020d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002108 <HAL_Init+0x70>)
 80020da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020dc:	4a0b      	ldr	r2, [pc, #44]	@ (800210c <HAL_Init+0x74>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020e2:	200f      	movs	r0, #15
 80020e4:	f000 f814 	bl	8002110 <HAL_InitTick>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e002      	b.n	80020f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80020f2:	f7fe fcef 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	58024400 	.word	0x58024400
 8002104:	080063ac 	.word	0x080063ac
 8002108:	24000004 	.word	0x24000004
 800210c:	24000000 	.word	0x24000000

08002110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002118:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <HAL_InitTick+0x60>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e021      	b.n	8002168 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002124:	4b13      	ldr	r3, [pc, #76]	@ (8002174 <HAL_InitTick+0x64>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b11      	ldr	r3, [pc, #68]	@ (8002170 <HAL_InitTick+0x60>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	4619      	mov	r1, r3
 800212e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002132:	fbb3 f3f1 	udiv	r3, r3, r1
 8002136:	fbb2 f3f3 	udiv	r3, r2, r3
 800213a:	4618      	mov	r0, r3
 800213c:	f000 f94d 	bl	80023da <HAL_SYSTICK_Config>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e00e      	b.n	8002168 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b0f      	cmp	r3, #15
 800214e:	d80a      	bhi.n	8002166 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002150:	2200      	movs	r2, #0
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002158:	f000 f917 	bl	800238a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800215c:	4a06      	ldr	r2, [pc, #24]	@ (8002178 <HAL_InitTick+0x68>)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	e000      	b.n	8002168 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
}
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	2400000c 	.word	0x2400000c
 8002174:	24000000 	.word	0x24000000
 8002178:	24000008 	.word	0x24000008

0800217c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002180:	4b06      	ldr	r3, [pc, #24]	@ (800219c <HAL_IncTick+0x20>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <HAL_IncTick+0x24>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4413      	add	r3, r2
 800218c:	4a04      	ldr	r2, [pc, #16]	@ (80021a0 <HAL_IncTick+0x24>)
 800218e:	6013      	str	r3, [r2, #0]
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	2400000c 	.word	0x2400000c
 80021a0:	24009d78 	.word	0x24009d78

080021a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return uwTick;
 80021a8:	4b03      	ldr	r3, [pc, #12]	@ (80021b8 <HAL_GetTick+0x14>)
 80021aa:	681b      	ldr	r3, [r3, #0]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	24009d78 	.word	0x24009d78

080021bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80021c0:	4b03      	ldr	r3, [pc, #12]	@ (80021d0 <HAL_GetREVID+0x14>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	0c1b      	lsrs	r3, r3, #16
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	5c001000 	.word	0x5c001000

080021d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <__NVIC_SetPriorityGrouping+0x40>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021f0:	4013      	ands	r3, r2
 80021f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <__NVIC_SetPriorityGrouping+0x44>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002202:	4a04      	ldr	r2, [pc, #16]	@ (8002214 <__NVIC_SetPriorityGrouping+0x40>)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	60d3      	str	r3, [r2, #12]
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00
 8002218:	05fa0000 	.word	0x05fa0000

0800221c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002220:	4b04      	ldr	r3, [pc, #16]	@ (8002234 <__NVIC_GetPriorityGrouping+0x18>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	0a1b      	lsrs	r3, r3, #8
 8002226:	f003 0307 	and.w	r3, r3, #7
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002246:	2b00      	cmp	r3, #0
 8002248:	db0b      	blt.n	8002262 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	f003 021f 	and.w	r2, r3, #31
 8002250:	4907      	ldr	r1, [pc, #28]	@ (8002270 <__NVIC_EnableIRQ+0x38>)
 8002252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	2001      	movs	r0, #1
 800225a:	fa00 f202 	lsl.w	r2, r0, r2
 800225e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000e100 	.word	0xe000e100

08002274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	6039      	str	r1, [r7, #0]
 800227e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002284:	2b00      	cmp	r3, #0
 8002286:	db0a      	blt.n	800229e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	b2da      	uxtb	r2, r3
 800228c:	490c      	ldr	r1, [pc, #48]	@ (80022c0 <__NVIC_SetPriority+0x4c>)
 800228e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002292:	0112      	lsls	r2, r2, #4
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	440b      	add	r3, r1
 8002298:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800229c:	e00a      	b.n	80022b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4908      	ldr	r1, [pc, #32]	@ (80022c4 <__NVIC_SetPriority+0x50>)
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	3b04      	subs	r3, #4
 80022ac:	0112      	lsls	r2, r2, #4
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	440b      	add	r3, r1
 80022b2:	761a      	strb	r2, [r3, #24]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000e100 	.word	0xe000e100
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b089      	sub	sp, #36	@ 0x24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f1c3 0307 	rsb	r3, r3, #7
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	bf28      	it	cs
 80022e6:	2304      	movcs	r3, #4
 80022e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3304      	adds	r3, #4
 80022ee:	2b06      	cmp	r3, #6
 80022f0:	d902      	bls.n	80022f8 <NVIC_EncodePriority+0x30>
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3b03      	subs	r3, #3
 80022f6:	e000      	b.n	80022fa <NVIC_EncodePriority+0x32>
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43da      	mvns	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	401a      	ands	r2, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002310:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	43d9      	mvns	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	4313      	orrs	r3, r2
         );
}
 8002322:	4618      	mov	r0, r3
 8002324:	3724      	adds	r7, #36	@ 0x24
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3b01      	subs	r3, #1
 800233c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002340:	d301      	bcc.n	8002346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002342:	2301      	movs	r3, #1
 8002344:	e00f      	b.n	8002366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002346:	4a0a      	ldr	r2, [pc, #40]	@ (8002370 <SysTick_Config+0x40>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800234e:	210f      	movs	r1, #15
 8002350:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002354:	f7ff ff8e 	bl	8002274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002358:	4b05      	ldr	r3, [pc, #20]	@ (8002370 <SysTick_Config+0x40>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800235e:	4b04      	ldr	r3, [pc, #16]	@ (8002370 <SysTick_Config+0x40>)
 8002360:	2207      	movs	r2, #7
 8002362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	e000e010 	.word	0xe000e010

08002374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ff29 	bl	80021d4 <__NVIC_SetPriorityGrouping>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b086      	sub	sp, #24
 800238e:	af00      	add	r7, sp, #0
 8002390:	4603      	mov	r3, r0
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002398:	f7ff ff40 	bl	800221c <__NVIC_GetPriorityGrouping>
 800239c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	6978      	ldr	r0, [r7, #20]
 80023a4:	f7ff ff90 	bl	80022c8 <NVIC_EncodePriority>
 80023a8:	4602      	mov	r2, r0
 80023aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023ae:	4611      	mov	r1, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff5f 	bl	8002274 <__NVIC_SetPriority>
}
 80023b6:	bf00      	nop
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff33 	bl	8002238 <__NVIC_EnableIRQ>
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff ffa4 	bl	8002330 <SysTick_Config>
 80023e8:	4603      	mov	r3, r0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80023f8:	f3bf 8f5f 	dmb	sy
}
 80023fc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80023fe:	4b07      	ldr	r3, [pc, #28]	@ (800241c <HAL_MPU_Disable+0x28>)
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002402:	4a06      	ldr	r2, [pc, #24]	@ (800241c <HAL_MPU_Disable+0x28>)
 8002404:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002408:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800240a:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <HAL_MPU_Disable+0x2c>)
 800240c:	2200      	movs	r2, #0
 800240e:	605a      	str	r2, [r3, #4]
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000ed00 	.word	0xe000ed00
 8002420:	e000ed90 	.word	0xe000ed90

08002424 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800242c:	4a0b      	ldr	r2, [pc, #44]	@ (800245c <HAL_MPU_Enable+0x38>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002436:	4b0a      	ldr	r3, [pc, #40]	@ (8002460 <HAL_MPU_Enable+0x3c>)
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	4a09      	ldr	r2, [pc, #36]	@ (8002460 <HAL_MPU_Enable+0x3c>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002440:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002442:	f3bf 8f4f 	dsb	sy
}
 8002446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002448:	f3bf 8f6f 	isb	sy
}
 800244c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000ed90 	.word	0xe000ed90
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	785a      	ldrb	r2, [r3, #1]
 8002470:	4b1b      	ldr	r3, [pc, #108]	@ (80024e0 <HAL_MPU_ConfigRegion+0x7c>)
 8002472:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002474:	4b1a      	ldr	r3, [pc, #104]	@ (80024e0 <HAL_MPU_ConfigRegion+0x7c>)
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	4a19      	ldr	r2, [pc, #100]	@ (80024e0 <HAL_MPU_ConfigRegion+0x7c>)
 800247a:	f023 0301 	bic.w	r3, r3, #1
 800247e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002480:	4a17      	ldr	r2, [pc, #92]	@ (80024e0 <HAL_MPU_ConfigRegion+0x7c>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	7b1b      	ldrb	r3, [r3, #12]
 800248c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	7adb      	ldrb	r3, [r3, #11]
 8002492:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002494:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	7a9b      	ldrb	r3, [r3, #10]
 800249a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800249c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7b5b      	ldrb	r3, [r3, #13]
 80024a2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80024a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	7b9b      	ldrb	r3, [r3, #14]
 80024aa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80024ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	7bdb      	ldrb	r3, [r3, #15]
 80024b2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80024b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	7a5b      	ldrb	r3, [r3, #9]
 80024ba:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80024bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	7a1b      	ldrb	r3, [r3, #8]
 80024c2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80024c4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	7812      	ldrb	r2, [r2, #0]
 80024ca:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024cc:	4a04      	ldr	r2, [pc, #16]	@ (80024e0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80024ce:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024d0:	6113      	str	r3, [r2, #16]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	e000ed90 	.word	0xe000ed90

080024e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80024ec:	f7ff fe5a 	bl	80021a4 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e316      	b.n	8002b2a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a66      	ldr	r2, [pc, #408]	@ (800269c <HAL_DMA_Init+0x1b8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d04a      	beq.n	800259c <HAL_DMA_Init+0xb8>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a65      	ldr	r2, [pc, #404]	@ (80026a0 <HAL_DMA_Init+0x1bc>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d045      	beq.n	800259c <HAL_DMA_Init+0xb8>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a63      	ldr	r2, [pc, #396]	@ (80026a4 <HAL_DMA_Init+0x1c0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d040      	beq.n	800259c <HAL_DMA_Init+0xb8>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a62      	ldr	r2, [pc, #392]	@ (80026a8 <HAL_DMA_Init+0x1c4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d03b      	beq.n	800259c <HAL_DMA_Init+0xb8>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a60      	ldr	r2, [pc, #384]	@ (80026ac <HAL_DMA_Init+0x1c8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d036      	beq.n	800259c <HAL_DMA_Init+0xb8>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a5f      	ldr	r2, [pc, #380]	@ (80026b0 <HAL_DMA_Init+0x1cc>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d031      	beq.n	800259c <HAL_DMA_Init+0xb8>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a5d      	ldr	r2, [pc, #372]	@ (80026b4 <HAL_DMA_Init+0x1d0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d02c      	beq.n	800259c <HAL_DMA_Init+0xb8>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a5c      	ldr	r2, [pc, #368]	@ (80026b8 <HAL_DMA_Init+0x1d4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d027      	beq.n	800259c <HAL_DMA_Init+0xb8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a5a      	ldr	r2, [pc, #360]	@ (80026bc <HAL_DMA_Init+0x1d8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d022      	beq.n	800259c <HAL_DMA_Init+0xb8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a59      	ldr	r2, [pc, #356]	@ (80026c0 <HAL_DMA_Init+0x1dc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d01d      	beq.n	800259c <HAL_DMA_Init+0xb8>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a57      	ldr	r2, [pc, #348]	@ (80026c4 <HAL_DMA_Init+0x1e0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d018      	beq.n	800259c <HAL_DMA_Init+0xb8>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a56      	ldr	r2, [pc, #344]	@ (80026c8 <HAL_DMA_Init+0x1e4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d013      	beq.n	800259c <HAL_DMA_Init+0xb8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a54      	ldr	r2, [pc, #336]	@ (80026cc <HAL_DMA_Init+0x1e8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d00e      	beq.n	800259c <HAL_DMA_Init+0xb8>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a53      	ldr	r2, [pc, #332]	@ (80026d0 <HAL_DMA_Init+0x1ec>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d009      	beq.n	800259c <HAL_DMA_Init+0xb8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a51      	ldr	r2, [pc, #324]	@ (80026d4 <HAL_DMA_Init+0x1f0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d004      	beq.n	800259c <HAL_DMA_Init+0xb8>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a50      	ldr	r2, [pc, #320]	@ (80026d8 <HAL_DMA_Init+0x1f4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d101      	bne.n	80025a0 <HAL_DMA_Init+0xbc>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <HAL_DMA_Init+0xbe>
 80025a0:	2300      	movs	r3, #0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 813b 	beq.w	800281e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a37      	ldr	r2, [pc, #220]	@ (800269c <HAL_DMA_Init+0x1b8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d04a      	beq.n	8002658 <HAL_DMA_Init+0x174>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a36      	ldr	r2, [pc, #216]	@ (80026a0 <HAL_DMA_Init+0x1bc>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d045      	beq.n	8002658 <HAL_DMA_Init+0x174>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a34      	ldr	r2, [pc, #208]	@ (80026a4 <HAL_DMA_Init+0x1c0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d040      	beq.n	8002658 <HAL_DMA_Init+0x174>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a33      	ldr	r2, [pc, #204]	@ (80026a8 <HAL_DMA_Init+0x1c4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d03b      	beq.n	8002658 <HAL_DMA_Init+0x174>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a31      	ldr	r2, [pc, #196]	@ (80026ac <HAL_DMA_Init+0x1c8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d036      	beq.n	8002658 <HAL_DMA_Init+0x174>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a30      	ldr	r2, [pc, #192]	@ (80026b0 <HAL_DMA_Init+0x1cc>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d031      	beq.n	8002658 <HAL_DMA_Init+0x174>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a2e      	ldr	r2, [pc, #184]	@ (80026b4 <HAL_DMA_Init+0x1d0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d02c      	beq.n	8002658 <HAL_DMA_Init+0x174>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a2d      	ldr	r2, [pc, #180]	@ (80026b8 <HAL_DMA_Init+0x1d4>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d027      	beq.n	8002658 <HAL_DMA_Init+0x174>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a2b      	ldr	r2, [pc, #172]	@ (80026bc <HAL_DMA_Init+0x1d8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d022      	beq.n	8002658 <HAL_DMA_Init+0x174>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a2a      	ldr	r2, [pc, #168]	@ (80026c0 <HAL_DMA_Init+0x1dc>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d01d      	beq.n	8002658 <HAL_DMA_Init+0x174>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a28      	ldr	r2, [pc, #160]	@ (80026c4 <HAL_DMA_Init+0x1e0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d018      	beq.n	8002658 <HAL_DMA_Init+0x174>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a27      	ldr	r2, [pc, #156]	@ (80026c8 <HAL_DMA_Init+0x1e4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d013      	beq.n	8002658 <HAL_DMA_Init+0x174>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a25      	ldr	r2, [pc, #148]	@ (80026cc <HAL_DMA_Init+0x1e8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00e      	beq.n	8002658 <HAL_DMA_Init+0x174>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a24      	ldr	r2, [pc, #144]	@ (80026d0 <HAL_DMA_Init+0x1ec>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d009      	beq.n	8002658 <HAL_DMA_Init+0x174>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a22      	ldr	r2, [pc, #136]	@ (80026d4 <HAL_DMA_Init+0x1f0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d004      	beq.n	8002658 <HAL_DMA_Init+0x174>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a21      	ldr	r2, [pc, #132]	@ (80026d8 <HAL_DMA_Init+0x1f4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d108      	bne.n	800266a <HAL_DMA_Init+0x186>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0201 	bic.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	e007      	b.n	800267a <HAL_DMA_Init+0x196>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0201 	bic.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800267a:	e02f      	b.n	80026dc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800267c:	f7ff fd92 	bl	80021a4 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b05      	cmp	r3, #5
 8002688:	d928      	bls.n	80026dc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2220      	movs	r2, #32
 800268e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2203      	movs	r2, #3
 8002694:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e246      	b.n	8002b2a <HAL_DMA_Init+0x646>
 800269c:	40020010 	.word	0x40020010
 80026a0:	40020028 	.word	0x40020028
 80026a4:	40020040 	.word	0x40020040
 80026a8:	40020058 	.word	0x40020058
 80026ac:	40020070 	.word	0x40020070
 80026b0:	40020088 	.word	0x40020088
 80026b4:	400200a0 	.word	0x400200a0
 80026b8:	400200b8 	.word	0x400200b8
 80026bc:	40020410 	.word	0x40020410
 80026c0:	40020428 	.word	0x40020428
 80026c4:	40020440 	.word	0x40020440
 80026c8:	40020458 	.word	0x40020458
 80026cc:	40020470 	.word	0x40020470
 80026d0:	40020488 	.word	0x40020488
 80026d4:	400204a0 	.word	0x400204a0
 80026d8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1c8      	bne.n	800267c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4b83      	ldr	r3, [pc, #524]	@ (8002904 <HAL_DMA_Init+0x420>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002702:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800270e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800271a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	4313      	orrs	r3, r2
 8002726:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272c:	2b04      	cmp	r3, #4
 800272e:	d107      	bne.n	8002740 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002738:	4313      	orrs	r3, r2
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002740:	4b71      	ldr	r3, [pc, #452]	@ (8002908 <HAL_DMA_Init+0x424>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b71      	ldr	r3, [pc, #452]	@ (800290c <HAL_DMA_Init+0x428>)
 8002746:	4013      	ands	r3, r2
 8002748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800274c:	d328      	bcc.n	80027a0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b28      	cmp	r3, #40	@ 0x28
 8002754:	d903      	bls.n	800275e <HAL_DMA_Init+0x27a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b2e      	cmp	r3, #46	@ 0x2e
 800275c:	d917      	bls.n	800278e <HAL_DMA_Init+0x2aa>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b3e      	cmp	r3, #62	@ 0x3e
 8002764:	d903      	bls.n	800276e <HAL_DMA_Init+0x28a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b42      	cmp	r3, #66	@ 0x42
 800276c:	d90f      	bls.n	800278e <HAL_DMA_Init+0x2aa>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b46      	cmp	r3, #70	@ 0x46
 8002774:	d903      	bls.n	800277e <HAL_DMA_Init+0x29a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b48      	cmp	r3, #72	@ 0x48
 800277c:	d907      	bls.n	800278e <HAL_DMA_Init+0x2aa>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b4e      	cmp	r3, #78	@ 0x4e
 8002784:	d905      	bls.n	8002792 <HAL_DMA_Init+0x2ae>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b52      	cmp	r3, #82	@ 0x52
 800278c:	d801      	bhi.n	8002792 <HAL_DMA_Init+0x2ae>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <HAL_DMA_Init+0x2b0>
 8002792:	2300      	movs	r3, #0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800279e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f023 0307 	bic.w	r3, r3, #7
 80027b6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d117      	bne.n	80027fa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00e      	beq.n	80027fa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f001 fdcf 	bl	8004380 <DMA_CheckFifoParam>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2240      	movs	r2, #64	@ 0x40
 80027ec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e197      	b.n	8002b2a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f001 fd0a 	bl	800421c <DMA_CalcBaseAndBitshift>
 8002808:	4603      	mov	r3, r0
 800280a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002810:	f003 031f 	and.w	r3, r3, #31
 8002814:	223f      	movs	r2, #63	@ 0x3f
 8002816:	409a      	lsls	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	e0cd      	b.n	80029ba <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a3b      	ldr	r2, [pc, #236]	@ (8002910 <HAL_DMA_Init+0x42c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d022      	beq.n	800286e <HAL_DMA_Init+0x38a>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a39      	ldr	r2, [pc, #228]	@ (8002914 <HAL_DMA_Init+0x430>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d01d      	beq.n	800286e <HAL_DMA_Init+0x38a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a38      	ldr	r2, [pc, #224]	@ (8002918 <HAL_DMA_Init+0x434>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d018      	beq.n	800286e <HAL_DMA_Init+0x38a>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a36      	ldr	r2, [pc, #216]	@ (800291c <HAL_DMA_Init+0x438>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d013      	beq.n	800286e <HAL_DMA_Init+0x38a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a35      	ldr	r2, [pc, #212]	@ (8002920 <HAL_DMA_Init+0x43c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d00e      	beq.n	800286e <HAL_DMA_Init+0x38a>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a33      	ldr	r2, [pc, #204]	@ (8002924 <HAL_DMA_Init+0x440>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d009      	beq.n	800286e <HAL_DMA_Init+0x38a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a32      	ldr	r2, [pc, #200]	@ (8002928 <HAL_DMA_Init+0x444>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d004      	beq.n	800286e <HAL_DMA_Init+0x38a>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a30      	ldr	r2, [pc, #192]	@ (800292c <HAL_DMA_Init+0x448>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d101      	bne.n	8002872 <HAL_DMA_Init+0x38e>
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <HAL_DMA_Init+0x390>
 8002872:	2300      	movs	r3, #0
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 8097 	beq.w	80029a8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a24      	ldr	r2, [pc, #144]	@ (8002910 <HAL_DMA_Init+0x42c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d021      	beq.n	80028c8 <HAL_DMA_Init+0x3e4>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a22      	ldr	r2, [pc, #136]	@ (8002914 <HAL_DMA_Init+0x430>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d01c      	beq.n	80028c8 <HAL_DMA_Init+0x3e4>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a21      	ldr	r2, [pc, #132]	@ (8002918 <HAL_DMA_Init+0x434>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d017      	beq.n	80028c8 <HAL_DMA_Init+0x3e4>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a1f      	ldr	r2, [pc, #124]	@ (800291c <HAL_DMA_Init+0x438>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d012      	beq.n	80028c8 <HAL_DMA_Init+0x3e4>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002920 <HAL_DMA_Init+0x43c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d00d      	beq.n	80028c8 <HAL_DMA_Init+0x3e4>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002924 <HAL_DMA_Init+0x440>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d008      	beq.n	80028c8 <HAL_DMA_Init+0x3e4>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002928 <HAL_DMA_Init+0x444>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d003      	beq.n	80028c8 <HAL_DMA_Init+0x3e4>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a19      	ldr	r2, [pc, #100]	@ (800292c <HAL_DMA_Init+0x448>)
 80028c6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	4b13      	ldr	r3, [pc, #76]	@ (8002930 <HAL_DMA_Init+0x44c>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b40      	cmp	r3, #64	@ 0x40
 80028ee:	d021      	beq.n	8002934 <HAL_DMA_Init+0x450>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b80      	cmp	r3, #128	@ 0x80
 80028f6:	d102      	bne.n	80028fe <HAL_DMA_Init+0x41a>
 80028f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028fc:	e01b      	b.n	8002936 <HAL_DMA_Init+0x452>
 80028fe:	2300      	movs	r3, #0
 8002900:	e019      	b.n	8002936 <HAL_DMA_Init+0x452>
 8002902:	bf00      	nop
 8002904:	fe10803f 	.word	0xfe10803f
 8002908:	5c001000 	.word	0x5c001000
 800290c:	ffff0000 	.word	0xffff0000
 8002910:	58025408 	.word	0x58025408
 8002914:	5802541c 	.word	0x5802541c
 8002918:	58025430 	.word	0x58025430
 800291c:	58025444 	.word	0x58025444
 8002920:	58025458 	.word	0x58025458
 8002924:	5802546c 	.word	0x5802546c
 8002928:	58025480 	.word	0x58025480
 800292c:	58025494 	.word	0x58025494
 8002930:	fffe000f 	.word	0xfffe000f
 8002934:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68d2      	ldr	r2, [r2, #12]
 800293a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800293c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002944:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800294c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002954:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800295c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002964:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4313      	orrs	r3, r2
 800296a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	4b6e      	ldr	r3, [pc, #440]	@ (8002b34 <HAL_DMA_Init+0x650>)
 800297c:	4413      	add	r3, r2
 800297e:	4a6e      	ldr	r2, [pc, #440]	@ (8002b38 <HAL_DMA_Init+0x654>)
 8002980:	fba2 2303 	umull	r2, r3, r2, r3
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	009a      	lsls	r2, r3, #2
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f001 fc45 	bl	800421c <DMA_CalcBaseAndBitshift>
 8002992:	4603      	mov	r3, r0
 8002994:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	2201      	movs	r2, #1
 80029a0:	409a      	lsls	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	e008      	b.n	80029ba <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2240      	movs	r2, #64	@ 0x40
 80029ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2203      	movs	r2, #3
 80029b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e0b7      	b.n	8002b2a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a5f      	ldr	r2, [pc, #380]	@ (8002b3c <HAL_DMA_Init+0x658>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d072      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002b40 <HAL_DMA_Init+0x65c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d06d      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a5c      	ldr	r2, [pc, #368]	@ (8002b44 <HAL_DMA_Init+0x660>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d068      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a5a      	ldr	r2, [pc, #360]	@ (8002b48 <HAL_DMA_Init+0x664>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d063      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a59      	ldr	r2, [pc, #356]	@ (8002b4c <HAL_DMA_Init+0x668>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d05e      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a57      	ldr	r2, [pc, #348]	@ (8002b50 <HAL_DMA_Init+0x66c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d059      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a56      	ldr	r2, [pc, #344]	@ (8002b54 <HAL_DMA_Init+0x670>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d054      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a54      	ldr	r2, [pc, #336]	@ (8002b58 <HAL_DMA_Init+0x674>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d04f      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a53      	ldr	r2, [pc, #332]	@ (8002b5c <HAL_DMA_Init+0x678>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d04a      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a51      	ldr	r2, [pc, #324]	@ (8002b60 <HAL_DMA_Init+0x67c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d045      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a50      	ldr	r2, [pc, #320]	@ (8002b64 <HAL_DMA_Init+0x680>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d040      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a4e      	ldr	r2, [pc, #312]	@ (8002b68 <HAL_DMA_Init+0x684>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d03b      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a4d      	ldr	r2, [pc, #308]	@ (8002b6c <HAL_DMA_Init+0x688>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d036      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a4b      	ldr	r2, [pc, #300]	@ (8002b70 <HAL_DMA_Init+0x68c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d031      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a4a      	ldr	r2, [pc, #296]	@ (8002b74 <HAL_DMA_Init+0x690>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d02c      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a48      	ldr	r2, [pc, #288]	@ (8002b78 <HAL_DMA_Init+0x694>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d027      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a47      	ldr	r2, [pc, #284]	@ (8002b7c <HAL_DMA_Init+0x698>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d022      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a45      	ldr	r2, [pc, #276]	@ (8002b80 <HAL_DMA_Init+0x69c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d01d      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a44      	ldr	r2, [pc, #272]	@ (8002b84 <HAL_DMA_Init+0x6a0>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d018      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a42      	ldr	r2, [pc, #264]	@ (8002b88 <HAL_DMA_Init+0x6a4>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d013      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a41      	ldr	r2, [pc, #260]	@ (8002b8c <HAL_DMA_Init+0x6a8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00e      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a3f      	ldr	r2, [pc, #252]	@ (8002b90 <HAL_DMA_Init+0x6ac>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d009      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a3e      	ldr	r2, [pc, #248]	@ (8002b94 <HAL_DMA_Init+0x6b0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d004      	beq.n	8002aaa <HAL_DMA_Init+0x5c6>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a3c      	ldr	r2, [pc, #240]	@ (8002b98 <HAL_DMA_Init+0x6b4>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d101      	bne.n	8002aae <HAL_DMA_Init+0x5ca>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <HAL_DMA_Init+0x5cc>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d032      	beq.n	8002b1a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f001 fcdf 	bl	8004478 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b80      	cmp	r3, #128	@ 0x80
 8002ac0:	d102      	bne.n	8002ac8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002adc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d010      	beq.n	8002b08 <HAL_DMA_Init+0x624>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d80c      	bhi.n	8002b08 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f001 fd5c 	bl	80045ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	e008      	b.n	8002b1a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	a7fdabf8 	.word	0xa7fdabf8
 8002b38:	cccccccd 	.word	0xcccccccd
 8002b3c:	40020010 	.word	0x40020010
 8002b40:	40020028 	.word	0x40020028
 8002b44:	40020040 	.word	0x40020040
 8002b48:	40020058 	.word	0x40020058
 8002b4c:	40020070 	.word	0x40020070
 8002b50:	40020088 	.word	0x40020088
 8002b54:	400200a0 	.word	0x400200a0
 8002b58:	400200b8 	.word	0x400200b8
 8002b5c:	40020410 	.word	0x40020410
 8002b60:	40020428 	.word	0x40020428
 8002b64:	40020440 	.word	0x40020440
 8002b68:	40020458 	.word	0x40020458
 8002b6c:	40020470 	.word	0x40020470
 8002b70:	40020488 	.word	0x40020488
 8002b74:	400204a0 	.word	0x400204a0
 8002b78:	400204b8 	.word	0x400204b8
 8002b7c:	58025408 	.word	0x58025408
 8002b80:	5802541c 	.word	0x5802541c
 8002b84:	58025430 	.word	0x58025430
 8002b88:	58025444 	.word	0x58025444
 8002b8c:	58025458 	.word	0x58025458
 8002b90:	5802546c 	.word	0x5802546c
 8002b94:	58025480 	.word	0x58025480
 8002b98:	58025494 	.word	0x58025494

08002b9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e226      	b.n	8003006 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_DMA_Start_IT+0x2a>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e21f      	b.n	8003006 <HAL_DMA_Start_IT+0x46a>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	f040 820a 	bne.w	8002ff0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a68      	ldr	r2, [pc, #416]	@ (8002d90 <HAL_DMA_Start_IT+0x1f4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d04a      	beq.n	8002c8a <HAL_DMA_Start_IT+0xee>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a66      	ldr	r2, [pc, #408]	@ (8002d94 <HAL_DMA_Start_IT+0x1f8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d045      	beq.n	8002c8a <HAL_DMA_Start_IT+0xee>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a65      	ldr	r2, [pc, #404]	@ (8002d98 <HAL_DMA_Start_IT+0x1fc>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d040      	beq.n	8002c8a <HAL_DMA_Start_IT+0xee>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a63      	ldr	r2, [pc, #396]	@ (8002d9c <HAL_DMA_Start_IT+0x200>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d03b      	beq.n	8002c8a <HAL_DMA_Start_IT+0xee>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a62      	ldr	r2, [pc, #392]	@ (8002da0 <HAL_DMA_Start_IT+0x204>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d036      	beq.n	8002c8a <HAL_DMA_Start_IT+0xee>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a60      	ldr	r2, [pc, #384]	@ (8002da4 <HAL_DMA_Start_IT+0x208>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d031      	beq.n	8002c8a <HAL_DMA_Start_IT+0xee>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a5f      	ldr	r2, [pc, #380]	@ (8002da8 <HAL_DMA_Start_IT+0x20c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d02c      	beq.n	8002c8a <HAL_DMA_Start_IT+0xee>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a5d      	ldr	r2, [pc, #372]	@ (8002dac <HAL_DMA_Start_IT+0x210>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d027      	beq.n	8002c8a <HAL_DMA_Start_IT+0xee>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a5c      	ldr	r2, [pc, #368]	@ (8002db0 <HAL_DMA_Start_IT+0x214>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d022      	beq.n	8002c8a <HAL_DMA_Start_IT+0xee>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a5a      	ldr	r2, [pc, #360]	@ (8002db4 <HAL_DMA_Start_IT+0x218>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d01d      	beq.n	8002c8a <HAL_DMA_Start_IT+0xee>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a59      	ldr	r2, [pc, #356]	@ (8002db8 <HAL_DMA_Start_IT+0x21c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d018      	beq.n	8002c8a <HAL_DMA_Start_IT+0xee>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a57      	ldr	r2, [pc, #348]	@ (8002dbc <HAL_DMA_Start_IT+0x220>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d013      	beq.n	8002c8a <HAL_DMA_Start_IT+0xee>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a56      	ldr	r2, [pc, #344]	@ (8002dc0 <HAL_DMA_Start_IT+0x224>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d00e      	beq.n	8002c8a <HAL_DMA_Start_IT+0xee>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a54      	ldr	r2, [pc, #336]	@ (8002dc4 <HAL_DMA_Start_IT+0x228>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d009      	beq.n	8002c8a <HAL_DMA_Start_IT+0xee>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a53      	ldr	r2, [pc, #332]	@ (8002dc8 <HAL_DMA_Start_IT+0x22c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d004      	beq.n	8002c8a <HAL_DMA_Start_IT+0xee>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a51      	ldr	r2, [pc, #324]	@ (8002dcc <HAL_DMA_Start_IT+0x230>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d108      	bne.n	8002c9c <HAL_DMA_Start_IT+0x100>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0201 	bic.w	r2, r2, #1
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	e007      	b.n	8002cac <HAL_DMA_Start_IT+0x110>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0201 	bic.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f001 f906 	bl	8003ec4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a34      	ldr	r2, [pc, #208]	@ (8002d90 <HAL_DMA_Start_IT+0x1f4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d04a      	beq.n	8002d58 <HAL_DMA_Start_IT+0x1bc>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a33      	ldr	r2, [pc, #204]	@ (8002d94 <HAL_DMA_Start_IT+0x1f8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d045      	beq.n	8002d58 <HAL_DMA_Start_IT+0x1bc>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a31      	ldr	r2, [pc, #196]	@ (8002d98 <HAL_DMA_Start_IT+0x1fc>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d040      	beq.n	8002d58 <HAL_DMA_Start_IT+0x1bc>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a30      	ldr	r2, [pc, #192]	@ (8002d9c <HAL_DMA_Start_IT+0x200>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d03b      	beq.n	8002d58 <HAL_DMA_Start_IT+0x1bc>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a2e      	ldr	r2, [pc, #184]	@ (8002da0 <HAL_DMA_Start_IT+0x204>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d036      	beq.n	8002d58 <HAL_DMA_Start_IT+0x1bc>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a2d      	ldr	r2, [pc, #180]	@ (8002da4 <HAL_DMA_Start_IT+0x208>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d031      	beq.n	8002d58 <HAL_DMA_Start_IT+0x1bc>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a2b      	ldr	r2, [pc, #172]	@ (8002da8 <HAL_DMA_Start_IT+0x20c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d02c      	beq.n	8002d58 <HAL_DMA_Start_IT+0x1bc>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a2a      	ldr	r2, [pc, #168]	@ (8002dac <HAL_DMA_Start_IT+0x210>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d027      	beq.n	8002d58 <HAL_DMA_Start_IT+0x1bc>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a28      	ldr	r2, [pc, #160]	@ (8002db0 <HAL_DMA_Start_IT+0x214>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d022      	beq.n	8002d58 <HAL_DMA_Start_IT+0x1bc>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a27      	ldr	r2, [pc, #156]	@ (8002db4 <HAL_DMA_Start_IT+0x218>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d01d      	beq.n	8002d58 <HAL_DMA_Start_IT+0x1bc>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a25      	ldr	r2, [pc, #148]	@ (8002db8 <HAL_DMA_Start_IT+0x21c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d018      	beq.n	8002d58 <HAL_DMA_Start_IT+0x1bc>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a24      	ldr	r2, [pc, #144]	@ (8002dbc <HAL_DMA_Start_IT+0x220>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d013      	beq.n	8002d58 <HAL_DMA_Start_IT+0x1bc>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a22      	ldr	r2, [pc, #136]	@ (8002dc0 <HAL_DMA_Start_IT+0x224>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00e      	beq.n	8002d58 <HAL_DMA_Start_IT+0x1bc>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a21      	ldr	r2, [pc, #132]	@ (8002dc4 <HAL_DMA_Start_IT+0x228>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d009      	beq.n	8002d58 <HAL_DMA_Start_IT+0x1bc>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a1f      	ldr	r2, [pc, #124]	@ (8002dc8 <HAL_DMA_Start_IT+0x22c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d004      	beq.n	8002d58 <HAL_DMA_Start_IT+0x1bc>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a1e      	ldr	r2, [pc, #120]	@ (8002dcc <HAL_DMA_Start_IT+0x230>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d101      	bne.n	8002d5c <HAL_DMA_Start_IT+0x1c0>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <HAL_DMA_Start_IT+0x1c2>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d036      	beq.n	8002dd0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f023 021e 	bic.w	r2, r3, #30
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f042 0216 	orr.w	r2, r2, #22
 8002d74:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d03e      	beq.n	8002dfc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0208 	orr.w	r2, r2, #8
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	e035      	b.n	8002dfc <HAL_DMA_Start_IT+0x260>
 8002d90:	40020010 	.word	0x40020010
 8002d94:	40020028 	.word	0x40020028
 8002d98:	40020040 	.word	0x40020040
 8002d9c:	40020058 	.word	0x40020058
 8002da0:	40020070 	.word	0x40020070
 8002da4:	40020088 	.word	0x40020088
 8002da8:	400200a0 	.word	0x400200a0
 8002dac:	400200b8 	.word	0x400200b8
 8002db0:	40020410 	.word	0x40020410
 8002db4:	40020428 	.word	0x40020428
 8002db8:	40020440 	.word	0x40020440
 8002dbc:	40020458 	.word	0x40020458
 8002dc0:	40020470 	.word	0x40020470
 8002dc4:	40020488 	.word	0x40020488
 8002dc8:	400204a0 	.word	0x400204a0
 8002dcc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 020e 	bic.w	r2, r3, #14
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 020a 	orr.w	r2, r2, #10
 8002de2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d007      	beq.n	8002dfc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0204 	orr.w	r2, r2, #4
 8002dfa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a83      	ldr	r2, [pc, #524]	@ (8003010 <HAL_DMA_Start_IT+0x474>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d072      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a82      	ldr	r2, [pc, #520]	@ (8003014 <HAL_DMA_Start_IT+0x478>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d06d      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a80      	ldr	r2, [pc, #512]	@ (8003018 <HAL_DMA_Start_IT+0x47c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d068      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a7f      	ldr	r2, [pc, #508]	@ (800301c <HAL_DMA_Start_IT+0x480>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d063      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a7d      	ldr	r2, [pc, #500]	@ (8003020 <HAL_DMA_Start_IT+0x484>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d05e      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a7c      	ldr	r2, [pc, #496]	@ (8003024 <HAL_DMA_Start_IT+0x488>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d059      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a7a      	ldr	r2, [pc, #488]	@ (8003028 <HAL_DMA_Start_IT+0x48c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d054      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a79      	ldr	r2, [pc, #484]	@ (800302c <HAL_DMA_Start_IT+0x490>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d04f      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a77      	ldr	r2, [pc, #476]	@ (8003030 <HAL_DMA_Start_IT+0x494>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d04a      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a76      	ldr	r2, [pc, #472]	@ (8003034 <HAL_DMA_Start_IT+0x498>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d045      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a74      	ldr	r2, [pc, #464]	@ (8003038 <HAL_DMA_Start_IT+0x49c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d040      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a73      	ldr	r2, [pc, #460]	@ (800303c <HAL_DMA_Start_IT+0x4a0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d03b      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a71      	ldr	r2, [pc, #452]	@ (8003040 <HAL_DMA_Start_IT+0x4a4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d036      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a70      	ldr	r2, [pc, #448]	@ (8003044 <HAL_DMA_Start_IT+0x4a8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d031      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a6e      	ldr	r2, [pc, #440]	@ (8003048 <HAL_DMA_Start_IT+0x4ac>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d02c      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a6d      	ldr	r2, [pc, #436]	@ (800304c <HAL_DMA_Start_IT+0x4b0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d027      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a6b      	ldr	r2, [pc, #428]	@ (8003050 <HAL_DMA_Start_IT+0x4b4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d022      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a6a      	ldr	r2, [pc, #424]	@ (8003054 <HAL_DMA_Start_IT+0x4b8>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d01d      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a68      	ldr	r2, [pc, #416]	@ (8003058 <HAL_DMA_Start_IT+0x4bc>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d018      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a67      	ldr	r2, [pc, #412]	@ (800305c <HAL_DMA_Start_IT+0x4c0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d013      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a65      	ldr	r2, [pc, #404]	@ (8003060 <HAL_DMA_Start_IT+0x4c4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00e      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a64      	ldr	r2, [pc, #400]	@ (8003064 <HAL_DMA_Start_IT+0x4c8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d009      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a62      	ldr	r2, [pc, #392]	@ (8003068 <HAL_DMA_Start_IT+0x4cc>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d004      	beq.n	8002eec <HAL_DMA_Start_IT+0x350>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a61      	ldr	r2, [pc, #388]	@ (800306c <HAL_DMA_Start_IT+0x4d0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d101      	bne.n	8002ef0 <HAL_DMA_Start_IT+0x354>
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <HAL_DMA_Start_IT+0x356>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d01a      	beq.n	8002f2c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d007      	beq.n	8002f14 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f12:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d007      	beq.n	8002f2c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f2a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a37      	ldr	r2, [pc, #220]	@ (8003010 <HAL_DMA_Start_IT+0x474>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d04a      	beq.n	8002fcc <HAL_DMA_Start_IT+0x430>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a36      	ldr	r2, [pc, #216]	@ (8003014 <HAL_DMA_Start_IT+0x478>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d045      	beq.n	8002fcc <HAL_DMA_Start_IT+0x430>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a34      	ldr	r2, [pc, #208]	@ (8003018 <HAL_DMA_Start_IT+0x47c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d040      	beq.n	8002fcc <HAL_DMA_Start_IT+0x430>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a33      	ldr	r2, [pc, #204]	@ (800301c <HAL_DMA_Start_IT+0x480>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d03b      	beq.n	8002fcc <HAL_DMA_Start_IT+0x430>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a31      	ldr	r2, [pc, #196]	@ (8003020 <HAL_DMA_Start_IT+0x484>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d036      	beq.n	8002fcc <HAL_DMA_Start_IT+0x430>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a30      	ldr	r2, [pc, #192]	@ (8003024 <HAL_DMA_Start_IT+0x488>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d031      	beq.n	8002fcc <HAL_DMA_Start_IT+0x430>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a2e      	ldr	r2, [pc, #184]	@ (8003028 <HAL_DMA_Start_IT+0x48c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d02c      	beq.n	8002fcc <HAL_DMA_Start_IT+0x430>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a2d      	ldr	r2, [pc, #180]	@ (800302c <HAL_DMA_Start_IT+0x490>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d027      	beq.n	8002fcc <HAL_DMA_Start_IT+0x430>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a2b      	ldr	r2, [pc, #172]	@ (8003030 <HAL_DMA_Start_IT+0x494>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d022      	beq.n	8002fcc <HAL_DMA_Start_IT+0x430>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a2a      	ldr	r2, [pc, #168]	@ (8003034 <HAL_DMA_Start_IT+0x498>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d01d      	beq.n	8002fcc <HAL_DMA_Start_IT+0x430>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a28      	ldr	r2, [pc, #160]	@ (8003038 <HAL_DMA_Start_IT+0x49c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d018      	beq.n	8002fcc <HAL_DMA_Start_IT+0x430>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a27      	ldr	r2, [pc, #156]	@ (800303c <HAL_DMA_Start_IT+0x4a0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d013      	beq.n	8002fcc <HAL_DMA_Start_IT+0x430>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a25      	ldr	r2, [pc, #148]	@ (8003040 <HAL_DMA_Start_IT+0x4a4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00e      	beq.n	8002fcc <HAL_DMA_Start_IT+0x430>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a24      	ldr	r2, [pc, #144]	@ (8003044 <HAL_DMA_Start_IT+0x4a8>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d009      	beq.n	8002fcc <HAL_DMA_Start_IT+0x430>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a22      	ldr	r2, [pc, #136]	@ (8003048 <HAL_DMA_Start_IT+0x4ac>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <HAL_DMA_Start_IT+0x430>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a21      	ldr	r2, [pc, #132]	@ (800304c <HAL_DMA_Start_IT+0x4b0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d108      	bne.n	8002fde <HAL_DMA_Start_IT+0x442>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	e012      	b.n	8003004 <HAL_DMA_Start_IT+0x468>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	e009      	b.n	8003004 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ff6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003004:	7dfb      	ldrb	r3, [r7, #23]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40020010 	.word	0x40020010
 8003014:	40020028 	.word	0x40020028
 8003018:	40020040 	.word	0x40020040
 800301c:	40020058 	.word	0x40020058
 8003020:	40020070 	.word	0x40020070
 8003024:	40020088 	.word	0x40020088
 8003028:	400200a0 	.word	0x400200a0
 800302c:	400200b8 	.word	0x400200b8
 8003030:	40020410 	.word	0x40020410
 8003034:	40020428 	.word	0x40020428
 8003038:	40020440 	.word	0x40020440
 800303c:	40020458 	.word	0x40020458
 8003040:	40020470 	.word	0x40020470
 8003044:	40020488 	.word	0x40020488
 8003048:	400204a0 	.word	0x400204a0
 800304c:	400204b8 	.word	0x400204b8
 8003050:	58025408 	.word	0x58025408
 8003054:	5802541c 	.word	0x5802541c
 8003058:	58025430 	.word	0x58025430
 800305c:	58025444 	.word	0x58025444
 8003060:	58025458 	.word	0x58025458
 8003064:	5802546c 	.word	0x5802546c
 8003068:	58025480 	.word	0x58025480
 800306c:	58025494 	.word	0x58025494

08003070 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08a      	sub	sp, #40	@ 0x28
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800307c:	4b67      	ldr	r3, [pc, #412]	@ (800321c <HAL_DMA_IRQHandler+0x1ac>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a67      	ldr	r2, [pc, #412]	@ (8003220 <HAL_DMA_IRQHandler+0x1b0>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	0a9b      	lsrs	r3, r3, #10
 8003088:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003094:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a5f      	ldr	r2, [pc, #380]	@ (8003224 <HAL_DMA_IRQHandler+0x1b4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d04a      	beq.n	8003142 <HAL_DMA_IRQHandler+0xd2>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a5d      	ldr	r2, [pc, #372]	@ (8003228 <HAL_DMA_IRQHandler+0x1b8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d045      	beq.n	8003142 <HAL_DMA_IRQHandler+0xd2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a5c      	ldr	r2, [pc, #368]	@ (800322c <HAL_DMA_IRQHandler+0x1bc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d040      	beq.n	8003142 <HAL_DMA_IRQHandler+0xd2>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a5a      	ldr	r2, [pc, #360]	@ (8003230 <HAL_DMA_IRQHandler+0x1c0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d03b      	beq.n	8003142 <HAL_DMA_IRQHandler+0xd2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a59      	ldr	r2, [pc, #356]	@ (8003234 <HAL_DMA_IRQHandler+0x1c4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d036      	beq.n	8003142 <HAL_DMA_IRQHandler+0xd2>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a57      	ldr	r2, [pc, #348]	@ (8003238 <HAL_DMA_IRQHandler+0x1c8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d031      	beq.n	8003142 <HAL_DMA_IRQHandler+0xd2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a56      	ldr	r2, [pc, #344]	@ (800323c <HAL_DMA_IRQHandler+0x1cc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d02c      	beq.n	8003142 <HAL_DMA_IRQHandler+0xd2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a54      	ldr	r2, [pc, #336]	@ (8003240 <HAL_DMA_IRQHandler+0x1d0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d027      	beq.n	8003142 <HAL_DMA_IRQHandler+0xd2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a53      	ldr	r2, [pc, #332]	@ (8003244 <HAL_DMA_IRQHandler+0x1d4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d022      	beq.n	8003142 <HAL_DMA_IRQHandler+0xd2>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a51      	ldr	r2, [pc, #324]	@ (8003248 <HAL_DMA_IRQHandler+0x1d8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d01d      	beq.n	8003142 <HAL_DMA_IRQHandler+0xd2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a50      	ldr	r2, [pc, #320]	@ (800324c <HAL_DMA_IRQHandler+0x1dc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d018      	beq.n	8003142 <HAL_DMA_IRQHandler+0xd2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a4e      	ldr	r2, [pc, #312]	@ (8003250 <HAL_DMA_IRQHandler+0x1e0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d013      	beq.n	8003142 <HAL_DMA_IRQHandler+0xd2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a4d      	ldr	r2, [pc, #308]	@ (8003254 <HAL_DMA_IRQHandler+0x1e4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d00e      	beq.n	8003142 <HAL_DMA_IRQHandler+0xd2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a4b      	ldr	r2, [pc, #300]	@ (8003258 <HAL_DMA_IRQHandler+0x1e8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d009      	beq.n	8003142 <HAL_DMA_IRQHandler+0xd2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a4a      	ldr	r2, [pc, #296]	@ (800325c <HAL_DMA_IRQHandler+0x1ec>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d004      	beq.n	8003142 <HAL_DMA_IRQHandler+0xd2>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a48      	ldr	r2, [pc, #288]	@ (8003260 <HAL_DMA_IRQHandler+0x1f0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d101      	bne.n	8003146 <HAL_DMA_IRQHandler+0xd6>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <HAL_DMA_IRQHandler+0xd8>
 8003146:	2300      	movs	r3, #0
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 842b 	beq.w	80039a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	2208      	movs	r2, #8
 8003158:	409a      	lsls	r2, r3
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 80a2 	beq.w	80032a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a2e      	ldr	r2, [pc, #184]	@ (8003224 <HAL_DMA_IRQHandler+0x1b4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d04a      	beq.n	8003204 <HAL_DMA_IRQHandler+0x194>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a2d      	ldr	r2, [pc, #180]	@ (8003228 <HAL_DMA_IRQHandler+0x1b8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d045      	beq.n	8003204 <HAL_DMA_IRQHandler+0x194>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a2b      	ldr	r2, [pc, #172]	@ (800322c <HAL_DMA_IRQHandler+0x1bc>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d040      	beq.n	8003204 <HAL_DMA_IRQHandler+0x194>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a2a      	ldr	r2, [pc, #168]	@ (8003230 <HAL_DMA_IRQHandler+0x1c0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d03b      	beq.n	8003204 <HAL_DMA_IRQHandler+0x194>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a28      	ldr	r2, [pc, #160]	@ (8003234 <HAL_DMA_IRQHandler+0x1c4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d036      	beq.n	8003204 <HAL_DMA_IRQHandler+0x194>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a27      	ldr	r2, [pc, #156]	@ (8003238 <HAL_DMA_IRQHandler+0x1c8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d031      	beq.n	8003204 <HAL_DMA_IRQHandler+0x194>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a25      	ldr	r2, [pc, #148]	@ (800323c <HAL_DMA_IRQHandler+0x1cc>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d02c      	beq.n	8003204 <HAL_DMA_IRQHandler+0x194>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a24      	ldr	r2, [pc, #144]	@ (8003240 <HAL_DMA_IRQHandler+0x1d0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d027      	beq.n	8003204 <HAL_DMA_IRQHandler+0x194>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a22      	ldr	r2, [pc, #136]	@ (8003244 <HAL_DMA_IRQHandler+0x1d4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d022      	beq.n	8003204 <HAL_DMA_IRQHandler+0x194>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a21      	ldr	r2, [pc, #132]	@ (8003248 <HAL_DMA_IRQHandler+0x1d8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d01d      	beq.n	8003204 <HAL_DMA_IRQHandler+0x194>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a1f      	ldr	r2, [pc, #124]	@ (800324c <HAL_DMA_IRQHandler+0x1dc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d018      	beq.n	8003204 <HAL_DMA_IRQHandler+0x194>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003250 <HAL_DMA_IRQHandler+0x1e0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d013      	beq.n	8003204 <HAL_DMA_IRQHandler+0x194>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003254 <HAL_DMA_IRQHandler+0x1e4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00e      	beq.n	8003204 <HAL_DMA_IRQHandler+0x194>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003258 <HAL_DMA_IRQHandler+0x1e8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d009      	beq.n	8003204 <HAL_DMA_IRQHandler+0x194>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a19      	ldr	r2, [pc, #100]	@ (800325c <HAL_DMA_IRQHandler+0x1ec>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d004      	beq.n	8003204 <HAL_DMA_IRQHandler+0x194>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a18      	ldr	r2, [pc, #96]	@ (8003260 <HAL_DMA_IRQHandler+0x1f0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d12f      	bne.n	8003264 <HAL_DMA_IRQHandler+0x1f4>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b00      	cmp	r3, #0
 8003210:	bf14      	ite	ne
 8003212:	2301      	movne	r3, #1
 8003214:	2300      	moveq	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	e02e      	b.n	8003278 <HAL_DMA_IRQHandler+0x208>
 800321a:	bf00      	nop
 800321c:	24000000 	.word	0x24000000
 8003220:	1b4e81b5 	.word	0x1b4e81b5
 8003224:	40020010 	.word	0x40020010
 8003228:	40020028 	.word	0x40020028
 800322c:	40020040 	.word	0x40020040
 8003230:	40020058 	.word	0x40020058
 8003234:	40020070 	.word	0x40020070
 8003238:	40020088 	.word	0x40020088
 800323c:	400200a0 	.word	0x400200a0
 8003240:	400200b8 	.word	0x400200b8
 8003244:	40020410 	.word	0x40020410
 8003248:	40020428 	.word	0x40020428
 800324c:	40020440 	.word	0x40020440
 8003250:	40020458 	.word	0x40020458
 8003254:	40020470 	.word	0x40020470
 8003258:	40020488 	.word	0x40020488
 800325c:	400204a0 	.word	0x400204a0
 8003260:	400204b8 	.word	0x400204b8
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	bf14      	ite	ne
 8003272:	2301      	movne	r3, #1
 8003274:	2300      	moveq	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d015      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0204 	bic.w	r2, r2, #4
 800328a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	2208      	movs	r2, #8
 8003296:	409a      	lsls	r2, r3
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a0:	f043 0201 	orr.w	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	fa22 f303 	lsr.w	r3, r2, r3
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d06e      	beq.n	800339c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a69      	ldr	r2, [pc, #420]	@ (8003468 <HAL_DMA_IRQHandler+0x3f8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d04a      	beq.n	800335e <HAL_DMA_IRQHandler+0x2ee>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a67      	ldr	r2, [pc, #412]	@ (800346c <HAL_DMA_IRQHandler+0x3fc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d045      	beq.n	800335e <HAL_DMA_IRQHandler+0x2ee>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a66      	ldr	r2, [pc, #408]	@ (8003470 <HAL_DMA_IRQHandler+0x400>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d040      	beq.n	800335e <HAL_DMA_IRQHandler+0x2ee>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a64      	ldr	r2, [pc, #400]	@ (8003474 <HAL_DMA_IRQHandler+0x404>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d03b      	beq.n	800335e <HAL_DMA_IRQHandler+0x2ee>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a63      	ldr	r2, [pc, #396]	@ (8003478 <HAL_DMA_IRQHandler+0x408>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d036      	beq.n	800335e <HAL_DMA_IRQHandler+0x2ee>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a61      	ldr	r2, [pc, #388]	@ (800347c <HAL_DMA_IRQHandler+0x40c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d031      	beq.n	800335e <HAL_DMA_IRQHandler+0x2ee>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a60      	ldr	r2, [pc, #384]	@ (8003480 <HAL_DMA_IRQHandler+0x410>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d02c      	beq.n	800335e <HAL_DMA_IRQHandler+0x2ee>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a5e      	ldr	r2, [pc, #376]	@ (8003484 <HAL_DMA_IRQHandler+0x414>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d027      	beq.n	800335e <HAL_DMA_IRQHandler+0x2ee>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a5d      	ldr	r2, [pc, #372]	@ (8003488 <HAL_DMA_IRQHandler+0x418>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d022      	beq.n	800335e <HAL_DMA_IRQHandler+0x2ee>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a5b      	ldr	r2, [pc, #364]	@ (800348c <HAL_DMA_IRQHandler+0x41c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d01d      	beq.n	800335e <HAL_DMA_IRQHandler+0x2ee>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a5a      	ldr	r2, [pc, #360]	@ (8003490 <HAL_DMA_IRQHandler+0x420>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d018      	beq.n	800335e <HAL_DMA_IRQHandler+0x2ee>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a58      	ldr	r2, [pc, #352]	@ (8003494 <HAL_DMA_IRQHandler+0x424>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <HAL_DMA_IRQHandler+0x2ee>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a57      	ldr	r2, [pc, #348]	@ (8003498 <HAL_DMA_IRQHandler+0x428>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00e      	beq.n	800335e <HAL_DMA_IRQHandler+0x2ee>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a55      	ldr	r2, [pc, #340]	@ (800349c <HAL_DMA_IRQHandler+0x42c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d009      	beq.n	800335e <HAL_DMA_IRQHandler+0x2ee>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a54      	ldr	r2, [pc, #336]	@ (80034a0 <HAL_DMA_IRQHandler+0x430>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d004      	beq.n	800335e <HAL_DMA_IRQHandler+0x2ee>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a52      	ldr	r2, [pc, #328]	@ (80034a4 <HAL_DMA_IRQHandler+0x434>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d10a      	bne.n	8003374 <HAL_DMA_IRQHandler+0x304>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003368:	2b00      	cmp	r3, #0
 800336a:	bf14      	ite	ne
 800336c:	2301      	movne	r3, #1
 800336e:	2300      	moveq	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	e003      	b.n	800337c <HAL_DMA_IRQHandler+0x30c>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2300      	movs	r3, #0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00d      	beq.n	800339c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	2201      	movs	r2, #1
 800338a:	409a      	lsls	r2, r3
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003394:	f043 0202 	orr.w	r2, r3, #2
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a0:	f003 031f 	and.w	r3, r3, #31
 80033a4:	2204      	movs	r2, #4
 80033a6:	409a      	lsls	r2, r3
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 808f 	beq.w	80034d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a2c      	ldr	r2, [pc, #176]	@ (8003468 <HAL_DMA_IRQHandler+0x3f8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d04a      	beq.n	8003452 <HAL_DMA_IRQHandler+0x3e2>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a2a      	ldr	r2, [pc, #168]	@ (800346c <HAL_DMA_IRQHandler+0x3fc>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d045      	beq.n	8003452 <HAL_DMA_IRQHandler+0x3e2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a29      	ldr	r2, [pc, #164]	@ (8003470 <HAL_DMA_IRQHandler+0x400>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d040      	beq.n	8003452 <HAL_DMA_IRQHandler+0x3e2>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a27      	ldr	r2, [pc, #156]	@ (8003474 <HAL_DMA_IRQHandler+0x404>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d03b      	beq.n	8003452 <HAL_DMA_IRQHandler+0x3e2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a26      	ldr	r2, [pc, #152]	@ (8003478 <HAL_DMA_IRQHandler+0x408>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d036      	beq.n	8003452 <HAL_DMA_IRQHandler+0x3e2>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a24      	ldr	r2, [pc, #144]	@ (800347c <HAL_DMA_IRQHandler+0x40c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d031      	beq.n	8003452 <HAL_DMA_IRQHandler+0x3e2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a23      	ldr	r2, [pc, #140]	@ (8003480 <HAL_DMA_IRQHandler+0x410>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d02c      	beq.n	8003452 <HAL_DMA_IRQHandler+0x3e2>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a21      	ldr	r2, [pc, #132]	@ (8003484 <HAL_DMA_IRQHandler+0x414>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d027      	beq.n	8003452 <HAL_DMA_IRQHandler+0x3e2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a20      	ldr	r2, [pc, #128]	@ (8003488 <HAL_DMA_IRQHandler+0x418>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d022      	beq.n	8003452 <HAL_DMA_IRQHandler+0x3e2>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a1e      	ldr	r2, [pc, #120]	@ (800348c <HAL_DMA_IRQHandler+0x41c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d01d      	beq.n	8003452 <HAL_DMA_IRQHandler+0x3e2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1d      	ldr	r2, [pc, #116]	@ (8003490 <HAL_DMA_IRQHandler+0x420>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d018      	beq.n	8003452 <HAL_DMA_IRQHandler+0x3e2>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1b      	ldr	r2, [pc, #108]	@ (8003494 <HAL_DMA_IRQHandler+0x424>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d013      	beq.n	8003452 <HAL_DMA_IRQHandler+0x3e2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1a      	ldr	r2, [pc, #104]	@ (8003498 <HAL_DMA_IRQHandler+0x428>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00e      	beq.n	8003452 <HAL_DMA_IRQHandler+0x3e2>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a18      	ldr	r2, [pc, #96]	@ (800349c <HAL_DMA_IRQHandler+0x42c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d009      	beq.n	8003452 <HAL_DMA_IRQHandler+0x3e2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a17      	ldr	r2, [pc, #92]	@ (80034a0 <HAL_DMA_IRQHandler+0x430>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d004      	beq.n	8003452 <HAL_DMA_IRQHandler+0x3e2>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a15      	ldr	r2, [pc, #84]	@ (80034a4 <HAL_DMA_IRQHandler+0x434>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d12a      	bne.n	80034a8 <HAL_DMA_IRQHandler+0x438>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	bf14      	ite	ne
 8003460:	2301      	movne	r3, #1
 8003462:	2300      	moveq	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	e023      	b.n	80034b0 <HAL_DMA_IRQHandler+0x440>
 8003468:	40020010 	.word	0x40020010
 800346c:	40020028 	.word	0x40020028
 8003470:	40020040 	.word	0x40020040
 8003474:	40020058 	.word	0x40020058
 8003478:	40020070 	.word	0x40020070
 800347c:	40020088 	.word	0x40020088
 8003480:	400200a0 	.word	0x400200a0
 8003484:	400200b8 	.word	0x400200b8
 8003488:	40020410 	.word	0x40020410
 800348c:	40020428 	.word	0x40020428
 8003490:	40020440 	.word	0x40020440
 8003494:	40020458 	.word	0x40020458
 8003498:	40020470 	.word	0x40020470
 800349c:	40020488 	.word	0x40020488
 80034a0:	400204a0 	.word	0x400204a0
 80034a4:	400204b8 	.word	0x400204b8
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2300      	movs	r3, #0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00d      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	2204      	movs	r2, #4
 80034be:	409a      	lsls	r2, r3
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c8:	f043 0204 	orr.w	r2, r3, #4
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	2210      	movs	r2, #16
 80034da:	409a      	lsls	r2, r3
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	4013      	ands	r3, r2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80a6 	beq.w	8003632 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a85      	ldr	r2, [pc, #532]	@ (8003700 <HAL_DMA_IRQHandler+0x690>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d04a      	beq.n	8003586 <HAL_DMA_IRQHandler+0x516>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a83      	ldr	r2, [pc, #524]	@ (8003704 <HAL_DMA_IRQHandler+0x694>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d045      	beq.n	8003586 <HAL_DMA_IRQHandler+0x516>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a82      	ldr	r2, [pc, #520]	@ (8003708 <HAL_DMA_IRQHandler+0x698>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d040      	beq.n	8003586 <HAL_DMA_IRQHandler+0x516>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a80      	ldr	r2, [pc, #512]	@ (800370c <HAL_DMA_IRQHandler+0x69c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d03b      	beq.n	8003586 <HAL_DMA_IRQHandler+0x516>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a7f      	ldr	r2, [pc, #508]	@ (8003710 <HAL_DMA_IRQHandler+0x6a0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d036      	beq.n	8003586 <HAL_DMA_IRQHandler+0x516>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a7d      	ldr	r2, [pc, #500]	@ (8003714 <HAL_DMA_IRQHandler+0x6a4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d031      	beq.n	8003586 <HAL_DMA_IRQHandler+0x516>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a7c      	ldr	r2, [pc, #496]	@ (8003718 <HAL_DMA_IRQHandler+0x6a8>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d02c      	beq.n	8003586 <HAL_DMA_IRQHandler+0x516>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a7a      	ldr	r2, [pc, #488]	@ (800371c <HAL_DMA_IRQHandler+0x6ac>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d027      	beq.n	8003586 <HAL_DMA_IRQHandler+0x516>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a79      	ldr	r2, [pc, #484]	@ (8003720 <HAL_DMA_IRQHandler+0x6b0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d022      	beq.n	8003586 <HAL_DMA_IRQHandler+0x516>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a77      	ldr	r2, [pc, #476]	@ (8003724 <HAL_DMA_IRQHandler+0x6b4>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d01d      	beq.n	8003586 <HAL_DMA_IRQHandler+0x516>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a76      	ldr	r2, [pc, #472]	@ (8003728 <HAL_DMA_IRQHandler+0x6b8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d018      	beq.n	8003586 <HAL_DMA_IRQHandler+0x516>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a74      	ldr	r2, [pc, #464]	@ (800372c <HAL_DMA_IRQHandler+0x6bc>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <HAL_DMA_IRQHandler+0x516>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a73      	ldr	r2, [pc, #460]	@ (8003730 <HAL_DMA_IRQHandler+0x6c0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00e      	beq.n	8003586 <HAL_DMA_IRQHandler+0x516>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a71      	ldr	r2, [pc, #452]	@ (8003734 <HAL_DMA_IRQHandler+0x6c4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d009      	beq.n	8003586 <HAL_DMA_IRQHandler+0x516>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a70      	ldr	r2, [pc, #448]	@ (8003738 <HAL_DMA_IRQHandler+0x6c8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d004      	beq.n	8003586 <HAL_DMA_IRQHandler+0x516>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a6e      	ldr	r2, [pc, #440]	@ (800373c <HAL_DMA_IRQHandler+0x6cc>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d10a      	bne.n	800359c <HAL_DMA_IRQHandler+0x52c>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf14      	ite	ne
 8003594:	2301      	movne	r3, #1
 8003596:	2300      	moveq	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	e009      	b.n	80035b0 <HAL_DMA_IRQHandler+0x540>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bf14      	ite	ne
 80035aa:	2301      	movne	r3, #1
 80035ac:	2300      	moveq	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d03e      	beq.n	8003632 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	2210      	movs	r2, #16
 80035be:	409a      	lsls	r2, r3
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d018      	beq.n	8003604 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d108      	bne.n	80035f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d024      	beq.n	8003632 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	4798      	blx	r3
 80035f0:	e01f      	b.n	8003632 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d01b      	beq.n	8003632 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	4798      	blx	r3
 8003602:	e016      	b.n	8003632 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d107      	bne.n	8003622 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0208 	bic.w	r2, r2, #8
 8003620:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003636:	f003 031f 	and.w	r3, r3, #31
 800363a:	2220      	movs	r2, #32
 800363c:	409a      	lsls	r2, r3
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 8110 	beq.w	8003868 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a2c      	ldr	r2, [pc, #176]	@ (8003700 <HAL_DMA_IRQHandler+0x690>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d04a      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x678>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a2b      	ldr	r2, [pc, #172]	@ (8003704 <HAL_DMA_IRQHandler+0x694>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d045      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x678>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a29      	ldr	r2, [pc, #164]	@ (8003708 <HAL_DMA_IRQHandler+0x698>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d040      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x678>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a28      	ldr	r2, [pc, #160]	@ (800370c <HAL_DMA_IRQHandler+0x69c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d03b      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x678>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a26      	ldr	r2, [pc, #152]	@ (8003710 <HAL_DMA_IRQHandler+0x6a0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d036      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x678>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a25      	ldr	r2, [pc, #148]	@ (8003714 <HAL_DMA_IRQHandler+0x6a4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d031      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x678>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a23      	ldr	r2, [pc, #140]	@ (8003718 <HAL_DMA_IRQHandler+0x6a8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d02c      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x678>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a22      	ldr	r2, [pc, #136]	@ (800371c <HAL_DMA_IRQHandler+0x6ac>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d027      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x678>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a20      	ldr	r2, [pc, #128]	@ (8003720 <HAL_DMA_IRQHandler+0x6b0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d022      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x678>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003724 <HAL_DMA_IRQHandler+0x6b4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d01d      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x678>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003728 <HAL_DMA_IRQHandler+0x6b8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d018      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x678>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1c      	ldr	r2, [pc, #112]	@ (800372c <HAL_DMA_IRQHandler+0x6bc>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d013      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x678>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003730 <HAL_DMA_IRQHandler+0x6c0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00e      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x678>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a19      	ldr	r2, [pc, #100]	@ (8003734 <HAL_DMA_IRQHandler+0x6c4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d009      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x678>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a17      	ldr	r2, [pc, #92]	@ (8003738 <HAL_DMA_IRQHandler+0x6c8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d004      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x678>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a16      	ldr	r2, [pc, #88]	@ (800373c <HAL_DMA_IRQHandler+0x6cc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d12b      	bne.n	8003740 <HAL_DMA_IRQHandler+0x6d0>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	bf14      	ite	ne
 80036f6:	2301      	movne	r3, #1
 80036f8:	2300      	moveq	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	e02a      	b.n	8003754 <HAL_DMA_IRQHandler+0x6e4>
 80036fe:	bf00      	nop
 8003700:	40020010 	.word	0x40020010
 8003704:	40020028 	.word	0x40020028
 8003708:	40020040 	.word	0x40020040
 800370c:	40020058 	.word	0x40020058
 8003710:	40020070 	.word	0x40020070
 8003714:	40020088 	.word	0x40020088
 8003718:	400200a0 	.word	0x400200a0
 800371c:	400200b8 	.word	0x400200b8
 8003720:	40020410 	.word	0x40020410
 8003724:	40020428 	.word	0x40020428
 8003728:	40020440 	.word	0x40020440
 800372c:	40020458 	.word	0x40020458
 8003730:	40020470 	.word	0x40020470
 8003734:	40020488 	.word	0x40020488
 8003738:	400204a0 	.word	0x400204a0
 800373c:	400204b8 	.word	0x400204b8
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	bf14      	ite	ne
 800374e:	2301      	movne	r3, #1
 8003750:	2300      	moveq	r3, #0
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8087 	beq.w	8003868 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375e:	f003 031f 	and.w	r3, r3, #31
 8003762:	2220      	movs	r2, #32
 8003764:	409a      	lsls	r2, r3
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b04      	cmp	r3, #4
 8003774:	d139      	bne.n	80037ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0216 	bic.w	r2, r2, #22
 8003784:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695a      	ldr	r2, [r3, #20]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003794:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d103      	bne.n	80037a6 <HAL_DMA_IRQHandler+0x736>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d007      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0208 	bic.w	r2, r2, #8
 80037b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	223f      	movs	r2, #63	@ 0x3f
 80037c0:	409a      	lsls	r2, r3
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 834a 	beq.w	8003e74 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	4798      	blx	r3
          }
          return;
 80037e8:	e344      	b.n	8003e74 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d018      	beq.n	800382a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d108      	bne.n	8003818 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380a:	2b00      	cmp	r3, #0
 800380c:	d02c      	beq.n	8003868 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	4798      	blx	r3
 8003816:	e027      	b.n	8003868 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800381c:	2b00      	cmp	r3, #0
 800381e:	d023      	beq.n	8003868 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	4798      	blx	r3
 8003828:	e01e      	b.n	8003868 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10f      	bne.n	8003858 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0210 	bic.w	r2, r2, #16
 8003846:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 8306 	beq.w	8003e7e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 8088 	beq.w	8003990 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2204      	movs	r2, #4
 8003884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a7a      	ldr	r2, [pc, #488]	@ (8003a78 <HAL_DMA_IRQHandler+0xa08>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d04a      	beq.n	8003928 <HAL_DMA_IRQHandler+0x8b8>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a79      	ldr	r2, [pc, #484]	@ (8003a7c <HAL_DMA_IRQHandler+0xa0c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d045      	beq.n	8003928 <HAL_DMA_IRQHandler+0x8b8>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a77      	ldr	r2, [pc, #476]	@ (8003a80 <HAL_DMA_IRQHandler+0xa10>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d040      	beq.n	8003928 <HAL_DMA_IRQHandler+0x8b8>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a76      	ldr	r2, [pc, #472]	@ (8003a84 <HAL_DMA_IRQHandler+0xa14>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d03b      	beq.n	8003928 <HAL_DMA_IRQHandler+0x8b8>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a74      	ldr	r2, [pc, #464]	@ (8003a88 <HAL_DMA_IRQHandler+0xa18>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d036      	beq.n	8003928 <HAL_DMA_IRQHandler+0x8b8>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a73      	ldr	r2, [pc, #460]	@ (8003a8c <HAL_DMA_IRQHandler+0xa1c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d031      	beq.n	8003928 <HAL_DMA_IRQHandler+0x8b8>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a71      	ldr	r2, [pc, #452]	@ (8003a90 <HAL_DMA_IRQHandler+0xa20>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d02c      	beq.n	8003928 <HAL_DMA_IRQHandler+0x8b8>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a70      	ldr	r2, [pc, #448]	@ (8003a94 <HAL_DMA_IRQHandler+0xa24>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d027      	beq.n	8003928 <HAL_DMA_IRQHandler+0x8b8>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a6e      	ldr	r2, [pc, #440]	@ (8003a98 <HAL_DMA_IRQHandler+0xa28>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d022      	beq.n	8003928 <HAL_DMA_IRQHandler+0x8b8>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a6d      	ldr	r2, [pc, #436]	@ (8003a9c <HAL_DMA_IRQHandler+0xa2c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d01d      	beq.n	8003928 <HAL_DMA_IRQHandler+0x8b8>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a6b      	ldr	r2, [pc, #428]	@ (8003aa0 <HAL_DMA_IRQHandler+0xa30>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d018      	beq.n	8003928 <HAL_DMA_IRQHandler+0x8b8>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a6a      	ldr	r2, [pc, #424]	@ (8003aa4 <HAL_DMA_IRQHandler+0xa34>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d013      	beq.n	8003928 <HAL_DMA_IRQHandler+0x8b8>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a68      	ldr	r2, [pc, #416]	@ (8003aa8 <HAL_DMA_IRQHandler+0xa38>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00e      	beq.n	8003928 <HAL_DMA_IRQHandler+0x8b8>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a67      	ldr	r2, [pc, #412]	@ (8003aac <HAL_DMA_IRQHandler+0xa3c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d009      	beq.n	8003928 <HAL_DMA_IRQHandler+0x8b8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a65      	ldr	r2, [pc, #404]	@ (8003ab0 <HAL_DMA_IRQHandler+0xa40>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d004      	beq.n	8003928 <HAL_DMA_IRQHandler+0x8b8>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a64      	ldr	r2, [pc, #400]	@ (8003ab4 <HAL_DMA_IRQHandler+0xa44>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d108      	bne.n	800393a <HAL_DMA_IRQHandler+0x8ca>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e007      	b.n	800394a <HAL_DMA_IRQHandler+0x8da>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	3301      	adds	r3, #1
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003952:	429a      	cmp	r2, r3
 8003954:	d307      	bcc.n	8003966 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1f2      	bne.n	800394a <HAL_DMA_IRQHandler+0x8da>
 8003964:	e000      	b.n	8003968 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003966:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d004      	beq.n	8003980 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2203      	movs	r2, #3
 800397a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800397e:	e003      	b.n	8003988 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 8272 	beq.w	8003e7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	4798      	blx	r3
 80039a2:	e26c      	b.n	8003e7e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a43      	ldr	r2, [pc, #268]	@ (8003ab8 <HAL_DMA_IRQHandler+0xa48>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d022      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x984>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a42      	ldr	r2, [pc, #264]	@ (8003abc <HAL_DMA_IRQHandler+0xa4c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d01d      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x984>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a40      	ldr	r2, [pc, #256]	@ (8003ac0 <HAL_DMA_IRQHandler+0xa50>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d018      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x984>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a3f      	ldr	r2, [pc, #252]	@ (8003ac4 <HAL_DMA_IRQHandler+0xa54>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d013      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x984>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a3d      	ldr	r2, [pc, #244]	@ (8003ac8 <HAL_DMA_IRQHandler+0xa58>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00e      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x984>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a3c      	ldr	r2, [pc, #240]	@ (8003acc <HAL_DMA_IRQHandler+0xa5c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d009      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x984>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a3a      	ldr	r2, [pc, #232]	@ (8003ad0 <HAL_DMA_IRQHandler+0xa60>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d004      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x984>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a39      	ldr	r2, [pc, #228]	@ (8003ad4 <HAL_DMA_IRQHandler+0xa64>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d101      	bne.n	80039f8 <HAL_DMA_IRQHandler+0x988>
 80039f4:	2301      	movs	r3, #1
 80039f6:	e000      	b.n	80039fa <HAL_DMA_IRQHandler+0x98a>
 80039f8:	2300      	movs	r3, #0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 823f 	beq.w	8003e7e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	2204      	movs	r2, #4
 8003a12:	409a      	lsls	r2, r3
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80cd 	beq.w	8003bb8 <HAL_DMA_IRQHandler+0xb48>
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 80c7 	beq.w	8003bb8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	2204      	movs	r2, #4
 8003a34:	409a      	lsls	r2, r3
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d049      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 8210 	beq.w	8003e78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a60:	e20a      	b.n	8003e78 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 8206 	beq.w	8003e78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a74:	e200      	b.n	8003e78 <HAL_DMA_IRQHandler+0xe08>
 8003a76:	bf00      	nop
 8003a78:	40020010 	.word	0x40020010
 8003a7c:	40020028 	.word	0x40020028
 8003a80:	40020040 	.word	0x40020040
 8003a84:	40020058 	.word	0x40020058
 8003a88:	40020070 	.word	0x40020070
 8003a8c:	40020088 	.word	0x40020088
 8003a90:	400200a0 	.word	0x400200a0
 8003a94:	400200b8 	.word	0x400200b8
 8003a98:	40020410 	.word	0x40020410
 8003a9c:	40020428 	.word	0x40020428
 8003aa0:	40020440 	.word	0x40020440
 8003aa4:	40020458 	.word	0x40020458
 8003aa8:	40020470 	.word	0x40020470
 8003aac:	40020488 	.word	0x40020488
 8003ab0:	400204a0 	.word	0x400204a0
 8003ab4:	400204b8 	.word	0x400204b8
 8003ab8:	58025408 	.word	0x58025408
 8003abc:	5802541c 	.word	0x5802541c
 8003ac0:	58025430 	.word	0x58025430
 8003ac4:	58025444 	.word	0x58025444
 8003ac8:	58025458 	.word	0x58025458
 8003acc:	5802546c 	.word	0x5802546c
 8003ad0:	58025480 	.word	0x58025480
 8003ad4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d160      	bne.n	8003ba4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a7f      	ldr	r2, [pc, #508]	@ (8003ce4 <HAL_DMA_IRQHandler+0xc74>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d04a      	beq.n	8003b82 <HAL_DMA_IRQHandler+0xb12>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a7d      	ldr	r2, [pc, #500]	@ (8003ce8 <HAL_DMA_IRQHandler+0xc78>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d045      	beq.n	8003b82 <HAL_DMA_IRQHandler+0xb12>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a7c      	ldr	r2, [pc, #496]	@ (8003cec <HAL_DMA_IRQHandler+0xc7c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d040      	beq.n	8003b82 <HAL_DMA_IRQHandler+0xb12>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a7a      	ldr	r2, [pc, #488]	@ (8003cf0 <HAL_DMA_IRQHandler+0xc80>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d03b      	beq.n	8003b82 <HAL_DMA_IRQHandler+0xb12>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a79      	ldr	r2, [pc, #484]	@ (8003cf4 <HAL_DMA_IRQHandler+0xc84>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d036      	beq.n	8003b82 <HAL_DMA_IRQHandler+0xb12>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a77      	ldr	r2, [pc, #476]	@ (8003cf8 <HAL_DMA_IRQHandler+0xc88>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d031      	beq.n	8003b82 <HAL_DMA_IRQHandler+0xb12>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a76      	ldr	r2, [pc, #472]	@ (8003cfc <HAL_DMA_IRQHandler+0xc8c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d02c      	beq.n	8003b82 <HAL_DMA_IRQHandler+0xb12>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a74      	ldr	r2, [pc, #464]	@ (8003d00 <HAL_DMA_IRQHandler+0xc90>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d027      	beq.n	8003b82 <HAL_DMA_IRQHandler+0xb12>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a73      	ldr	r2, [pc, #460]	@ (8003d04 <HAL_DMA_IRQHandler+0xc94>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d022      	beq.n	8003b82 <HAL_DMA_IRQHandler+0xb12>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a71      	ldr	r2, [pc, #452]	@ (8003d08 <HAL_DMA_IRQHandler+0xc98>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d01d      	beq.n	8003b82 <HAL_DMA_IRQHandler+0xb12>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a70      	ldr	r2, [pc, #448]	@ (8003d0c <HAL_DMA_IRQHandler+0xc9c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d018      	beq.n	8003b82 <HAL_DMA_IRQHandler+0xb12>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a6e      	ldr	r2, [pc, #440]	@ (8003d10 <HAL_DMA_IRQHandler+0xca0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d013      	beq.n	8003b82 <HAL_DMA_IRQHandler+0xb12>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a6d      	ldr	r2, [pc, #436]	@ (8003d14 <HAL_DMA_IRQHandler+0xca4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d00e      	beq.n	8003b82 <HAL_DMA_IRQHandler+0xb12>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a6b      	ldr	r2, [pc, #428]	@ (8003d18 <HAL_DMA_IRQHandler+0xca8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d009      	beq.n	8003b82 <HAL_DMA_IRQHandler+0xb12>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a6a      	ldr	r2, [pc, #424]	@ (8003d1c <HAL_DMA_IRQHandler+0xcac>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d004      	beq.n	8003b82 <HAL_DMA_IRQHandler+0xb12>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a68      	ldr	r2, [pc, #416]	@ (8003d20 <HAL_DMA_IRQHandler+0xcb0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d108      	bne.n	8003b94 <HAL_DMA_IRQHandler+0xb24>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0208 	bic.w	r2, r2, #8
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	e007      	b.n	8003ba4 <HAL_DMA_IRQHandler+0xb34>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0204 	bic.w	r2, r2, #4
 8003ba2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 8165 	beq.w	8003e78 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bb6:	e15f      	b.n	8003e78 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 80c5 	beq.w	8003d58 <HAL_DMA_IRQHandler+0xce8>
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80bf 	beq.w	8003d58 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	2202      	movs	r2, #2
 8003be4:	409a      	lsls	r2, r3
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d018      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 813a 	beq.w	8003e7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c10:	e134      	b.n	8003e7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 8130 	beq.w	8003e7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c24:	e12a      	b.n	8003e7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f040 8089 	bne.w	8003d44 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a2b      	ldr	r2, [pc, #172]	@ (8003ce4 <HAL_DMA_IRQHandler+0xc74>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d04a      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xc62>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a29      	ldr	r2, [pc, #164]	@ (8003ce8 <HAL_DMA_IRQHandler+0xc78>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d045      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xc62>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a28      	ldr	r2, [pc, #160]	@ (8003cec <HAL_DMA_IRQHandler+0xc7c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d040      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xc62>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a26      	ldr	r2, [pc, #152]	@ (8003cf0 <HAL_DMA_IRQHandler+0xc80>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d03b      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xc62>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a25      	ldr	r2, [pc, #148]	@ (8003cf4 <HAL_DMA_IRQHandler+0xc84>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d036      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xc62>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a23      	ldr	r2, [pc, #140]	@ (8003cf8 <HAL_DMA_IRQHandler+0xc88>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d031      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xc62>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a22      	ldr	r2, [pc, #136]	@ (8003cfc <HAL_DMA_IRQHandler+0xc8c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d02c      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xc62>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a20      	ldr	r2, [pc, #128]	@ (8003d00 <HAL_DMA_IRQHandler+0xc90>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d027      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xc62>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a1f      	ldr	r2, [pc, #124]	@ (8003d04 <HAL_DMA_IRQHandler+0xc94>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d022      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xc62>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1d      	ldr	r2, [pc, #116]	@ (8003d08 <HAL_DMA_IRQHandler+0xc98>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d01d      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xc62>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8003d0c <HAL_DMA_IRQHandler+0xc9c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d018      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xc62>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1a      	ldr	r2, [pc, #104]	@ (8003d10 <HAL_DMA_IRQHandler+0xca0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d013      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xc62>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a19      	ldr	r2, [pc, #100]	@ (8003d14 <HAL_DMA_IRQHandler+0xca4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00e      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xc62>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a17      	ldr	r2, [pc, #92]	@ (8003d18 <HAL_DMA_IRQHandler+0xca8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d009      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xc62>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a16      	ldr	r2, [pc, #88]	@ (8003d1c <HAL_DMA_IRQHandler+0xcac>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d004      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xc62>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a14      	ldr	r2, [pc, #80]	@ (8003d20 <HAL_DMA_IRQHandler+0xcb0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d128      	bne.n	8003d24 <HAL_DMA_IRQHandler+0xcb4>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0214 	bic.w	r2, r2, #20
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	e027      	b.n	8003d34 <HAL_DMA_IRQHandler+0xcc4>
 8003ce4:	40020010 	.word	0x40020010
 8003ce8:	40020028 	.word	0x40020028
 8003cec:	40020040 	.word	0x40020040
 8003cf0:	40020058 	.word	0x40020058
 8003cf4:	40020070 	.word	0x40020070
 8003cf8:	40020088 	.word	0x40020088
 8003cfc:	400200a0 	.word	0x400200a0
 8003d00:	400200b8 	.word	0x400200b8
 8003d04:	40020410 	.word	0x40020410
 8003d08:	40020428 	.word	0x40020428
 8003d0c:	40020440 	.word	0x40020440
 8003d10:	40020458 	.word	0x40020458
 8003d14:	40020470 	.word	0x40020470
 8003d18:	40020488 	.word	0x40020488
 8003d1c:	400204a0 	.word	0x400204a0
 8003d20:	400204b8 	.word	0x400204b8
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 020a 	bic.w	r2, r2, #10
 8003d32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8097 	beq.w	8003e7c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d56:	e091      	b.n	8003e7c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	2208      	movs	r2, #8
 8003d62:	409a      	lsls	r2, r3
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	4013      	ands	r3, r2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8088 	beq.w	8003e7e <HAL_DMA_IRQHandler+0xe0e>
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 8082 	beq.w	8003e7e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a41      	ldr	r2, [pc, #260]	@ (8003e84 <HAL_DMA_IRQHandler+0xe14>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d04a      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xdaa>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a3f      	ldr	r2, [pc, #252]	@ (8003e88 <HAL_DMA_IRQHandler+0xe18>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d045      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xdaa>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a3e      	ldr	r2, [pc, #248]	@ (8003e8c <HAL_DMA_IRQHandler+0xe1c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d040      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xdaa>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a3c      	ldr	r2, [pc, #240]	@ (8003e90 <HAL_DMA_IRQHandler+0xe20>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d03b      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xdaa>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a3b      	ldr	r2, [pc, #236]	@ (8003e94 <HAL_DMA_IRQHandler+0xe24>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d036      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xdaa>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a39      	ldr	r2, [pc, #228]	@ (8003e98 <HAL_DMA_IRQHandler+0xe28>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d031      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xdaa>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a38      	ldr	r2, [pc, #224]	@ (8003e9c <HAL_DMA_IRQHandler+0xe2c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d02c      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xdaa>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a36      	ldr	r2, [pc, #216]	@ (8003ea0 <HAL_DMA_IRQHandler+0xe30>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d027      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xdaa>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a35      	ldr	r2, [pc, #212]	@ (8003ea4 <HAL_DMA_IRQHandler+0xe34>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d022      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xdaa>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a33      	ldr	r2, [pc, #204]	@ (8003ea8 <HAL_DMA_IRQHandler+0xe38>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01d      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xdaa>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a32      	ldr	r2, [pc, #200]	@ (8003eac <HAL_DMA_IRQHandler+0xe3c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d018      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xdaa>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a30      	ldr	r2, [pc, #192]	@ (8003eb0 <HAL_DMA_IRQHandler+0xe40>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xdaa>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a2f      	ldr	r2, [pc, #188]	@ (8003eb4 <HAL_DMA_IRQHandler+0xe44>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00e      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xdaa>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a2d      	ldr	r2, [pc, #180]	@ (8003eb8 <HAL_DMA_IRQHandler+0xe48>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d009      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xdaa>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a2c      	ldr	r2, [pc, #176]	@ (8003ebc <HAL_DMA_IRQHandler+0xe4c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d004      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xdaa>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a2a      	ldr	r2, [pc, #168]	@ (8003ec0 <HAL_DMA_IRQHandler+0xe50>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d108      	bne.n	8003e2c <HAL_DMA_IRQHandler+0xdbc>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 021c 	bic.w	r2, r2, #28
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	e007      	b.n	8003e3c <HAL_DMA_IRQHandler+0xdcc>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 020e 	bic.w	r2, r2, #14
 8003e3a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e40:	f003 031f 	and.w	r3, r3, #31
 8003e44:	2201      	movs	r2, #1
 8003e46:	409a      	lsls	r2, r3
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	4798      	blx	r3
 8003e72:	e004      	b.n	8003e7e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003e74:	bf00      	nop
 8003e76:	e002      	b.n	8003e7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e78:	bf00      	nop
 8003e7a:	e000      	b.n	8003e7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e7c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e7e:	3728      	adds	r7, #40	@ 0x28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40020010 	.word	0x40020010
 8003e88:	40020028 	.word	0x40020028
 8003e8c:	40020040 	.word	0x40020040
 8003e90:	40020058 	.word	0x40020058
 8003e94:	40020070 	.word	0x40020070
 8003e98:	40020088 	.word	0x40020088
 8003e9c:	400200a0 	.word	0x400200a0
 8003ea0:	400200b8 	.word	0x400200b8
 8003ea4:	40020410 	.word	0x40020410
 8003ea8:	40020428 	.word	0x40020428
 8003eac:	40020440 	.word	0x40020440
 8003eb0:	40020458 	.word	0x40020458
 8003eb4:	40020470 	.word	0x40020470
 8003eb8:	40020488 	.word	0x40020488
 8003ebc:	400204a0 	.word	0x400204a0
 8003ec0:	400204b8 	.word	0x400204b8

08003ec4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003edc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a7f      	ldr	r2, [pc, #508]	@ (80040e0 <DMA_SetConfig+0x21c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d072      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a7d      	ldr	r2, [pc, #500]	@ (80040e4 <DMA_SetConfig+0x220>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d06d      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a7c      	ldr	r2, [pc, #496]	@ (80040e8 <DMA_SetConfig+0x224>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d068      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a7a      	ldr	r2, [pc, #488]	@ (80040ec <DMA_SetConfig+0x228>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d063      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a79      	ldr	r2, [pc, #484]	@ (80040f0 <DMA_SetConfig+0x22c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d05e      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a77      	ldr	r2, [pc, #476]	@ (80040f4 <DMA_SetConfig+0x230>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d059      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a76      	ldr	r2, [pc, #472]	@ (80040f8 <DMA_SetConfig+0x234>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d054      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a74      	ldr	r2, [pc, #464]	@ (80040fc <DMA_SetConfig+0x238>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d04f      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a73      	ldr	r2, [pc, #460]	@ (8004100 <DMA_SetConfig+0x23c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d04a      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a71      	ldr	r2, [pc, #452]	@ (8004104 <DMA_SetConfig+0x240>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d045      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a70      	ldr	r2, [pc, #448]	@ (8004108 <DMA_SetConfig+0x244>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d040      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a6e      	ldr	r2, [pc, #440]	@ (800410c <DMA_SetConfig+0x248>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d03b      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a6d      	ldr	r2, [pc, #436]	@ (8004110 <DMA_SetConfig+0x24c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d036      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a6b      	ldr	r2, [pc, #428]	@ (8004114 <DMA_SetConfig+0x250>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d031      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a6a      	ldr	r2, [pc, #424]	@ (8004118 <DMA_SetConfig+0x254>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d02c      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a68      	ldr	r2, [pc, #416]	@ (800411c <DMA_SetConfig+0x258>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d027      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a67      	ldr	r2, [pc, #412]	@ (8004120 <DMA_SetConfig+0x25c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d022      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a65      	ldr	r2, [pc, #404]	@ (8004124 <DMA_SetConfig+0x260>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01d      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a64      	ldr	r2, [pc, #400]	@ (8004128 <DMA_SetConfig+0x264>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d018      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a62      	ldr	r2, [pc, #392]	@ (800412c <DMA_SetConfig+0x268>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d013      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a61      	ldr	r2, [pc, #388]	@ (8004130 <DMA_SetConfig+0x26c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00e      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a5f      	ldr	r2, [pc, #380]	@ (8004134 <DMA_SetConfig+0x270>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d009      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a5e      	ldr	r2, [pc, #376]	@ (8004138 <DMA_SetConfig+0x274>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d004      	beq.n	8003fce <DMA_SetConfig+0x10a>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a5c      	ldr	r2, [pc, #368]	@ (800413c <DMA_SetConfig+0x278>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d101      	bne.n	8003fd2 <DMA_SetConfig+0x10e>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <DMA_SetConfig+0x110>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00d      	beq.n	8003ff4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003fe0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d004      	beq.n	8003ff4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003ff2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a39      	ldr	r2, [pc, #228]	@ (80040e0 <DMA_SetConfig+0x21c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d04a      	beq.n	8004094 <DMA_SetConfig+0x1d0>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a38      	ldr	r2, [pc, #224]	@ (80040e4 <DMA_SetConfig+0x220>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d045      	beq.n	8004094 <DMA_SetConfig+0x1d0>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a36      	ldr	r2, [pc, #216]	@ (80040e8 <DMA_SetConfig+0x224>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d040      	beq.n	8004094 <DMA_SetConfig+0x1d0>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a35      	ldr	r2, [pc, #212]	@ (80040ec <DMA_SetConfig+0x228>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d03b      	beq.n	8004094 <DMA_SetConfig+0x1d0>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a33      	ldr	r2, [pc, #204]	@ (80040f0 <DMA_SetConfig+0x22c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d036      	beq.n	8004094 <DMA_SetConfig+0x1d0>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a32      	ldr	r2, [pc, #200]	@ (80040f4 <DMA_SetConfig+0x230>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d031      	beq.n	8004094 <DMA_SetConfig+0x1d0>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a30      	ldr	r2, [pc, #192]	@ (80040f8 <DMA_SetConfig+0x234>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d02c      	beq.n	8004094 <DMA_SetConfig+0x1d0>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a2f      	ldr	r2, [pc, #188]	@ (80040fc <DMA_SetConfig+0x238>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d027      	beq.n	8004094 <DMA_SetConfig+0x1d0>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a2d      	ldr	r2, [pc, #180]	@ (8004100 <DMA_SetConfig+0x23c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d022      	beq.n	8004094 <DMA_SetConfig+0x1d0>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a2c      	ldr	r2, [pc, #176]	@ (8004104 <DMA_SetConfig+0x240>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d01d      	beq.n	8004094 <DMA_SetConfig+0x1d0>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a2a      	ldr	r2, [pc, #168]	@ (8004108 <DMA_SetConfig+0x244>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d018      	beq.n	8004094 <DMA_SetConfig+0x1d0>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a29      	ldr	r2, [pc, #164]	@ (800410c <DMA_SetConfig+0x248>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d013      	beq.n	8004094 <DMA_SetConfig+0x1d0>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a27      	ldr	r2, [pc, #156]	@ (8004110 <DMA_SetConfig+0x24c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00e      	beq.n	8004094 <DMA_SetConfig+0x1d0>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a26      	ldr	r2, [pc, #152]	@ (8004114 <DMA_SetConfig+0x250>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d009      	beq.n	8004094 <DMA_SetConfig+0x1d0>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a24      	ldr	r2, [pc, #144]	@ (8004118 <DMA_SetConfig+0x254>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d004      	beq.n	8004094 <DMA_SetConfig+0x1d0>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a23      	ldr	r2, [pc, #140]	@ (800411c <DMA_SetConfig+0x258>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d101      	bne.n	8004098 <DMA_SetConfig+0x1d4>
 8004094:	2301      	movs	r3, #1
 8004096:	e000      	b.n	800409a <DMA_SetConfig+0x1d6>
 8004098:	2300      	movs	r3, #0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d059      	beq.n	8004152 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a2:	f003 031f 	and.w	r3, r3, #31
 80040a6:	223f      	movs	r2, #63	@ 0x3f
 80040a8:	409a      	lsls	r2, r3
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80040bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b40      	cmp	r3, #64	@ 0x40
 80040cc:	d138      	bne.n	8004140 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80040de:	e086      	b.n	80041ee <DMA_SetConfig+0x32a>
 80040e0:	40020010 	.word	0x40020010
 80040e4:	40020028 	.word	0x40020028
 80040e8:	40020040 	.word	0x40020040
 80040ec:	40020058 	.word	0x40020058
 80040f0:	40020070 	.word	0x40020070
 80040f4:	40020088 	.word	0x40020088
 80040f8:	400200a0 	.word	0x400200a0
 80040fc:	400200b8 	.word	0x400200b8
 8004100:	40020410 	.word	0x40020410
 8004104:	40020428 	.word	0x40020428
 8004108:	40020440 	.word	0x40020440
 800410c:	40020458 	.word	0x40020458
 8004110:	40020470 	.word	0x40020470
 8004114:	40020488 	.word	0x40020488
 8004118:	400204a0 	.word	0x400204a0
 800411c:	400204b8 	.word	0x400204b8
 8004120:	58025408 	.word	0x58025408
 8004124:	5802541c 	.word	0x5802541c
 8004128:	58025430 	.word	0x58025430
 800412c:	58025444 	.word	0x58025444
 8004130:	58025458 	.word	0x58025458
 8004134:	5802546c 	.word	0x5802546c
 8004138:	58025480 	.word	0x58025480
 800413c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	60da      	str	r2, [r3, #12]
}
 8004150:	e04d      	b.n	80041ee <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a29      	ldr	r2, [pc, #164]	@ (80041fc <DMA_SetConfig+0x338>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d022      	beq.n	80041a2 <DMA_SetConfig+0x2de>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a27      	ldr	r2, [pc, #156]	@ (8004200 <DMA_SetConfig+0x33c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d01d      	beq.n	80041a2 <DMA_SetConfig+0x2de>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a26      	ldr	r2, [pc, #152]	@ (8004204 <DMA_SetConfig+0x340>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d018      	beq.n	80041a2 <DMA_SetConfig+0x2de>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a24      	ldr	r2, [pc, #144]	@ (8004208 <DMA_SetConfig+0x344>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d013      	beq.n	80041a2 <DMA_SetConfig+0x2de>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a23      	ldr	r2, [pc, #140]	@ (800420c <DMA_SetConfig+0x348>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00e      	beq.n	80041a2 <DMA_SetConfig+0x2de>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a21      	ldr	r2, [pc, #132]	@ (8004210 <DMA_SetConfig+0x34c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d009      	beq.n	80041a2 <DMA_SetConfig+0x2de>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a20      	ldr	r2, [pc, #128]	@ (8004214 <DMA_SetConfig+0x350>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d004      	beq.n	80041a2 <DMA_SetConfig+0x2de>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a1e      	ldr	r2, [pc, #120]	@ (8004218 <DMA_SetConfig+0x354>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d101      	bne.n	80041a6 <DMA_SetConfig+0x2e2>
 80041a2:	2301      	movs	r3, #1
 80041a4:	e000      	b.n	80041a8 <DMA_SetConfig+0x2e4>
 80041a6:	2300      	movs	r3, #0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d020      	beq.n	80041ee <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b0:	f003 031f 	and.w	r3, r3, #31
 80041b4:	2201      	movs	r2, #1
 80041b6:	409a      	lsls	r2, r3
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	2b40      	cmp	r3, #64	@ 0x40
 80041ca:	d108      	bne.n	80041de <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	60da      	str	r2, [r3, #12]
}
 80041dc:	e007      	b.n	80041ee <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	60da      	str	r2, [r3, #12]
}
 80041ee:	bf00      	nop
 80041f0:	371c      	adds	r7, #28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	58025408 	.word	0x58025408
 8004200:	5802541c 	.word	0x5802541c
 8004204:	58025430 	.word	0x58025430
 8004208:	58025444 	.word	0x58025444
 800420c:	58025458 	.word	0x58025458
 8004210:	5802546c 	.word	0x5802546c
 8004214:	58025480 	.word	0x58025480
 8004218:	58025494 	.word	0x58025494

0800421c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a42      	ldr	r2, [pc, #264]	@ (8004334 <DMA_CalcBaseAndBitshift+0x118>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d04a      	beq.n	80042c4 <DMA_CalcBaseAndBitshift+0xa8>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a41      	ldr	r2, [pc, #260]	@ (8004338 <DMA_CalcBaseAndBitshift+0x11c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d045      	beq.n	80042c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a3f      	ldr	r2, [pc, #252]	@ (800433c <DMA_CalcBaseAndBitshift+0x120>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d040      	beq.n	80042c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a3e      	ldr	r2, [pc, #248]	@ (8004340 <DMA_CalcBaseAndBitshift+0x124>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d03b      	beq.n	80042c4 <DMA_CalcBaseAndBitshift+0xa8>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a3c      	ldr	r2, [pc, #240]	@ (8004344 <DMA_CalcBaseAndBitshift+0x128>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d036      	beq.n	80042c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a3b      	ldr	r2, [pc, #236]	@ (8004348 <DMA_CalcBaseAndBitshift+0x12c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d031      	beq.n	80042c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a39      	ldr	r2, [pc, #228]	@ (800434c <DMA_CalcBaseAndBitshift+0x130>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d02c      	beq.n	80042c4 <DMA_CalcBaseAndBitshift+0xa8>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a38      	ldr	r2, [pc, #224]	@ (8004350 <DMA_CalcBaseAndBitshift+0x134>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d027      	beq.n	80042c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a36      	ldr	r2, [pc, #216]	@ (8004354 <DMA_CalcBaseAndBitshift+0x138>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d022      	beq.n	80042c4 <DMA_CalcBaseAndBitshift+0xa8>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a35      	ldr	r2, [pc, #212]	@ (8004358 <DMA_CalcBaseAndBitshift+0x13c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d01d      	beq.n	80042c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a33      	ldr	r2, [pc, #204]	@ (800435c <DMA_CalcBaseAndBitshift+0x140>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d018      	beq.n	80042c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a32      	ldr	r2, [pc, #200]	@ (8004360 <DMA_CalcBaseAndBitshift+0x144>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d013      	beq.n	80042c4 <DMA_CalcBaseAndBitshift+0xa8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a30      	ldr	r2, [pc, #192]	@ (8004364 <DMA_CalcBaseAndBitshift+0x148>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00e      	beq.n	80042c4 <DMA_CalcBaseAndBitshift+0xa8>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004368 <DMA_CalcBaseAndBitshift+0x14c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d009      	beq.n	80042c4 <DMA_CalcBaseAndBitshift+0xa8>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a2d      	ldr	r2, [pc, #180]	@ (800436c <DMA_CalcBaseAndBitshift+0x150>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d004      	beq.n	80042c4 <DMA_CalcBaseAndBitshift+0xa8>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a2c      	ldr	r2, [pc, #176]	@ (8004370 <DMA_CalcBaseAndBitshift+0x154>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d101      	bne.n	80042c8 <DMA_CalcBaseAndBitshift+0xac>
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <DMA_CalcBaseAndBitshift+0xae>
 80042c8:	2300      	movs	r3, #0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d024      	beq.n	8004318 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	3b10      	subs	r3, #16
 80042d6:	4a27      	ldr	r2, [pc, #156]	@ (8004374 <DMA_CalcBaseAndBitshift+0x158>)
 80042d8:	fba2 2303 	umull	r2, r3, r2, r3
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	4a24      	ldr	r2, [pc, #144]	@ (8004378 <DMA_CalcBaseAndBitshift+0x15c>)
 80042e8:	5cd3      	ldrb	r3, [r2, r3]
 80042ea:	461a      	mov	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	d908      	bls.n	8004308 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	4b1f      	ldr	r3, [pc, #124]	@ (800437c <DMA_CalcBaseAndBitshift+0x160>)
 80042fe:	4013      	ands	r3, r2
 8004300:	1d1a      	adds	r2, r3, #4
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	659a      	str	r2, [r3, #88]	@ 0x58
 8004306:	e00d      	b.n	8004324 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	4b1b      	ldr	r3, [pc, #108]	@ (800437c <DMA_CalcBaseAndBitshift+0x160>)
 8004310:	4013      	ands	r3, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6593      	str	r3, [r2, #88]	@ 0x58
 8004316:	e005      	b.n	8004324 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004328:	4618      	mov	r0, r3
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	40020010 	.word	0x40020010
 8004338:	40020028 	.word	0x40020028
 800433c:	40020040 	.word	0x40020040
 8004340:	40020058 	.word	0x40020058
 8004344:	40020070 	.word	0x40020070
 8004348:	40020088 	.word	0x40020088
 800434c:	400200a0 	.word	0x400200a0
 8004350:	400200b8 	.word	0x400200b8
 8004354:	40020410 	.word	0x40020410
 8004358:	40020428 	.word	0x40020428
 800435c:	40020440 	.word	0x40020440
 8004360:	40020458 	.word	0x40020458
 8004364:	40020470 	.word	0x40020470
 8004368:	40020488 	.word	0x40020488
 800436c:	400204a0 	.word	0x400204a0
 8004370:	400204b8 	.word	0x400204b8
 8004374:	aaaaaaab 	.word	0xaaaaaaab
 8004378:	080063bc 	.word	0x080063bc
 800437c:	fffffc00 	.word	0xfffffc00

08004380 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d120      	bne.n	80043d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004398:	2b03      	cmp	r3, #3
 800439a:	d858      	bhi.n	800444e <DMA_CheckFifoParam+0xce>
 800439c:	a201      	add	r2, pc, #4	@ (adr r2, 80043a4 <DMA_CheckFifoParam+0x24>)
 800439e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a2:	bf00      	nop
 80043a4:	080043b5 	.word	0x080043b5
 80043a8:	080043c7 	.word	0x080043c7
 80043ac:	080043b5 	.word	0x080043b5
 80043b0:	0800444f 	.word	0x0800444f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d048      	beq.n	8004452 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043c4:	e045      	b.n	8004452 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043ce:	d142      	bne.n	8004456 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043d4:	e03f      	b.n	8004456 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043de:	d123      	bne.n	8004428 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d838      	bhi.n	800445a <DMA_CheckFifoParam+0xda>
 80043e8:	a201      	add	r2, pc, #4	@ (adr r2, 80043f0 <DMA_CheckFifoParam+0x70>)
 80043ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ee:	bf00      	nop
 80043f0:	08004401 	.word	0x08004401
 80043f4:	08004407 	.word	0x08004407
 80043f8:	08004401 	.word	0x08004401
 80043fc:	08004419 	.word	0x08004419
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
        break;
 8004404:	e030      	b.n	8004468 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d025      	beq.n	800445e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004416:	e022      	b.n	800445e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004420:	d11f      	bne.n	8004462 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004426:	e01c      	b.n	8004462 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442c:	2b02      	cmp	r3, #2
 800442e:	d902      	bls.n	8004436 <DMA_CheckFifoParam+0xb6>
 8004430:	2b03      	cmp	r3, #3
 8004432:	d003      	beq.n	800443c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004434:	e018      	b.n	8004468 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	73fb      	strb	r3, [r7, #15]
        break;
 800443a:	e015      	b.n	8004468 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004440:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00e      	beq.n	8004466 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
    break;
 800444c:	e00b      	b.n	8004466 <DMA_CheckFifoParam+0xe6>
        break;
 800444e:	bf00      	nop
 8004450:	e00a      	b.n	8004468 <DMA_CheckFifoParam+0xe8>
        break;
 8004452:	bf00      	nop
 8004454:	e008      	b.n	8004468 <DMA_CheckFifoParam+0xe8>
        break;
 8004456:	bf00      	nop
 8004458:	e006      	b.n	8004468 <DMA_CheckFifoParam+0xe8>
        break;
 800445a:	bf00      	nop
 800445c:	e004      	b.n	8004468 <DMA_CheckFifoParam+0xe8>
        break;
 800445e:	bf00      	nop
 8004460:	e002      	b.n	8004468 <DMA_CheckFifoParam+0xe8>
        break;
 8004462:	bf00      	nop
 8004464:	e000      	b.n	8004468 <DMA_CheckFifoParam+0xe8>
    break;
 8004466:	bf00      	nop
    }
  }

  return status;
 8004468:	7bfb      	ldrb	r3, [r7, #15]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop

08004478 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a38      	ldr	r2, [pc, #224]	@ (800456c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d022      	beq.n	80044d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a36      	ldr	r2, [pc, #216]	@ (8004570 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d01d      	beq.n	80044d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a35      	ldr	r2, [pc, #212]	@ (8004574 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d018      	beq.n	80044d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a33      	ldr	r2, [pc, #204]	@ (8004578 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a32      	ldr	r2, [pc, #200]	@ (800457c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00e      	beq.n	80044d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a30      	ldr	r2, [pc, #192]	@ (8004580 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d009      	beq.n	80044d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a2f      	ldr	r2, [pc, #188]	@ (8004584 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d004      	beq.n	80044d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004588 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d101      	bne.n	80044da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80044da:	2300      	movs	r3, #0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d01a      	beq.n	8004516 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	3b08      	subs	r3, #8
 80044e8:	4a28      	ldr	r2, [pc, #160]	@ (800458c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80044ea:	fba2 2303 	umull	r2, r3, r2, r3
 80044ee:	091b      	lsrs	r3, r3, #4
 80044f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4b26      	ldr	r3, [pc, #152]	@ (8004590 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	461a      	mov	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a24      	ldr	r2, [pc, #144]	@ (8004594 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004504:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	2201      	movs	r2, #1
 800450e:	409a      	lsls	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004514:	e024      	b.n	8004560 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	3b10      	subs	r3, #16
 800451e:	4a1e      	ldr	r2, [pc, #120]	@ (8004598 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004520:	fba2 2303 	umull	r2, r3, r2, r3
 8004524:	091b      	lsrs	r3, r3, #4
 8004526:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4a1c      	ldr	r2, [pc, #112]	@ (800459c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d806      	bhi.n	800453e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	4a1b      	ldr	r2, [pc, #108]	@ (80045a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d902      	bls.n	800453e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	3308      	adds	r3, #8
 800453c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4b18      	ldr	r3, [pc, #96]	@ (80045a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	461a      	mov	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a16      	ldr	r2, [pc, #88]	@ (80045a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004550:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	2201      	movs	r2, #1
 800455a:	409a      	lsls	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004560:	bf00      	nop
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	58025408 	.word	0x58025408
 8004570:	5802541c 	.word	0x5802541c
 8004574:	58025430 	.word	0x58025430
 8004578:	58025444 	.word	0x58025444
 800457c:	58025458 	.word	0x58025458
 8004580:	5802546c 	.word	0x5802546c
 8004584:	58025480 	.word	0x58025480
 8004588:	58025494 	.word	0x58025494
 800458c:	cccccccd 	.word	0xcccccccd
 8004590:	16009600 	.word	0x16009600
 8004594:	58025880 	.word	0x58025880
 8004598:	aaaaaaab 	.word	0xaaaaaaab
 800459c:	400204b8 	.word	0x400204b8
 80045a0:	4002040f 	.word	0x4002040f
 80045a4:	10008200 	.word	0x10008200
 80045a8:	40020880 	.word	0x40020880

080045ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d04a      	beq.n	8004658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d847      	bhi.n	8004658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a25      	ldr	r2, [pc, #148]	@ (8004664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d022      	beq.n	8004618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a24      	ldr	r2, [pc, #144]	@ (8004668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d01d      	beq.n	8004618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a22      	ldr	r2, [pc, #136]	@ (800466c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d018      	beq.n	8004618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a21      	ldr	r2, [pc, #132]	@ (8004670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d013      	beq.n	8004618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00e      	beq.n	8004618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d009      	beq.n	8004618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1c      	ldr	r2, [pc, #112]	@ (800467c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d004      	beq.n	8004618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1b      	ldr	r2, [pc, #108]	@ (8004680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d101      	bne.n	800461c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004618:	2301      	movs	r3, #1
 800461a:	e000      	b.n	800461e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800461c:	2300      	movs	r3, #0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4b17      	ldr	r3, [pc, #92]	@ (8004684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	461a      	mov	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a15      	ldr	r2, [pc, #84]	@ (8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004634:	671a      	str	r2, [r3, #112]	@ 0x70
 8004636:	e009      	b.n	800464c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4b14      	ldr	r3, [pc, #80]	@ (800468c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	461a      	mov	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a11      	ldr	r2, [pc, #68]	@ (8004690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800464a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	3b01      	subs	r3, #1
 8004650:	2201      	movs	r2, #1
 8004652:	409a      	lsls	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004658:	bf00      	nop
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	58025408 	.word	0x58025408
 8004668:	5802541c 	.word	0x5802541c
 800466c:	58025430 	.word	0x58025430
 8004670:	58025444 	.word	0x58025444
 8004674:	58025458 	.word	0x58025458
 8004678:	5802546c 	.word	0x5802546c
 800467c:	58025480 	.word	0x58025480
 8004680:	58025494 	.word	0x58025494
 8004684:	1600963f 	.word	0x1600963f
 8004688:	58025940 	.word	0x58025940
 800468c:	1000823f 	.word	0x1000823f
 8004690:	40020940 	.word	0x40020940

08004694 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004694:	b480      	push	{r7}
 8004696:	b089      	sub	sp, #36	@ 0x24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80046a2:	4b89      	ldr	r3, [pc, #548]	@ (80048c8 <HAL_GPIO_Init+0x234>)
 80046a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80046a6:	e194      	b.n	80049d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	2101      	movs	r1, #1
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	fa01 f303 	lsl.w	r3, r1, r3
 80046b4:	4013      	ands	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 8186 	beq.w	80049cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d005      	beq.n	80046d8 <HAL_GPIO_Init+0x44>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 0303 	and.w	r3, r3, #3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d130      	bne.n	800473a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	2203      	movs	r2, #3
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	43db      	mvns	r3, r3
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	4013      	ands	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	4313      	orrs	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800470e:	2201      	movs	r2, #1
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	43db      	mvns	r3, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4013      	ands	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	091b      	lsrs	r3, r3, #4
 8004724:	f003 0201 	and.w	r2, r3, #1
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	4313      	orrs	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	2b03      	cmp	r3, #3
 8004744:	d017      	beq.n	8004776 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	2203      	movs	r2, #3
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	43db      	mvns	r3, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4013      	ands	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	4313      	orrs	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d123      	bne.n	80047ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	08da      	lsrs	r2, r3, #3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	3208      	adds	r2, #8
 800478a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800478e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	220f      	movs	r2, #15
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43db      	mvns	r3, r3
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4013      	ands	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	691a      	ldr	r2, [r3, #16]
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	08da      	lsrs	r2, r3, #3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3208      	adds	r2, #8
 80047c4:	69b9      	ldr	r1, [r7, #24]
 80047c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	2203      	movs	r2, #3
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	43db      	mvns	r3, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4013      	ands	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f003 0203 	and.w	r2, r3, #3
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	fa02 f303 	lsl.w	r3, r2, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 80e0 	beq.w	80049cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800480c:	4b2f      	ldr	r3, [pc, #188]	@ (80048cc <HAL_GPIO_Init+0x238>)
 800480e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004812:	4a2e      	ldr	r2, [pc, #184]	@ (80048cc <HAL_GPIO_Init+0x238>)
 8004814:	f043 0302 	orr.w	r3, r3, #2
 8004818:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800481c:	4b2b      	ldr	r3, [pc, #172]	@ (80048cc <HAL_GPIO_Init+0x238>)
 800481e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800482a:	4a29      	ldr	r2, [pc, #164]	@ (80048d0 <HAL_GPIO_Init+0x23c>)
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	089b      	lsrs	r3, r3, #2
 8004830:	3302      	adds	r3, #2
 8004832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	220f      	movs	r2, #15
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	43db      	mvns	r3, r3
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	4013      	ands	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a20      	ldr	r2, [pc, #128]	@ (80048d4 <HAL_GPIO_Init+0x240>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d052      	beq.n	80048fc <HAL_GPIO_Init+0x268>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a1f      	ldr	r2, [pc, #124]	@ (80048d8 <HAL_GPIO_Init+0x244>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d031      	beq.n	80048c2 <HAL_GPIO_Init+0x22e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a1e      	ldr	r2, [pc, #120]	@ (80048dc <HAL_GPIO_Init+0x248>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d02b      	beq.n	80048be <HAL_GPIO_Init+0x22a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a1d      	ldr	r2, [pc, #116]	@ (80048e0 <HAL_GPIO_Init+0x24c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d025      	beq.n	80048ba <HAL_GPIO_Init+0x226>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a1c      	ldr	r2, [pc, #112]	@ (80048e4 <HAL_GPIO_Init+0x250>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d01f      	beq.n	80048b6 <HAL_GPIO_Init+0x222>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a1b      	ldr	r2, [pc, #108]	@ (80048e8 <HAL_GPIO_Init+0x254>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d019      	beq.n	80048b2 <HAL_GPIO_Init+0x21e>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a1a      	ldr	r2, [pc, #104]	@ (80048ec <HAL_GPIO_Init+0x258>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d013      	beq.n	80048ae <HAL_GPIO_Init+0x21a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a19      	ldr	r2, [pc, #100]	@ (80048f0 <HAL_GPIO_Init+0x25c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d00d      	beq.n	80048aa <HAL_GPIO_Init+0x216>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a18      	ldr	r2, [pc, #96]	@ (80048f4 <HAL_GPIO_Init+0x260>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d007      	beq.n	80048a6 <HAL_GPIO_Init+0x212>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a17      	ldr	r2, [pc, #92]	@ (80048f8 <HAL_GPIO_Init+0x264>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d101      	bne.n	80048a2 <HAL_GPIO_Init+0x20e>
 800489e:	2309      	movs	r3, #9
 80048a0:	e02d      	b.n	80048fe <HAL_GPIO_Init+0x26a>
 80048a2:	230a      	movs	r3, #10
 80048a4:	e02b      	b.n	80048fe <HAL_GPIO_Init+0x26a>
 80048a6:	2308      	movs	r3, #8
 80048a8:	e029      	b.n	80048fe <HAL_GPIO_Init+0x26a>
 80048aa:	2307      	movs	r3, #7
 80048ac:	e027      	b.n	80048fe <HAL_GPIO_Init+0x26a>
 80048ae:	2306      	movs	r3, #6
 80048b0:	e025      	b.n	80048fe <HAL_GPIO_Init+0x26a>
 80048b2:	2305      	movs	r3, #5
 80048b4:	e023      	b.n	80048fe <HAL_GPIO_Init+0x26a>
 80048b6:	2304      	movs	r3, #4
 80048b8:	e021      	b.n	80048fe <HAL_GPIO_Init+0x26a>
 80048ba:	2303      	movs	r3, #3
 80048bc:	e01f      	b.n	80048fe <HAL_GPIO_Init+0x26a>
 80048be:	2302      	movs	r3, #2
 80048c0:	e01d      	b.n	80048fe <HAL_GPIO_Init+0x26a>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e01b      	b.n	80048fe <HAL_GPIO_Init+0x26a>
 80048c6:	bf00      	nop
 80048c8:	58000080 	.word	0x58000080
 80048cc:	58024400 	.word	0x58024400
 80048d0:	58000400 	.word	0x58000400
 80048d4:	58020000 	.word	0x58020000
 80048d8:	58020400 	.word	0x58020400
 80048dc:	58020800 	.word	0x58020800
 80048e0:	58020c00 	.word	0x58020c00
 80048e4:	58021000 	.word	0x58021000
 80048e8:	58021400 	.word	0x58021400
 80048ec:	58021800 	.word	0x58021800
 80048f0:	58021c00 	.word	0x58021c00
 80048f4:	58022000 	.word	0x58022000
 80048f8:	58022400 	.word	0x58022400
 80048fc:	2300      	movs	r3, #0
 80048fe:	69fa      	ldr	r2, [r7, #28]
 8004900:	f002 0203 	and.w	r2, r2, #3
 8004904:	0092      	lsls	r2, r2, #2
 8004906:	4093      	lsls	r3, r2
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	4313      	orrs	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800490e:	4938      	ldr	r1, [pc, #224]	@ (80049f0 <HAL_GPIO_Init+0x35c>)
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	089b      	lsrs	r3, r3, #2
 8004914:	3302      	adds	r3, #2
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800491c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	43db      	mvns	r3, r3
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	4013      	ands	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004942:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800494a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	43db      	mvns	r3, r3
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	4013      	ands	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004970:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	43db      	mvns	r3, r3
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	4013      	ands	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	43db      	mvns	r3, r3
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	4013      	ands	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	3301      	adds	r3, #1
 80049d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	fa22 f303 	lsr.w	r3, r2, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f47f ae63 	bne.w	80046a8 <HAL_GPIO_Init+0x14>
  }
}
 80049e2:	bf00      	nop
 80049e4:	bf00      	nop
 80049e6:	3724      	adds	r7, #36	@ 0x24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	58000400 	.word	0x58000400

080049f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	807b      	strh	r3, [r7, #2]
 8004a00:	4613      	mov	r3, r2
 8004a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a04:	787b      	ldrb	r3, [r7, #1]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a0a:	887a      	ldrh	r2, [r7, #2]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004a10:	e003      	b.n	8004a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a12:	887b      	ldrh	r3, [r7, #2]
 8004a14:	041a      	lsls	r2, r3, #16
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	619a      	str	r2, [r3, #24]
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
	...

08004a28 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004a30:	4b19      	ldr	r3, [pc, #100]	@ (8004a98 <HAL_PWREx_ConfigSupply+0x70>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d00a      	beq.n	8004a52 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a3c:	4b16      	ldr	r3, [pc, #88]	@ (8004a98 <HAL_PWREx_ConfigSupply+0x70>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d001      	beq.n	8004a4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e01f      	b.n	8004a8e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e01d      	b.n	8004a8e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a52:	4b11      	ldr	r3, [pc, #68]	@ (8004a98 <HAL_PWREx_ConfigSupply+0x70>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f023 0207 	bic.w	r2, r3, #7
 8004a5a:	490f      	ldr	r1, [pc, #60]	@ (8004a98 <HAL_PWREx_ConfigSupply+0x70>)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004a62:	f7fd fb9f 	bl	80021a4 <HAL_GetTick>
 8004a66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a68:	e009      	b.n	8004a7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a6a:	f7fd fb9b 	bl	80021a4 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a78:	d901      	bls.n	8004a7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e007      	b.n	8004a8e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a7e:	4b06      	ldr	r3, [pc, #24]	@ (8004a98 <HAL_PWREx_ConfigSupply+0x70>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a8a:	d1ee      	bne.n	8004a6a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	58024800 	.word	0x58024800

08004a9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08c      	sub	sp, #48	@ 0x30
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d102      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	f000 bc48 	b.w	8005340 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 8088 	beq.w	8004bce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004abe:	4b99      	ldr	r3, [pc, #612]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ac8:	4b96      	ldr	r3, [pc, #600]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004acc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad0:	2b10      	cmp	r3, #16
 8004ad2:	d007      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x48>
 8004ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad6:	2b18      	cmp	r3, #24
 8004ad8:	d111      	bne.n	8004afe <HAL_RCC_OscConfig+0x62>
 8004ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d10c      	bne.n	8004afe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae4:	4b8f      	ldr	r3, [pc, #572]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d06d      	beq.n	8004bcc <HAL_RCC_OscConfig+0x130>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d169      	bne.n	8004bcc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	f000 bc21 	b.w	8005340 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b06:	d106      	bne.n	8004b16 <HAL_RCC_OscConfig+0x7a>
 8004b08:	4b86      	ldr	r3, [pc, #536]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a85      	ldr	r2, [pc, #532]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004b0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	e02e      	b.n	8004b74 <HAL_RCC_OscConfig+0xd8>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10c      	bne.n	8004b38 <HAL_RCC_OscConfig+0x9c>
 8004b1e:	4b81      	ldr	r3, [pc, #516]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a80      	ldr	r2, [pc, #512]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004b24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	4b7e      	ldr	r3, [pc, #504]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a7d      	ldr	r2, [pc, #500]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004b30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	e01d      	b.n	8004b74 <HAL_RCC_OscConfig+0xd8>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b40:	d10c      	bne.n	8004b5c <HAL_RCC_OscConfig+0xc0>
 8004b42:	4b78      	ldr	r3, [pc, #480]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a77      	ldr	r2, [pc, #476]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004b48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	4b75      	ldr	r3, [pc, #468]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a74      	ldr	r2, [pc, #464]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	e00b      	b.n	8004b74 <HAL_RCC_OscConfig+0xd8>
 8004b5c:	4b71      	ldr	r3, [pc, #452]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a70      	ldr	r2, [pc, #448]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004b62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	4b6e      	ldr	r3, [pc, #440]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a6d      	ldr	r2, [pc, #436]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004b6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d013      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7c:	f7fd fb12 	bl	80021a4 <HAL_GetTick>
 8004b80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b84:	f7fd fb0e 	bl	80021a4 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	@ 0x64
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e3d4      	b.n	8005340 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b96:	4b63      	ldr	r3, [pc, #396]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCC_OscConfig+0xe8>
 8004ba2:	e014      	b.n	8004bce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba4:	f7fd fafe 	bl	80021a4 <HAL_GetTick>
 8004ba8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bac:	f7fd fafa 	bl	80021a4 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b64      	cmp	r3, #100	@ 0x64
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e3c0      	b.n	8005340 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bbe:	4b59      	ldr	r3, [pc, #356]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f0      	bne.n	8004bac <HAL_RCC_OscConfig+0x110>
 8004bca:	e000      	b.n	8004bce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 80ca 	beq.w	8004d70 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bdc:	4b51      	ldr	r3, [pc, #324]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004be4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004be6:	4b4f      	ldr	r3, [pc, #316]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d007      	beq.n	8004c02 <HAL_RCC_OscConfig+0x166>
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	2b18      	cmp	r3, #24
 8004bf6:	d156      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x20a>
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d151      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c02:	4b48      	ldr	r3, [pc, #288]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_RCC_OscConfig+0x17e>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e392      	b.n	8005340 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c1a:	4b42      	ldr	r3, [pc, #264]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f023 0219 	bic.w	r2, r3, #25
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	493f      	ldr	r1, [pc, #252]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2c:	f7fd faba 	bl	80021a4 <HAL_GetTick>
 8004c30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c34:	f7fd fab6 	bl	80021a4 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e37c      	b.n	8005340 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c46:	4b37      	ldr	r3, [pc, #220]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0f0      	beq.n	8004c34 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c52:	f7fd fab3 	bl	80021bc <HAL_GetREVID>
 8004c56:	4603      	mov	r3, r0
 8004c58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d817      	bhi.n	8004c90 <HAL_RCC_OscConfig+0x1f4>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	2b40      	cmp	r3, #64	@ 0x40
 8004c66:	d108      	bne.n	8004c7a <HAL_RCC_OscConfig+0x1de>
 8004c68:	4b2e      	ldr	r3, [pc, #184]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004c70:	4a2c      	ldr	r2, [pc, #176]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004c72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c76:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c78:	e07a      	b.n	8004d70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	031b      	lsls	r3, r3, #12
 8004c88:	4926      	ldr	r1, [pc, #152]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c8e:	e06f      	b.n	8004d70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c90:	4b24      	ldr	r3, [pc, #144]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	061b      	lsls	r3, r3, #24
 8004c9e:	4921      	ldr	r1, [pc, #132]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ca4:	e064      	b.n	8004d70 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d047      	beq.n	8004d3e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004cae:	4b1d      	ldr	r3, [pc, #116]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f023 0219 	bic.w	r2, r3, #25
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	491a      	ldr	r1, [pc, #104]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc0:	f7fd fa70 	bl	80021a4 <HAL_GetTick>
 8004cc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cc8:	f7fd fa6c 	bl	80021a4 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e332      	b.n	8005340 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cda:	4b12      	ldr	r3, [pc, #72]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0304 	and.w	r3, r3, #4
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f0      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce6:	f7fd fa69 	bl	80021bc <HAL_GetREVID>
 8004cea:	4603      	mov	r3, r0
 8004cec:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d819      	bhi.n	8004d28 <HAL_RCC_OscConfig+0x28c>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	2b40      	cmp	r3, #64	@ 0x40
 8004cfa:	d108      	bne.n	8004d0e <HAL_RCC_OscConfig+0x272>
 8004cfc:	4b09      	ldr	r3, [pc, #36]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004d04:	4a07      	ldr	r2, [pc, #28]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d0a:	6053      	str	r3, [r2, #4]
 8004d0c:	e030      	b.n	8004d70 <HAL_RCC_OscConfig+0x2d4>
 8004d0e:	4b05      	ldr	r3, [pc, #20]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	031b      	lsls	r3, r3, #12
 8004d1c:	4901      	ldr	r1, [pc, #4]	@ (8004d24 <HAL_RCC_OscConfig+0x288>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	604b      	str	r3, [r1, #4]
 8004d22:	e025      	b.n	8004d70 <HAL_RCC_OscConfig+0x2d4>
 8004d24:	58024400 	.word	0x58024400
 8004d28:	4b9a      	ldr	r3, [pc, #616]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	061b      	lsls	r3, r3, #24
 8004d36:	4997      	ldr	r1, [pc, #604]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	604b      	str	r3, [r1, #4]
 8004d3c:	e018      	b.n	8004d70 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d3e:	4b95      	ldr	r3, [pc, #596]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a94      	ldr	r2, [pc, #592]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004d44:	f023 0301 	bic.w	r3, r3, #1
 8004d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4a:	f7fd fa2b 	bl	80021a4 <HAL_GetTick>
 8004d4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d52:	f7fd fa27 	bl	80021a4 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e2ed      	b.n	8005340 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d64:	4b8b      	ldr	r3, [pc, #556]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1f0      	bne.n	8004d52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 80a9 	beq.w	8004ed0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d7e:	4b85      	ldr	r3, [pc, #532]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d86:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d88:	4b82      	ldr	r3, [pc, #520]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d007      	beq.n	8004da4 <HAL_RCC_OscConfig+0x308>
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	2b18      	cmp	r3, #24
 8004d98:	d13a      	bne.n	8004e10 <HAL_RCC_OscConfig+0x374>
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f003 0303 	and.w	r3, r3, #3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d135      	bne.n	8004e10 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004da4:	4b7b      	ldr	r3, [pc, #492]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <HAL_RCC_OscConfig+0x320>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	2b80      	cmp	r3, #128	@ 0x80
 8004db6:	d001      	beq.n	8004dbc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e2c1      	b.n	8005340 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dbc:	f7fd f9fe 	bl	80021bc <HAL_GetREVID>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d817      	bhi.n	8004dfa <HAL_RCC_OscConfig+0x35e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	2b20      	cmp	r3, #32
 8004dd0:	d108      	bne.n	8004de4 <HAL_RCC_OscConfig+0x348>
 8004dd2:	4b70      	ldr	r3, [pc, #448]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004dda:	4a6e      	ldr	r2, [pc, #440]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004ddc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004de0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004de2:	e075      	b.n	8004ed0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004de4:	4b6b      	ldr	r3, [pc, #428]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	069b      	lsls	r3, r3, #26
 8004df2:	4968      	ldr	r1, [pc, #416]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004df8:	e06a      	b.n	8004ed0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dfa:	4b66      	ldr	r3, [pc, #408]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	061b      	lsls	r3, r3, #24
 8004e08:	4962      	ldr	r1, [pc, #392]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e0e:	e05f      	b.n	8004ed0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d042      	beq.n	8004e9e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e18:	4b5e      	ldr	r3, [pc, #376]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a5d      	ldr	r2, [pc, #372]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e24:	f7fd f9be 	bl	80021a4 <HAL_GetTick>
 8004e28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e2c:	f7fd f9ba 	bl	80021a4 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e280      	b.n	8005340 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e3e:	4b55      	ldr	r3, [pc, #340]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f0      	beq.n	8004e2c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e4a:	f7fd f9b7 	bl	80021bc <HAL_GetREVID>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d817      	bhi.n	8004e88 <HAL_RCC_OscConfig+0x3ec>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	d108      	bne.n	8004e72 <HAL_RCC_OscConfig+0x3d6>
 8004e60:	4b4c      	ldr	r3, [pc, #304]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004e68:	4a4a      	ldr	r2, [pc, #296]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004e6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e6e:	6053      	str	r3, [r2, #4]
 8004e70:	e02e      	b.n	8004ed0 <HAL_RCC_OscConfig+0x434>
 8004e72:	4b48      	ldr	r3, [pc, #288]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	069b      	lsls	r3, r3, #26
 8004e80:	4944      	ldr	r1, [pc, #272]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	604b      	str	r3, [r1, #4]
 8004e86:	e023      	b.n	8004ed0 <HAL_RCC_OscConfig+0x434>
 8004e88:	4b42      	ldr	r3, [pc, #264]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	061b      	lsls	r3, r3, #24
 8004e96:	493f      	ldr	r1, [pc, #252]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60cb      	str	r3, [r1, #12]
 8004e9c:	e018      	b.n	8004ed0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e9e:	4b3d      	ldr	r3, [pc, #244]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a3c      	ldr	r2, [pc, #240]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004ea4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eaa:	f7fd f97b 	bl	80021a4 <HAL_GetTick>
 8004eae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004eb2:	f7fd f977 	bl	80021a4 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e23d      	b.n	8005340 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ec4:	4b33      	ldr	r3, [pc, #204]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f0      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d036      	beq.n	8004f4a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d019      	beq.n	8004f18 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004ee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ee8:	4a2a      	ldr	r2, [pc, #168]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004eea:	f043 0301 	orr.w	r3, r3, #1
 8004eee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef0:	f7fd f958 	bl	80021a4 <HAL_GetTick>
 8004ef4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ef8:	f7fd f954 	bl	80021a4 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e21a      	b.n	8005340 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f0a:	4b22      	ldr	r3, [pc, #136]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004f0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0f0      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x45c>
 8004f16:	e018      	b.n	8004f4a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f18:	4b1e      	ldr	r3, [pc, #120]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004f1e:	f023 0301 	bic.w	r3, r3, #1
 8004f22:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f24:	f7fd f93e 	bl	80021a4 <HAL_GetTick>
 8004f28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f2c:	f7fd f93a 	bl	80021a4 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e200      	b.n	8005340 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f3e:	4b15      	ldr	r3, [pc, #84]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004f40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1f0      	bne.n	8004f2c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d039      	beq.n	8004fca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d01c      	beq.n	8004f98 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a0c      	ldr	r2, [pc, #48]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004f64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f6a:	f7fd f91b 	bl	80021a4 <HAL_GetTick>
 8004f6e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f70:	e008      	b.n	8004f84 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f72:	f7fd f917 	bl	80021a4 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e1dd      	b.n	8005340 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f84:	4b03      	ldr	r3, [pc, #12]	@ (8004f94 <HAL_RCC_OscConfig+0x4f8>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f0      	beq.n	8004f72 <HAL_RCC_OscConfig+0x4d6>
 8004f90:	e01b      	b.n	8004fca <HAL_RCC_OscConfig+0x52e>
 8004f92:	bf00      	nop
 8004f94:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f98:	4b9b      	ldr	r3, [pc, #620]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a9a      	ldr	r2, [pc, #616]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 8004f9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fa2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fa4:	f7fd f8fe 	bl	80021a4 <HAL_GetTick>
 8004fa8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fac:	f7fd f8fa 	bl	80021a4 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e1c0      	b.n	8005340 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fbe:	4b92      	ldr	r3, [pc, #584]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f0      	bne.n	8004fac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0304 	and.w	r3, r3, #4
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 8081 	beq.w	80050da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fd8:	4b8c      	ldr	r3, [pc, #560]	@ (800520c <HAL_RCC_OscConfig+0x770>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a8b      	ldr	r2, [pc, #556]	@ (800520c <HAL_RCC_OscConfig+0x770>)
 8004fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fe4:	f7fd f8de 	bl	80021a4 <HAL_GetTick>
 8004fe8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fec:	f7fd f8da 	bl	80021a4 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b64      	cmp	r3, #100	@ 0x64
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e1a0      	b.n	8005340 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ffe:	4b83      	ldr	r3, [pc, #524]	@ (800520c <HAL_RCC_OscConfig+0x770>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0f0      	beq.n	8004fec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d106      	bne.n	8005020 <HAL_RCC_OscConfig+0x584>
 8005012:	4b7d      	ldr	r3, [pc, #500]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 8005014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005016:	4a7c      	ldr	r2, [pc, #496]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 8005018:	f043 0301 	orr.w	r3, r3, #1
 800501c:	6713      	str	r3, [r2, #112]	@ 0x70
 800501e:	e02d      	b.n	800507c <HAL_RCC_OscConfig+0x5e0>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10c      	bne.n	8005042 <HAL_RCC_OscConfig+0x5a6>
 8005028:	4b77      	ldr	r3, [pc, #476]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800502c:	4a76      	ldr	r2, [pc, #472]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 800502e:	f023 0301 	bic.w	r3, r3, #1
 8005032:	6713      	str	r3, [r2, #112]	@ 0x70
 8005034:	4b74      	ldr	r3, [pc, #464]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 8005036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005038:	4a73      	ldr	r2, [pc, #460]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 800503a:	f023 0304 	bic.w	r3, r3, #4
 800503e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005040:	e01c      	b.n	800507c <HAL_RCC_OscConfig+0x5e0>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	2b05      	cmp	r3, #5
 8005048:	d10c      	bne.n	8005064 <HAL_RCC_OscConfig+0x5c8>
 800504a:	4b6f      	ldr	r3, [pc, #444]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 800504c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800504e:	4a6e      	ldr	r2, [pc, #440]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 8005050:	f043 0304 	orr.w	r3, r3, #4
 8005054:	6713      	str	r3, [r2, #112]	@ 0x70
 8005056:	4b6c      	ldr	r3, [pc, #432]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 8005058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505a:	4a6b      	ldr	r2, [pc, #428]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 800505c:	f043 0301 	orr.w	r3, r3, #1
 8005060:	6713      	str	r3, [r2, #112]	@ 0x70
 8005062:	e00b      	b.n	800507c <HAL_RCC_OscConfig+0x5e0>
 8005064:	4b68      	ldr	r3, [pc, #416]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 8005066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005068:	4a67      	ldr	r2, [pc, #412]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 800506a:	f023 0301 	bic.w	r3, r3, #1
 800506e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005070:	4b65      	ldr	r3, [pc, #404]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 8005072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005074:	4a64      	ldr	r2, [pc, #400]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 8005076:	f023 0304 	bic.w	r3, r3, #4
 800507a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d015      	beq.n	80050b0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005084:	f7fd f88e 	bl	80021a4 <HAL_GetTick>
 8005088:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800508a:	e00a      	b.n	80050a2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800508c:	f7fd f88a 	bl	80021a4 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800509a:	4293      	cmp	r3, r2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e14e      	b.n	8005340 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050a2:	4b59      	ldr	r3, [pc, #356]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 80050a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0ee      	beq.n	800508c <HAL_RCC_OscConfig+0x5f0>
 80050ae:	e014      	b.n	80050da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b0:	f7fd f878 	bl	80021a4 <HAL_GetTick>
 80050b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050b6:	e00a      	b.n	80050ce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b8:	f7fd f874 	bl	80021a4 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e138      	b.n	8005340 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050ce:	4b4e      	ldr	r3, [pc, #312]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 80050d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1ee      	bne.n	80050b8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 812d 	beq.w	800533e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80050e4:	4b48      	ldr	r3, [pc, #288]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050ec:	2b18      	cmp	r3, #24
 80050ee:	f000 80bd 	beq.w	800526c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	f040 809e 	bne.w	8005238 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050fc:	4b42      	ldr	r3, [pc, #264]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a41      	ldr	r2, [pc, #260]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 8005102:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005108:	f7fd f84c 	bl	80021a4 <HAL_GetTick>
 800510c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005110:	f7fd f848 	bl	80021a4 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e10e      	b.n	8005340 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005122:	4b39      	ldr	r3, [pc, #228]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f0      	bne.n	8005110 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800512e:	4b36      	ldr	r3, [pc, #216]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 8005130:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005132:	4b37      	ldr	r3, [pc, #220]	@ (8005210 <HAL_RCC_OscConfig+0x774>)
 8005134:	4013      	ands	r3, r2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800513e:	0112      	lsls	r2, r2, #4
 8005140:	430a      	orrs	r2, r1
 8005142:	4931      	ldr	r1, [pc, #196]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 8005144:	4313      	orrs	r3, r2
 8005146:	628b      	str	r3, [r1, #40]	@ 0x28
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800514c:	3b01      	subs	r3, #1
 800514e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005156:	3b01      	subs	r3, #1
 8005158:	025b      	lsls	r3, r3, #9
 800515a:	b29b      	uxth	r3, r3
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005162:	3b01      	subs	r3, #1
 8005164:	041b      	lsls	r3, r3, #16
 8005166:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005170:	3b01      	subs	r3, #1
 8005172:	061b      	lsls	r3, r3, #24
 8005174:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005178:	4923      	ldr	r1, [pc, #140]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 800517a:	4313      	orrs	r3, r2
 800517c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800517e:	4b22      	ldr	r3, [pc, #136]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 8005180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005182:	4a21      	ldr	r2, [pc, #132]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 8005184:	f023 0301 	bic.w	r3, r3, #1
 8005188:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800518a:	4b1f      	ldr	r3, [pc, #124]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 800518c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800518e:	4b21      	ldr	r3, [pc, #132]	@ (8005214 <HAL_RCC_OscConfig+0x778>)
 8005190:	4013      	ands	r3, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005196:	00d2      	lsls	r2, r2, #3
 8005198:	491b      	ldr	r1, [pc, #108]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 800519a:	4313      	orrs	r3, r2
 800519c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800519e:	4b1a      	ldr	r3, [pc, #104]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 80051a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a2:	f023 020c 	bic.w	r2, r3, #12
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051aa:	4917      	ldr	r1, [pc, #92]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80051b0:	4b15      	ldr	r3, [pc, #84]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 80051b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b4:	f023 0202 	bic.w	r2, r3, #2
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051bc:	4912      	ldr	r1, [pc, #72]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051c2:	4b11      	ldr	r3, [pc, #68]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 80051c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c6:	4a10      	ldr	r2, [pc, #64]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 80051c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 80051d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 80051d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80051da:	4b0b      	ldr	r3, [pc, #44]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 80051dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051de:	4a0a      	ldr	r2, [pc, #40]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 80051e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80051e6:	4b08      	ldr	r3, [pc, #32]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 80051e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ea:	4a07      	ldr	r2, [pc, #28]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 80051ec:	f043 0301 	orr.w	r3, r3, #1
 80051f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051f2:	4b05      	ldr	r3, [pc, #20]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a04      	ldr	r2, [pc, #16]	@ (8005208 <HAL_RCC_OscConfig+0x76c>)
 80051f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fe:	f7fc ffd1 	bl	80021a4 <HAL_GetTick>
 8005202:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005204:	e011      	b.n	800522a <HAL_RCC_OscConfig+0x78e>
 8005206:	bf00      	nop
 8005208:	58024400 	.word	0x58024400
 800520c:	58024800 	.word	0x58024800
 8005210:	fffffc0c 	.word	0xfffffc0c
 8005214:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005218:	f7fc ffc4 	bl	80021a4 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e08a      	b.n	8005340 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800522a:	4b47      	ldr	r3, [pc, #284]	@ (8005348 <HAL_RCC_OscConfig+0x8ac>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0f0      	beq.n	8005218 <HAL_RCC_OscConfig+0x77c>
 8005236:	e082      	b.n	800533e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005238:	4b43      	ldr	r3, [pc, #268]	@ (8005348 <HAL_RCC_OscConfig+0x8ac>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a42      	ldr	r2, [pc, #264]	@ (8005348 <HAL_RCC_OscConfig+0x8ac>)
 800523e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005244:	f7fc ffae 	bl	80021a4 <HAL_GetTick>
 8005248:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800524c:	f7fc ffaa 	bl	80021a4 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e070      	b.n	8005340 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800525e:	4b3a      	ldr	r3, [pc, #232]	@ (8005348 <HAL_RCC_OscConfig+0x8ac>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f0      	bne.n	800524c <HAL_RCC_OscConfig+0x7b0>
 800526a:	e068      	b.n	800533e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800526c:	4b36      	ldr	r3, [pc, #216]	@ (8005348 <HAL_RCC_OscConfig+0x8ac>)
 800526e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005270:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005272:	4b35      	ldr	r3, [pc, #212]	@ (8005348 <HAL_RCC_OscConfig+0x8ac>)
 8005274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005276:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527c:	2b01      	cmp	r3, #1
 800527e:	d031      	beq.n	80052e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f003 0203 	and.w	r2, r3, #3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800528a:	429a      	cmp	r2, r3
 800528c:	d12a      	bne.n	80052e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	091b      	lsrs	r3, r3, #4
 8005292:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800529a:	429a      	cmp	r2, r3
 800529c:	d122      	bne.n	80052e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d11a      	bne.n	80052e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	0a5b      	lsrs	r3, r3, #9
 80052b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052bc:	429a      	cmp	r2, r3
 80052be:	d111      	bne.n	80052e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	0c1b      	lsrs	r3, r3, #16
 80052c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d108      	bne.n	80052e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	0e1b      	lsrs	r3, r3, #24
 80052d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d001      	beq.n	80052e8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e02b      	b.n	8005340 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80052e8:	4b17      	ldr	r3, [pc, #92]	@ (8005348 <HAL_RCC_OscConfig+0x8ac>)
 80052ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ec:	08db      	lsrs	r3, r3, #3
 80052ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052f2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d01f      	beq.n	800533e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80052fe:	4b12      	ldr	r3, [pc, #72]	@ (8005348 <HAL_RCC_OscConfig+0x8ac>)
 8005300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005302:	4a11      	ldr	r2, [pc, #68]	@ (8005348 <HAL_RCC_OscConfig+0x8ac>)
 8005304:	f023 0301 	bic.w	r3, r3, #1
 8005308:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800530a:	f7fc ff4b 	bl	80021a4 <HAL_GetTick>
 800530e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005310:	bf00      	nop
 8005312:	f7fc ff47 	bl	80021a4 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531a:	4293      	cmp	r3, r2
 800531c:	d0f9      	beq.n	8005312 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800531e:	4b0a      	ldr	r3, [pc, #40]	@ (8005348 <HAL_RCC_OscConfig+0x8ac>)
 8005320:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005322:	4b0a      	ldr	r3, [pc, #40]	@ (800534c <HAL_RCC_OscConfig+0x8b0>)
 8005324:	4013      	ands	r3, r2
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800532a:	00d2      	lsls	r2, r2, #3
 800532c:	4906      	ldr	r1, [pc, #24]	@ (8005348 <HAL_RCC_OscConfig+0x8ac>)
 800532e:	4313      	orrs	r3, r2
 8005330:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005332:	4b05      	ldr	r3, [pc, #20]	@ (8005348 <HAL_RCC_OscConfig+0x8ac>)
 8005334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005336:	4a04      	ldr	r2, [pc, #16]	@ (8005348 <HAL_RCC_OscConfig+0x8ac>)
 8005338:	f043 0301 	orr.w	r3, r3, #1
 800533c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3730      	adds	r7, #48	@ 0x30
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	58024400 	.word	0x58024400
 800534c:	ffff0007 	.word	0xffff0007

08005350 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e19c      	b.n	800569e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005364:	4b8a      	ldr	r3, [pc, #552]	@ (8005590 <HAL_RCC_ClockConfig+0x240>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 030f 	and.w	r3, r3, #15
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d910      	bls.n	8005394 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005372:	4b87      	ldr	r3, [pc, #540]	@ (8005590 <HAL_RCC_ClockConfig+0x240>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f023 020f 	bic.w	r2, r3, #15
 800537a:	4985      	ldr	r1, [pc, #532]	@ (8005590 <HAL_RCC_ClockConfig+0x240>)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	4313      	orrs	r3, r2
 8005380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005382:	4b83      	ldr	r3, [pc, #524]	@ (8005590 <HAL_RCC_ClockConfig+0x240>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d001      	beq.n	8005394 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e184      	b.n	800569e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d010      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	4b7b      	ldr	r3, [pc, #492]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d908      	bls.n	80053c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053b0:	4b78      	ldr	r3, [pc, #480]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	4975      	ldr	r1, [pc, #468]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0308 	and.w	r3, r3, #8
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d010      	beq.n	80053f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	695a      	ldr	r2, [r3, #20]
 80053d2:	4b70      	ldr	r3, [pc, #448]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053da:	429a      	cmp	r2, r3
 80053dc:	d908      	bls.n	80053f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053de:	4b6d      	ldr	r3, [pc, #436]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	496a      	ldr	r1, [pc, #424]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0310 	and.w	r3, r3, #16
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d010      	beq.n	800541e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699a      	ldr	r2, [r3, #24]
 8005400:	4b64      	ldr	r3, [pc, #400]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005408:	429a      	cmp	r2, r3
 800540a:	d908      	bls.n	800541e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800540c:	4b61      	ldr	r3, [pc, #388]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	495e      	ldr	r1, [pc, #376]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 800541a:	4313      	orrs	r3, r2
 800541c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b00      	cmp	r3, #0
 8005428:	d010      	beq.n	800544c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	69da      	ldr	r2, [r3, #28]
 800542e:	4b59      	ldr	r3, [pc, #356]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005436:	429a      	cmp	r2, r3
 8005438:	d908      	bls.n	800544c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800543a:	4b56      	ldr	r3, [pc, #344]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	4953      	ldr	r1, [pc, #332]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 8005448:	4313      	orrs	r3, r2
 800544a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d010      	beq.n	800547a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	4b4d      	ldr	r3, [pc, #308]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	429a      	cmp	r2, r3
 8005466:	d908      	bls.n	800547a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005468:	4b4a      	ldr	r3, [pc, #296]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	f023 020f 	bic.w	r2, r3, #15
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	4947      	ldr	r1, [pc, #284]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 8005476:	4313      	orrs	r3, r2
 8005478:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d055      	beq.n	8005532 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005486:	4b43      	ldr	r3, [pc, #268]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	4940      	ldr	r1, [pc, #256]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 8005494:	4313      	orrs	r3, r2
 8005496:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2b02      	cmp	r3, #2
 800549e:	d107      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054a0:	4b3c      	ldr	r3, [pc, #240]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d121      	bne.n	80054f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0f6      	b.n	800569e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	2b03      	cmp	r3, #3
 80054b6:	d107      	bne.n	80054c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054b8:	4b36      	ldr	r3, [pc, #216]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d115      	bne.n	80054f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e0ea      	b.n	800569e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d107      	bne.n	80054e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054d0:	4b30      	ldr	r3, [pc, #192]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d109      	bne.n	80054f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e0de      	b.n	800569e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054e0:	4b2c      	ldr	r3, [pc, #176]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e0d6      	b.n	800569e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054f0:	4b28      	ldr	r3, [pc, #160]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	f023 0207 	bic.w	r2, r3, #7
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	4925      	ldr	r1, [pc, #148]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005502:	f7fc fe4f 	bl	80021a4 <HAL_GetTick>
 8005506:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005508:	e00a      	b.n	8005520 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800550a:	f7fc fe4b 	bl	80021a4 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005518:	4293      	cmp	r3, r2
 800551a:	d901      	bls.n	8005520 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e0be      	b.n	800569e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005520:	4b1c      	ldr	r3, [pc, #112]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	429a      	cmp	r2, r3
 8005530:	d1eb      	bne.n	800550a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d010      	beq.n	8005560 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	4b14      	ldr	r3, [pc, #80]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	429a      	cmp	r2, r3
 800554c:	d208      	bcs.n	8005560 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800554e:	4b11      	ldr	r3, [pc, #68]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	f023 020f 	bic.w	r2, r3, #15
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	490e      	ldr	r1, [pc, #56]	@ (8005594 <HAL_RCC_ClockConfig+0x244>)
 800555c:	4313      	orrs	r3, r2
 800555e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005560:	4b0b      	ldr	r3, [pc, #44]	@ (8005590 <HAL_RCC_ClockConfig+0x240>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	429a      	cmp	r2, r3
 800556c:	d214      	bcs.n	8005598 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800556e:	4b08      	ldr	r3, [pc, #32]	@ (8005590 <HAL_RCC_ClockConfig+0x240>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f023 020f 	bic.w	r2, r3, #15
 8005576:	4906      	ldr	r1, [pc, #24]	@ (8005590 <HAL_RCC_ClockConfig+0x240>)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	4313      	orrs	r3, r2
 800557c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800557e:	4b04      	ldr	r3, [pc, #16]	@ (8005590 <HAL_RCC_ClockConfig+0x240>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	429a      	cmp	r2, r3
 800558a:	d005      	beq.n	8005598 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e086      	b.n	800569e <HAL_RCC_ClockConfig+0x34e>
 8005590:	52002000 	.word	0x52002000
 8005594:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d010      	beq.n	80055c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	4b3f      	ldr	r3, [pc, #252]	@ (80056a8 <HAL_RCC_ClockConfig+0x358>)
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d208      	bcs.n	80055c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055b4:	4b3c      	ldr	r3, [pc, #240]	@ (80056a8 <HAL_RCC_ClockConfig+0x358>)
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	4939      	ldr	r1, [pc, #228]	@ (80056a8 <HAL_RCC_ClockConfig+0x358>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0308 	and.w	r3, r3, #8
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d010      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	695a      	ldr	r2, [r3, #20]
 80055d6:	4b34      	ldr	r3, [pc, #208]	@ (80056a8 <HAL_RCC_ClockConfig+0x358>)
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055de:	429a      	cmp	r2, r3
 80055e0:	d208      	bcs.n	80055f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055e2:	4b31      	ldr	r3, [pc, #196]	@ (80056a8 <HAL_RCC_ClockConfig+0x358>)
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	492e      	ldr	r1, [pc, #184]	@ (80056a8 <HAL_RCC_ClockConfig+0x358>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0310 	and.w	r3, r3, #16
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d010      	beq.n	8005622 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699a      	ldr	r2, [r3, #24]
 8005604:	4b28      	ldr	r3, [pc, #160]	@ (80056a8 <HAL_RCC_ClockConfig+0x358>)
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800560c:	429a      	cmp	r2, r3
 800560e:	d208      	bcs.n	8005622 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005610:	4b25      	ldr	r3, [pc, #148]	@ (80056a8 <HAL_RCC_ClockConfig+0x358>)
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	4922      	ldr	r1, [pc, #136]	@ (80056a8 <HAL_RCC_ClockConfig+0x358>)
 800561e:	4313      	orrs	r3, r2
 8005620:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0320 	and.w	r3, r3, #32
 800562a:	2b00      	cmp	r3, #0
 800562c:	d010      	beq.n	8005650 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69da      	ldr	r2, [r3, #28]
 8005632:	4b1d      	ldr	r3, [pc, #116]	@ (80056a8 <HAL_RCC_ClockConfig+0x358>)
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800563a:	429a      	cmp	r2, r3
 800563c:	d208      	bcs.n	8005650 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800563e:	4b1a      	ldr	r3, [pc, #104]	@ (80056a8 <HAL_RCC_ClockConfig+0x358>)
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	4917      	ldr	r1, [pc, #92]	@ (80056a8 <HAL_RCC_ClockConfig+0x358>)
 800564c:	4313      	orrs	r3, r2
 800564e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005650:	f000 f834 	bl	80056bc <HAL_RCC_GetSysClockFreq>
 8005654:	4602      	mov	r2, r0
 8005656:	4b14      	ldr	r3, [pc, #80]	@ (80056a8 <HAL_RCC_ClockConfig+0x358>)
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	0a1b      	lsrs	r3, r3, #8
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	4912      	ldr	r1, [pc, #72]	@ (80056ac <HAL_RCC_ClockConfig+0x35c>)
 8005662:	5ccb      	ldrb	r3, [r1, r3]
 8005664:	f003 031f 	and.w	r3, r3, #31
 8005668:	fa22 f303 	lsr.w	r3, r2, r3
 800566c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800566e:	4b0e      	ldr	r3, [pc, #56]	@ (80056a8 <HAL_RCC_ClockConfig+0x358>)
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	4a0d      	ldr	r2, [pc, #52]	@ (80056ac <HAL_RCC_ClockConfig+0x35c>)
 8005678:	5cd3      	ldrb	r3, [r2, r3]
 800567a:	f003 031f 	and.w	r3, r3, #31
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	fa22 f303 	lsr.w	r3, r2, r3
 8005684:	4a0a      	ldr	r2, [pc, #40]	@ (80056b0 <HAL_RCC_ClockConfig+0x360>)
 8005686:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005688:	4a0a      	ldr	r2, [pc, #40]	@ (80056b4 <HAL_RCC_ClockConfig+0x364>)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800568e:	4b0a      	ldr	r3, [pc, #40]	@ (80056b8 <HAL_RCC_ClockConfig+0x368>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f7fc fd3c 	bl	8002110 <HAL_InitTick>
 8005698:	4603      	mov	r3, r0
 800569a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800569c:	7bfb      	ldrb	r3, [r7, #15]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	58024400 	.word	0x58024400
 80056ac:	080063ac 	.word	0x080063ac
 80056b0:	24000004 	.word	0x24000004
 80056b4:	24000000 	.word	0x24000000
 80056b8:	24000008 	.word	0x24000008

080056bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056bc:	b480      	push	{r7}
 80056be:	b089      	sub	sp, #36	@ 0x24
 80056c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056c2:	4bb3      	ldr	r3, [pc, #716]	@ (8005990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056ca:	2b18      	cmp	r3, #24
 80056cc:	f200 8155 	bhi.w	800597a <HAL_RCC_GetSysClockFreq+0x2be>
 80056d0:	a201      	add	r2, pc, #4	@ (adr r2, 80056d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80056d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d6:	bf00      	nop
 80056d8:	0800573d 	.word	0x0800573d
 80056dc:	0800597b 	.word	0x0800597b
 80056e0:	0800597b 	.word	0x0800597b
 80056e4:	0800597b 	.word	0x0800597b
 80056e8:	0800597b 	.word	0x0800597b
 80056ec:	0800597b 	.word	0x0800597b
 80056f0:	0800597b 	.word	0x0800597b
 80056f4:	0800597b 	.word	0x0800597b
 80056f8:	08005763 	.word	0x08005763
 80056fc:	0800597b 	.word	0x0800597b
 8005700:	0800597b 	.word	0x0800597b
 8005704:	0800597b 	.word	0x0800597b
 8005708:	0800597b 	.word	0x0800597b
 800570c:	0800597b 	.word	0x0800597b
 8005710:	0800597b 	.word	0x0800597b
 8005714:	0800597b 	.word	0x0800597b
 8005718:	08005769 	.word	0x08005769
 800571c:	0800597b 	.word	0x0800597b
 8005720:	0800597b 	.word	0x0800597b
 8005724:	0800597b 	.word	0x0800597b
 8005728:	0800597b 	.word	0x0800597b
 800572c:	0800597b 	.word	0x0800597b
 8005730:	0800597b 	.word	0x0800597b
 8005734:	0800597b 	.word	0x0800597b
 8005738:	0800576f 	.word	0x0800576f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800573c:	4b94      	ldr	r3, [pc, #592]	@ (8005990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0320 	and.w	r3, r3, #32
 8005744:	2b00      	cmp	r3, #0
 8005746:	d009      	beq.n	800575c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005748:	4b91      	ldr	r3, [pc, #580]	@ (8005990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	08db      	lsrs	r3, r3, #3
 800574e:	f003 0303 	and.w	r3, r3, #3
 8005752:	4a90      	ldr	r2, [pc, #576]	@ (8005994 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005754:	fa22 f303 	lsr.w	r3, r2, r3
 8005758:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800575a:	e111      	b.n	8005980 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800575c:	4b8d      	ldr	r3, [pc, #564]	@ (8005994 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800575e:	61bb      	str	r3, [r7, #24]
      break;
 8005760:	e10e      	b.n	8005980 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005762:	4b8d      	ldr	r3, [pc, #564]	@ (8005998 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005764:	61bb      	str	r3, [r7, #24]
      break;
 8005766:	e10b      	b.n	8005980 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005768:	4b8c      	ldr	r3, [pc, #560]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800576a:	61bb      	str	r3, [r7, #24]
      break;
 800576c:	e108      	b.n	8005980 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800576e:	4b88      	ldr	r3, [pc, #544]	@ (8005990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005778:	4b85      	ldr	r3, [pc, #532]	@ (8005990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800577a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577c:	091b      	lsrs	r3, r3, #4
 800577e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005782:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005784:	4b82      	ldr	r3, [pc, #520]	@ (8005990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800578e:	4b80      	ldr	r3, [pc, #512]	@ (8005990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005792:	08db      	lsrs	r3, r3, #3
 8005794:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	fb02 f303 	mul.w	r3, r2, r3
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 80e1 	beq.w	8005974 <HAL_RCC_GetSysClockFreq+0x2b8>
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	f000 8083 	beq.w	80058c0 <HAL_RCC_GetSysClockFreq+0x204>
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	f200 80a1 	bhi.w	8005904 <HAL_RCC_GetSysClockFreq+0x248>
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <HAL_RCC_GetSysClockFreq+0x114>
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d056      	beq.n	800587c <HAL_RCC_GetSysClockFreq+0x1c0>
 80057ce:	e099      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057d0:	4b6f      	ldr	r3, [pc, #444]	@ (8005990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d02d      	beq.n	8005838 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057dc:	4b6c      	ldr	r3, [pc, #432]	@ (8005990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	08db      	lsrs	r3, r3, #3
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	4a6b      	ldr	r2, [pc, #428]	@ (8005994 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057e8:	fa22 f303 	lsr.w	r3, r2, r3
 80057ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	ee07 3a90 	vmov	s15, r3
 80057f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	ee07 3a90 	vmov	s15, r3
 80057fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005806:	4b62      	ldr	r3, [pc, #392]	@ (8005990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005816:	ed97 6a02 	vldr	s12, [r7, #8]
 800581a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80059a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800581e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800582a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800582e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005832:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005836:	e087      	b.n	8005948 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005842:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80059a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800584a:	4b51      	ldr	r3, [pc, #324]	@ (8005990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800584c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585a:	ed97 6a02 	vldr	s12, [r7, #8]
 800585e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80059a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800586a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800586e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005876:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800587a:	e065      	b.n	8005948 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005886:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80059a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800588a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588e:	4b40      	ldr	r3, [pc, #256]	@ (8005990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005896:	ee07 3a90 	vmov	s15, r3
 800589a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800589e:	ed97 6a02 	vldr	s12, [r7, #8]
 80058a2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80059a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058be:	e043      	b.n	8005948 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80059ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80058ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058d2:	4b2f      	ldr	r3, [pc, #188]	@ (8005990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80058e6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80059a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005902:	e021      	b.n	8005948 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80059a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005916:	4b1e      	ldr	r3, [pc, #120]	@ (8005990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800591a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005926:	ed97 6a02 	vldr	s12, [r7, #8]
 800592a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80059a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800592e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005936:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800593a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800593e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005942:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005946:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005948:	4b11      	ldr	r3, [pc, #68]	@ (8005990 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800594a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594c:	0a5b      	lsrs	r3, r3, #9
 800594e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005952:	3301      	adds	r3, #1
 8005954:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	ee07 3a90 	vmov	s15, r3
 800595c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005960:	edd7 6a07 	vldr	s13, [r7, #28]
 8005964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800596c:	ee17 3a90 	vmov	r3, s15
 8005970:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005972:	e005      	b.n	8005980 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	61bb      	str	r3, [r7, #24]
      break;
 8005978:	e002      	b.n	8005980 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800597a:	4b07      	ldr	r3, [pc, #28]	@ (8005998 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800597c:	61bb      	str	r3, [r7, #24]
      break;
 800597e:	bf00      	nop
  }

  return sysclockfreq;
 8005980:	69bb      	ldr	r3, [r7, #24]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3724      	adds	r7, #36	@ 0x24
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	58024400 	.word	0x58024400
 8005994:	03d09000 	.word	0x03d09000
 8005998:	003d0900 	.word	0x003d0900
 800599c:	017d7840 	.word	0x017d7840
 80059a0:	46000000 	.word	0x46000000
 80059a4:	4c742400 	.word	0x4c742400
 80059a8:	4a742400 	.word	0x4a742400
 80059ac:	4bbebc20 	.word	0x4bbebc20

080059b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80059b6:	f7ff fe81 	bl	80056bc <HAL_RCC_GetSysClockFreq>
 80059ba:	4602      	mov	r2, r0
 80059bc:	4b10      	ldr	r3, [pc, #64]	@ (8005a00 <HAL_RCC_GetHCLKFreq+0x50>)
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	0a1b      	lsrs	r3, r3, #8
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	490f      	ldr	r1, [pc, #60]	@ (8005a04 <HAL_RCC_GetHCLKFreq+0x54>)
 80059c8:	5ccb      	ldrb	r3, [r1, r3]
 80059ca:	f003 031f 	and.w	r3, r3, #31
 80059ce:	fa22 f303 	lsr.w	r3, r2, r3
 80059d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005a00 <HAL_RCC_GetHCLKFreq+0x50>)
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	f003 030f 	and.w	r3, r3, #15
 80059dc:	4a09      	ldr	r2, [pc, #36]	@ (8005a04 <HAL_RCC_GetHCLKFreq+0x54>)
 80059de:	5cd3      	ldrb	r3, [r2, r3]
 80059e0:	f003 031f 	and.w	r3, r3, #31
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	fa22 f303 	lsr.w	r3, r2, r3
 80059ea:	4a07      	ldr	r2, [pc, #28]	@ (8005a08 <HAL_RCC_GetHCLKFreq+0x58>)
 80059ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059ee:	4a07      	ldr	r2, [pc, #28]	@ (8005a0c <HAL_RCC_GetHCLKFreq+0x5c>)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80059f4:	4b04      	ldr	r3, [pc, #16]	@ (8005a08 <HAL_RCC_GetHCLKFreq+0x58>)
 80059f6:	681b      	ldr	r3, [r3, #0]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	58024400 	.word	0x58024400
 8005a04:	080063ac 	.word	0x080063ac
 8005a08:	24000004 	.word	0x24000004
 8005a0c:	24000000 	.word	0x24000000

08005a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005a14:	f7ff ffcc 	bl	80059b0 <HAL_RCC_GetHCLKFreq>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	4b06      	ldr	r3, [pc, #24]	@ (8005a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	091b      	lsrs	r3, r3, #4
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	4904      	ldr	r1, [pc, #16]	@ (8005a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a26:	5ccb      	ldrb	r3, [r1, r3]
 8005a28:	f003 031f 	and.w	r3, r3, #31
 8005a2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	58024400 	.word	0x58024400
 8005a38:	080063ac 	.word	0x080063ac

08005a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005a40:	f7ff ffb6 	bl	80059b0 <HAL_RCC_GetHCLKFreq>
 8005a44:	4602      	mov	r2, r0
 8005a46:	4b06      	ldr	r3, [pc, #24]	@ (8005a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	0a1b      	lsrs	r3, r3, #8
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	4904      	ldr	r1, [pc, #16]	@ (8005a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a52:	5ccb      	ldrb	r3, [r1, r3]
 8005a54:	f003 031f 	and.w	r3, r3, #31
 8005a58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	58024400 	.word	0x58024400
 8005a64:	080063ac 	.word	0x080063ac

08005a68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005a6c:	f7ff ffa0 	bl	80059b0 <HAL_RCC_GetHCLKFreq>
 8005a70:	4602      	mov	r2, r0
 8005a72:	4b06      	ldr	r3, [pc, #24]	@ (8005a8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	091b      	lsrs	r3, r3, #4
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	4904      	ldr	r1, [pc, #16]	@ (8005a90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005a7e:	5ccb      	ldrb	r3, [r1, r3]
 8005a80:	f003 031f 	and.w	r3, r3, #31
 8005a84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	58024400 	.word	0x58024400
 8005a90:	080063ac 	.word	0x080063ac

08005a94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b089      	sub	sp, #36	@ 0x24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a9c:	4ba1      	ldr	r3, [pc, #644]	@ (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa0:	f003 0303 	and.w	r3, r3, #3
 8005aa4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005aa6:	4b9f      	ldr	r3, [pc, #636]	@ (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aaa:	0b1b      	lsrs	r3, r3, #12
 8005aac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ab0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ab2:	4b9c      	ldr	r3, [pc, #624]	@ (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab6:	091b      	lsrs	r3, r3, #4
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005abe:	4b99      	ldr	r3, [pc, #612]	@ (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac2:	08db      	lsrs	r3, r3, #3
 8005ac4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	fb02 f303 	mul.w	r3, r2, r3
 8005ace:	ee07 3a90 	vmov	s15, r3
 8005ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ad6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 8111 	beq.w	8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	f000 8083 	beq.w	8005bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	f200 80a1 	bhi.w	8005c34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d056      	beq.n	8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005afe:	e099      	b.n	8005c34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b00:	4b88      	ldr	r3, [pc, #544]	@ (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0320 	and.w	r3, r3, #32
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d02d      	beq.n	8005b68 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b0c:	4b85      	ldr	r3, [pc, #532]	@ (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	08db      	lsrs	r3, r3, #3
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	4a84      	ldr	r2, [pc, #528]	@ (8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005b18:	fa22 f303 	lsr.w	r3, r2, r3
 8005b1c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	ee07 3a90 	vmov	s15, r3
 8005b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	ee07 3a90 	vmov	s15, r3
 8005b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b36:	4b7b      	ldr	r3, [pc, #492]	@ (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b3e:	ee07 3a90 	vmov	s15, r3
 8005b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005b66:	e087      	b.n	8005c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005d30 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b7a:	4b6a      	ldr	r3, [pc, #424]	@ (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b82:	ee07 3a90 	vmov	s15, r3
 8005b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005baa:	e065      	b.n	8005c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	ee07 3a90 	vmov	s15, r3
 8005bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005d34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bbe:	4b59      	ldr	r3, [pc, #356]	@ (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bc6:	ee07 3a90 	vmov	s15, r3
 8005bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bd2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bee:	e043      	b.n	8005c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	ee07 3a90 	vmov	s15, r3
 8005bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005d38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c02:	4b48      	ldr	r3, [pc, #288]	@ (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0a:	ee07 3a90 	vmov	s15, r3
 8005c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c16:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c32:	e021      	b.n	8005c78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005d34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c46:	4b37      	ldr	r3, [pc, #220]	@ (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c4e:	ee07 3a90 	vmov	s15, r3
 8005c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c5a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005d2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c76:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005c78:	4b2a      	ldr	r3, [pc, #168]	@ (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7c:	0a5b      	lsrs	r3, r3, #9
 8005c7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c92:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c9e:	ee17 2a90 	vmov	r2, s15
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005caa:	0c1b      	lsrs	r3, r3, #16
 8005cac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cb0:	ee07 3a90 	vmov	s15, r3
 8005cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ccc:	ee17 2a90 	vmov	r2, s15
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005cd4:	4b13      	ldr	r3, [pc, #76]	@ (8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd8:	0e1b      	lsrs	r3, r3, #24
 8005cda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cee:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cfa:	ee17 2a90 	vmov	r2, s15
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d02:	e008      	b.n	8005d16 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	609a      	str	r2, [r3, #8]
}
 8005d16:	bf00      	nop
 8005d18:	3724      	adds	r7, #36	@ 0x24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	58024400 	.word	0x58024400
 8005d28:	03d09000 	.word	0x03d09000
 8005d2c:	46000000 	.word	0x46000000
 8005d30:	4c742400 	.word	0x4c742400
 8005d34:	4a742400 	.word	0x4a742400
 8005d38:	4bbebc20 	.word	0x4bbebc20

08005d3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b089      	sub	sp, #36	@ 0x24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d44:	4ba1      	ldr	r3, [pc, #644]	@ (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d48:	f003 0303 	and.w	r3, r3, #3
 8005d4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005d4e:	4b9f      	ldr	r3, [pc, #636]	@ (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d52:	0d1b      	lsrs	r3, r3, #20
 8005d54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005d5a:	4b9c      	ldr	r3, [pc, #624]	@ (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5e:	0a1b      	lsrs	r3, r3, #8
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005d66:	4b99      	ldr	r3, [pc, #612]	@ (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d6a:	08db      	lsrs	r3, r3, #3
 8005d6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	fb02 f303 	mul.w	r3, r2, r3
 8005d76:	ee07 3a90 	vmov	s15, r3
 8005d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 8111 	beq.w	8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	f000 8083 	beq.w	8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	f200 80a1 	bhi.w	8005edc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d003      	beq.n	8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d056      	beq.n	8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005da6:	e099      	b.n	8005edc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005da8:	4b88      	ldr	r3, [pc, #544]	@ (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0320 	and.w	r3, r3, #32
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d02d      	beq.n	8005e10 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005db4:	4b85      	ldr	r3, [pc, #532]	@ (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	08db      	lsrs	r3, r3, #3
 8005dba:	f003 0303 	and.w	r3, r3, #3
 8005dbe:	4a84      	ldr	r2, [pc, #528]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	ee07 3a90 	vmov	s15, r3
 8005dcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dde:	4b7b      	ldr	r3, [pc, #492]	@ (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8005df2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e0e:	e087      	b.n	8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e22:	4b6a      	ldr	r3, [pc, #424]	@ (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e36:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e52:	e065      	b.n	8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e66:	4b59      	ldr	r3, [pc, #356]	@ (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e7a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e96:	e043      	b.n	8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eaa:	4b48      	ldr	r3, [pc, #288]	@ (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb2:	ee07 3a90 	vmov	s15, r3
 8005eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ebe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eda:	e021      	b.n	8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eee:	4b37      	ldr	r3, [pc, #220]	@ (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f02:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f1e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005f20:	4b2a      	ldr	r3, [pc, #168]	@ (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f24:	0a5b      	lsrs	r3, r3, #9
 8005f26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f46:	ee17 2a90 	vmov	r2, s15
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f52:	0c1b      	lsrs	r3, r3, #16
 8005f54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f58:	ee07 3a90 	vmov	s15, r3
 8005f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f68:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f74:	ee17 2a90 	vmov	r2, s15
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005f7c:	4b13      	ldr	r3, [pc, #76]	@ (8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f80:	0e1b      	lsrs	r3, r3, #24
 8005f82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f96:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fa2:	ee17 2a90 	vmov	r2, s15
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005faa:	e008      	b.n	8005fbe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	609a      	str	r2, [r3, #8]
}
 8005fbe:	bf00      	nop
 8005fc0:	3724      	adds	r7, #36	@ 0x24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	58024400 	.word	0x58024400
 8005fd0:	03d09000 	.word	0x03d09000
 8005fd4:	46000000 	.word	0x46000000
 8005fd8:	4c742400 	.word	0x4c742400
 8005fdc:	4a742400 	.word	0x4a742400
 8005fe0:	4bbebc20 	.word	0x4bbebc20

08005fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e049      	b.n	800608a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d106      	bne.n	8006010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f841 	bl	8006092 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	3304      	adds	r3, #4
 8006020:	4619      	mov	r1, r3
 8006022:	4610      	mov	r0, r2
 8006024:	f000 f8d8 	bl	80061d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
	...

080060a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d001      	beq.n	80060c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e04c      	b.n	800615a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a26      	ldr	r2, [pc, #152]	@ (8006168 <HAL_TIM_Base_Start+0xc0>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d022      	beq.n	8006118 <HAL_TIM_Base_Start+0x70>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060da:	d01d      	beq.n	8006118 <HAL_TIM_Base_Start+0x70>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a22      	ldr	r2, [pc, #136]	@ (800616c <HAL_TIM_Base_Start+0xc4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d018      	beq.n	8006118 <HAL_TIM_Base_Start+0x70>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a21      	ldr	r2, [pc, #132]	@ (8006170 <HAL_TIM_Base_Start+0xc8>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d013      	beq.n	8006118 <HAL_TIM_Base_Start+0x70>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006174 <HAL_TIM_Base_Start+0xcc>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00e      	beq.n	8006118 <HAL_TIM_Base_Start+0x70>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006178 <HAL_TIM_Base_Start+0xd0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d009      	beq.n	8006118 <HAL_TIM_Base_Start+0x70>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a1c      	ldr	r2, [pc, #112]	@ (800617c <HAL_TIM_Base_Start+0xd4>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d004      	beq.n	8006118 <HAL_TIM_Base_Start+0x70>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a1b      	ldr	r2, [pc, #108]	@ (8006180 <HAL_TIM_Base_Start+0xd8>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d115      	bne.n	8006144 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689a      	ldr	r2, [r3, #8]
 800611e:	4b19      	ldr	r3, [pc, #100]	@ (8006184 <HAL_TIM_Base_Start+0xdc>)
 8006120:	4013      	ands	r3, r2
 8006122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2b06      	cmp	r3, #6
 8006128:	d015      	beq.n	8006156 <HAL_TIM_Base_Start+0xae>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006130:	d011      	beq.n	8006156 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f042 0201 	orr.w	r2, r2, #1
 8006140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006142:	e008      	b.n	8006156 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0201 	orr.w	r2, r2, #1
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	e000      	b.n	8006158 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006156:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	40010000 	.word	0x40010000
 800616c:	40000400 	.word	0x40000400
 8006170:	40000800 	.word	0x40000800
 8006174:	40000c00 	.word	0x40000c00
 8006178:	40010400 	.word	0x40010400
 800617c:	40001800 	.word	0x40001800
 8006180:	40014000 	.word	0x40014000
 8006184:	00010007 	.word	0x00010007

08006188 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6a1a      	ldr	r2, [r3, #32]
 8006196:	f241 1311 	movw	r3, #4369	@ 0x1111
 800619a:	4013      	ands	r3, r2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10f      	bne.n	80061c0 <HAL_TIM_Base_Stop+0x38>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6a1a      	ldr	r2, [r3, #32]
 80061a6:	f240 4344 	movw	r3, #1092	@ 0x444
 80061aa:	4013      	ands	r3, r2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d107      	bne.n	80061c0 <HAL_TIM_Base_Stop+0x38>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 0201 	bic.w	r2, r2, #1
 80061be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
	...

080061d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a46      	ldr	r2, [pc, #280]	@ (8006304 <TIM_Base_SetConfig+0x12c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d013      	beq.n	8006218 <TIM_Base_SetConfig+0x40>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f6:	d00f      	beq.n	8006218 <TIM_Base_SetConfig+0x40>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a43      	ldr	r2, [pc, #268]	@ (8006308 <TIM_Base_SetConfig+0x130>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d00b      	beq.n	8006218 <TIM_Base_SetConfig+0x40>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a42      	ldr	r2, [pc, #264]	@ (800630c <TIM_Base_SetConfig+0x134>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d007      	beq.n	8006218 <TIM_Base_SetConfig+0x40>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a41      	ldr	r2, [pc, #260]	@ (8006310 <TIM_Base_SetConfig+0x138>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d003      	beq.n	8006218 <TIM_Base_SetConfig+0x40>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a40      	ldr	r2, [pc, #256]	@ (8006314 <TIM_Base_SetConfig+0x13c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d108      	bne.n	800622a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800621e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a35      	ldr	r2, [pc, #212]	@ (8006304 <TIM_Base_SetConfig+0x12c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d01f      	beq.n	8006272 <TIM_Base_SetConfig+0x9a>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006238:	d01b      	beq.n	8006272 <TIM_Base_SetConfig+0x9a>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a32      	ldr	r2, [pc, #200]	@ (8006308 <TIM_Base_SetConfig+0x130>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d017      	beq.n	8006272 <TIM_Base_SetConfig+0x9a>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a31      	ldr	r2, [pc, #196]	@ (800630c <TIM_Base_SetConfig+0x134>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d013      	beq.n	8006272 <TIM_Base_SetConfig+0x9a>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a30      	ldr	r2, [pc, #192]	@ (8006310 <TIM_Base_SetConfig+0x138>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00f      	beq.n	8006272 <TIM_Base_SetConfig+0x9a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a2f      	ldr	r2, [pc, #188]	@ (8006314 <TIM_Base_SetConfig+0x13c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d00b      	beq.n	8006272 <TIM_Base_SetConfig+0x9a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a2e      	ldr	r2, [pc, #184]	@ (8006318 <TIM_Base_SetConfig+0x140>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d007      	beq.n	8006272 <TIM_Base_SetConfig+0x9a>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a2d      	ldr	r2, [pc, #180]	@ (800631c <TIM_Base_SetConfig+0x144>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d003      	beq.n	8006272 <TIM_Base_SetConfig+0x9a>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a2c      	ldr	r2, [pc, #176]	@ (8006320 <TIM_Base_SetConfig+0x148>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d108      	bne.n	8006284 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	4313      	orrs	r3, r2
 8006282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	4313      	orrs	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a16      	ldr	r2, [pc, #88]	@ (8006304 <TIM_Base_SetConfig+0x12c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00f      	beq.n	80062d0 <TIM_Base_SetConfig+0xf8>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a18      	ldr	r2, [pc, #96]	@ (8006314 <TIM_Base_SetConfig+0x13c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d00b      	beq.n	80062d0 <TIM_Base_SetConfig+0xf8>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a17      	ldr	r2, [pc, #92]	@ (8006318 <TIM_Base_SetConfig+0x140>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d007      	beq.n	80062d0 <TIM_Base_SetConfig+0xf8>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a16      	ldr	r2, [pc, #88]	@ (800631c <TIM_Base_SetConfig+0x144>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d003      	beq.n	80062d0 <TIM_Base_SetConfig+0xf8>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a15      	ldr	r2, [pc, #84]	@ (8006320 <TIM_Base_SetConfig+0x148>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d103      	bne.n	80062d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	691a      	ldr	r2, [r3, #16]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d105      	bne.n	80062f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	f023 0201 	bic.w	r2, r3, #1
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	611a      	str	r2, [r3, #16]
  }
}
 80062f6:	bf00      	nop
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	40010000 	.word	0x40010000
 8006308:	40000400 	.word	0x40000400
 800630c:	40000800 	.word	0x40000800
 8006310:	40000c00 	.word	0x40000c00
 8006314:	40010400 	.word	0x40010400
 8006318:	40014000 	.word	0x40014000
 800631c:	40014400 	.word	0x40014400
 8006320:	40014800 	.word	0x40014800

08006324 <memset>:
 8006324:	4402      	add	r2, r0
 8006326:	4603      	mov	r3, r0
 8006328:	4293      	cmp	r3, r2
 800632a:	d100      	bne.n	800632e <memset+0xa>
 800632c:	4770      	bx	lr
 800632e:	f803 1b01 	strb.w	r1, [r3], #1
 8006332:	e7f9      	b.n	8006328 <memset+0x4>

08006334 <__libc_init_array>:
 8006334:	b570      	push	{r4, r5, r6, lr}
 8006336:	4d0d      	ldr	r5, [pc, #52]	@ (800636c <__libc_init_array+0x38>)
 8006338:	4c0d      	ldr	r4, [pc, #52]	@ (8006370 <__libc_init_array+0x3c>)
 800633a:	1b64      	subs	r4, r4, r5
 800633c:	10a4      	asrs	r4, r4, #2
 800633e:	2600      	movs	r6, #0
 8006340:	42a6      	cmp	r6, r4
 8006342:	d109      	bne.n	8006358 <__libc_init_array+0x24>
 8006344:	4d0b      	ldr	r5, [pc, #44]	@ (8006374 <__libc_init_array+0x40>)
 8006346:	4c0c      	ldr	r4, [pc, #48]	@ (8006378 <__libc_init_array+0x44>)
 8006348:	f000 f818 	bl	800637c <_init>
 800634c:	1b64      	subs	r4, r4, r5
 800634e:	10a4      	asrs	r4, r4, #2
 8006350:	2600      	movs	r6, #0
 8006352:	42a6      	cmp	r6, r4
 8006354:	d105      	bne.n	8006362 <__libc_init_array+0x2e>
 8006356:	bd70      	pop	{r4, r5, r6, pc}
 8006358:	f855 3b04 	ldr.w	r3, [r5], #4
 800635c:	4798      	blx	r3
 800635e:	3601      	adds	r6, #1
 8006360:	e7ee      	b.n	8006340 <__libc_init_array+0xc>
 8006362:	f855 3b04 	ldr.w	r3, [r5], #4
 8006366:	4798      	blx	r3
 8006368:	3601      	adds	r6, #1
 800636a:	e7f2      	b.n	8006352 <__libc_init_array+0x1e>
 800636c:	080063cc 	.word	0x080063cc
 8006370:	080063cc 	.word	0x080063cc
 8006374:	080063cc 	.word	0x080063cc
 8006378:	080063d0 	.word	0x080063d0

0800637c <_init>:
 800637c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637e:	bf00      	nop
 8006380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006382:	bc08      	pop	{r3}
 8006384:	469e      	mov	lr, r3
 8006386:	4770      	bx	lr

08006388 <_fini>:
 8006388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638a:	bf00      	nop
 800638c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800638e:	bc08      	pop	{r3}
 8006390:	469e      	mov	lr, r3
 8006392:	4770      	bx	lr
