
lab_9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003af4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08003d94  08003d94  00004d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003e84  08003e84  00004e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003e8c  08003e8c  00004e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08003e90  08003e90  00004e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  24000000  08003e94  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001d630  24000070  08003f04  00005070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2401d6a0  08003f04  000056a0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000d729  00000000  00000000  0000509e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001c8b  00000000  00000000  000127c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c80  00000000  00000000  00014458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000097f  00000000  00000000  000150d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037968  00000000  00000000  00015a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e086  00000000  00000000  0004d3bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00162440  00000000  00000000  0005b445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001bd885  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003d30  00000000  00000000  001bd8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005e  00000000  00000000  001c15f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08003d7c 	.word	0x08003d7c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	08003d7c 	.word	0x08003d7c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <start_timer>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

static void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram);
void start_timer() {
 8000380:	b580      	push	{r7, lr}
 8000382:	b094      	sub	sp, #80	@ 0x50
 8000384:	af00      	add	r7, sp, #0
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000386:	4b16      	ldr	r3, [pc, #88]	@ (80003e0 <start_timer+0x60>)
 8000388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800038c:	4a14      	ldr	r2, [pc, #80]	@ (80003e0 <start_timer+0x60>)
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000396:	4b12      	ldr	r3, [pc, #72]	@ (80003e0 <start_timer+0x60>)
 8000398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800039c:	f003 0301 	and.w	r3, r3, #1
 80003a0:	603b      	str	r3, [r7, #0]
 80003a2:	683b      	ldr	r3, [r7, #0]
  TIM_HandleTypeDef timer = {0};
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	224c      	movs	r2, #76	@ 0x4c
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f002 fe06 	bl	8002fbc <memset>
  timer.Instance = TIM2;
 80003b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003b4:	607b      	str	r3, [r7, #4]
  timer.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b6:	2300      	movs	r3, #0
 80003b8:	60fb      	str	r3, [r7, #12]
  timer.Init.Period = 100000000;
 80003ba:	4b0a      	ldr	r3, [pc, #40]	@ (80003e4 <start_timer+0x64>)
 80003bc:	613b      	str	r3, [r7, #16]
  timer.Init.Prescaler = 64 -1;
 80003be:	233f      	movs	r3, #63	@ 0x3f
 80003c0:	60bb      	str	r3, [r7, #8]
  HAL_TIM_Base_Init(&timer);
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	4618      	mov	r0, r3
 80003c6:	f002 fb59 	bl	8002a7c <HAL_TIM_Base_Init>

  HAL_TIM_Base_Start(&timer);
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	4618      	mov	r0, r3
 80003ce:	f002 fbb7 	bl	8002b40 <HAL_TIM_Base_Start>
  __HAL_TIM_SetCounter(&timer, 0);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2200      	movs	r2, #0
 80003d6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80003d8:	bf00      	nop
 80003da:	3750      	adds	r7, #80	@ 0x50
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	58024400 	.word	0x58024400
 80003e4:	05f5e100 	.word	0x05f5e100

080003e8 <stop_timer>:

void stop_timer() {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b094      	sub	sp, #80	@ 0x50
 80003ec:	af00      	add	r7, sp, #0
  TIM_HandleTypeDef timer = {0};
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	224c      	movs	r2, #76	@ 0x4c
 80003f2:	2100      	movs	r1, #0
 80003f4:	4618      	mov	r0, r3
 80003f6:	f002 fde1 	bl	8002fbc <memset>
  timer.Instance = TIM2;
 80003fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003fe:	607b      	str	r3, [r7, #4]
  HAL_TIM_Base_Stop(&timer);
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	4618      	mov	r0, r3
 8000404:	f002 fc0c 	bl	8002c20 <HAL_TIM_Base_Stop>
}
 8000408:	bf00      	nop
 800040a:	3750      	adds	r7, #80	@ 0x50
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <get_time>:

uint32_t get_time() {
 8000410:	b580      	push	{r7, lr}
 8000412:	b094      	sub	sp, #80	@ 0x50
 8000414:	af00      	add	r7, sp, #0
  TIM_HandleTypeDef timer = {0};
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	224c      	movs	r2, #76	@ 0x4c
 800041a:	2100      	movs	r1, #0
 800041c:	4618      	mov	r0, r3
 800041e:	f002 fdcd 	bl	8002fbc <memset>
  timer.Instance = TIM2;
 8000422:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000426:	607b      	str	r3, [r7, #4]
  return __HAL_TIM_GetCounter(&timer);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 800042c:	4618      	mov	r0, r3
 800042e:	3750      	adds	r7, #80	@ 0x50
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <find_max>:

uint32_t find_max(uint32_t* addr, uint32_t size) {
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	6039      	str	r1, [r7, #0]
    uint32_t max = addr[0];
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	60fb      	str	r3, [r7, #12]
    for (uint32_t i = 1; i < size; i++) {
 8000444:	2301      	movs	r3, #1
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	e010      	b.n	800046c <find_max+0x38>
        if (addr[i] > max) {
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	4413      	add	r3, r2
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	68fa      	ldr	r2, [r7, #12]
 8000456:	429a      	cmp	r2, r3
 8000458:	d205      	bcs.n	8000466 <find_max+0x32>
            max = addr[i];
 800045a:	68bb      	ldr	r3, [r7, #8]
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	4413      	add	r3, r2
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	60fb      	str	r3, [r7, #12]
    for (uint32_t i = 1; i < size; i++) {
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	3301      	adds	r3, #1
 800046a:	60bb      	str	r3, [r7, #8]
 800046c:	68ba      	ldr	r2, [r7, #8]
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	429a      	cmp	r2, r3
 8000472:	d3ea      	bcc.n	800044a <find_max+0x16>
        }
    }
    return max;
 8000474:	68fb      	ldr	r3, [r7, #12]
}
 8000476:	4618      	mov	r0, r3
 8000478:	3714      	adds	r7, #20
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
	...

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b5b0      	push	{r4, r5, r7, lr}
 8000486:	b0be      	sub	sp, #248	@ 0xf8
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048a:	f000 ffdd 	bl	8001448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048e:	f000 fc05 	bl	8000c9c <SystemClock_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000492:	4bb7      	ldr	r3, [pc, #732]	@ (8000770 <main+0x2ec>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800049a:	2b00      	cmp	r3, #0
 800049c:	d11b      	bne.n	80004d6 <main+0x52>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800049e:	f3bf 8f4f 	dsb	sy
}
 80004a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004a4:	f3bf 8f6f 	isb	sy
}
 80004a8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80004aa:	4bb1      	ldr	r3, [pc, #708]	@ (8000770 <main+0x2ec>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80004b2:	f3bf 8f4f 	dsb	sy
}
 80004b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004b8:	f3bf 8f6f 	isb	sy
}
 80004bc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80004be:	4bac      	ldr	r3, [pc, #688]	@ (8000770 <main+0x2ec>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4aab      	ldr	r2, [pc, #684]	@ (8000770 <main+0x2ec>)
 80004c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004c8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004ca:	f3bf 8f4f 	dsb	sy
}
 80004ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004d0:	f3bf 8f6f 	isb	sy
}
 80004d4:	e000      	b.n	80004d8 <main+0x54>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004d6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004d8:	4ba5      	ldr	r3, [pc, #660]	@ (8000770 <main+0x2ec>)
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d143      	bne.n	800056c <main+0xe8>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80004e4:	4ba2      	ldr	r3, [pc, #648]	@ (8000770 <main+0x2ec>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004ec:	f3bf 8f4f 	dsb	sy
}
 80004f0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004f2:	4b9f      	ldr	r3, [pc, #636]	@ (8000770 <main+0x2ec>)
 80004f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80004f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000500:	0b5b      	lsrs	r3, r3, #13
 8000502:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000506:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800050a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800050e:	08db      	lsrs	r3, r3, #3
 8000510:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000514:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000518:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800051c:	015a      	lsls	r2, r3, #5
 800051e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000522:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000524:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000528:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800052a:	4991      	ldr	r1, [pc, #580]	@ (8000770 <main+0x2ec>)
 800052c:	4313      	orrs	r3, r2
 800052e:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000532:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000536:	1e5a      	subs	r2, r3, #1
 8000538:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800053c:	2b00      	cmp	r3, #0
 800053e:	d1eb      	bne.n	8000518 <main+0x94>
    } while(sets-- != 0U);
 8000540:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000544:	1e5a      	subs	r2, r3, #1
 8000546:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1dd      	bne.n	800050a <main+0x86>
  __ASM volatile ("dsb 0xF":::"memory");
 800054e:	f3bf 8f4f 	dsb	sy
}
 8000552:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000554:	4b86      	ldr	r3, [pc, #536]	@ (8000770 <main+0x2ec>)
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	4a85      	ldr	r2, [pc, #532]	@ (8000770 <main+0x2ec>)
 800055a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800055e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000560:	f3bf 8f4f 	dsb	sy
}
 8000564:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000566:	f3bf 8f6f 	isb	sy
}
 800056a:	e000      	b.n	800056e <main+0xea>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800056c:	bf00      	nop
  SCB_EnableICache();
  SCB_EnableDCache();

  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056e:	4b81      	ldr	r3, [pc, #516]	@ (8000774 <main+0x2f0>)
 8000570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000574:	4a7f      	ldr	r2, [pc, #508]	@ (8000774 <main+0x2f0>)
 8000576:	f043 0308 	orr.w	r3, r3, #8
 800057a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800057e:	4b7d      	ldr	r3, [pc, #500]	@ (8000774 <main+0x2f0>)
 8000580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000584:	f003 0308 	and.w	r3, r3, #8
 8000588:	61bb      	str	r3, [r7, #24]
 800058a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800058c:	4b79      	ldr	r3, [pc, #484]	@ (8000774 <main+0x2f0>)
 800058e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000592:	4a78      	ldr	r2, [pc, #480]	@ (8000774 <main+0x2f0>)
 8000594:	f043 0310 	orr.w	r3, r3, #16
 8000598:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800059c:	4b75      	ldr	r3, [pc, #468]	@ (8000774 <main+0x2f0>)
 800059e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005a2:	f003 0310 	and.w	r3, r3, #16
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005aa:	4b72      	ldr	r3, [pc, #456]	@ (8000774 <main+0x2f0>)
 80005ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005b0:	4a70      	ldr	r2, [pc, #448]	@ (8000774 <main+0x2f0>)
 80005b2:	f043 0320 	orr.w	r3, r3, #32
 80005b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005ba:	4b6e      	ldr	r3, [pc, #440]	@ (8000774 <main+0x2f0>)
 80005bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005c0:	f003 0320 	and.w	r3, r3, #32
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005c8:	4b6a      	ldr	r3, [pc, #424]	@ (8000774 <main+0x2f0>)
 80005ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005ce:	4a69      	ldr	r2, [pc, #420]	@ (8000774 <main+0x2f0>)
 80005d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005d8:	4b66      	ldr	r3, [pc, #408]	@ (8000774 <main+0x2f0>)
 80005da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e6:	4b63      	ldr	r3, [pc, #396]	@ (8000774 <main+0x2f0>)
 80005e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005ec:	4a61      	ldr	r2, [pc, #388]	@ (8000774 <main+0x2f0>)
 80005ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005f6:	4b5f      	ldr	r3, [pc, #380]	@ (8000774 <main+0x2f0>)
 80005f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef gpio_init_structure;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000604:	2302      	movs	r3, #2
 8000606:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  gpio_init_structure.Pull = GPIO_PULLUP;
 800060a:	2301      	movs	r3, #1
 800060c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000610:	2303      	movs	r3, #3
 8000612:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8000616:	230c      	movs	r3, #12
 8000618:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9;
 800061c:	f240 3303 	movw	r3, #771	@ 0x303
 8000620:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  gpio_init_structure.Pin |= GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
 8000624:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000628:	f443 4344 	orr.w	r3, r3, #50176	@ 0xc400
 800062c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000630:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000634:	4619      	mov	r1, r3
 8000636:	4850      	ldr	r0, [pc, #320]	@ (8000778 <main+0x2f4>)
 8000638:	f001 f8ac 	bl	8001794 <HAL_GPIO_Init>
  gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8;
 800063c:	f240 1383 	movw	r3, #387	@ 0x183
 8000640:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  gpio_init_structure.Pin |= GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8000644:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000648:	f443 53f0 	orr.w	r3, r3, #7680	@ 0x1e00
 800064c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  gpio_init_structure.Pin |= GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000650:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000654:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000658:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800065c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000660:	4619      	mov	r1, r3
 8000662:	4846      	ldr	r0, [pc, #280]	@ (800077c <main+0x2f8>)
 8000664:	f001 f896 	bl	8001794 <HAL_GPIO_Init>
  gpio_init_structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3;
 8000668:	230f      	movs	r3, #15
 800066a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  gpio_init_structure.Pin |= GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12;
 800066e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000672:	f641 0330 	movw	r3, #6192	@ 0x1830
 8000676:	4313      	orrs	r3, r2
 8000678:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  gpio_init_structure.Pin |= GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800067c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000680:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000684:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8000688:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800068c:	4619      	mov	r1, r3
 800068e:	483c      	ldr	r0, [pc, #240]	@ (8000780 <main+0x2fc>)
 8000690:	f001 f880 	bl	8001794 <HAL_GPIO_Init>
  gpio_init_structure.Pin  = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000694:	2333      	movs	r3, #51	@ 0x33
 8000696:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  gpio_init_structure.Pin |= GPIO_PIN_8 | GPIO_PIN_15;
 800069a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800069e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80006a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80006a6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80006aa:	4619      	mov	r1, r3
 80006ac:	4835      	ldr	r0, [pc, #212]	@ (8000784 <main+0x300>)
 80006ae:	f001 f871 	bl	8001794 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 80006b2:	23e0      	movs	r3, #224	@ 0xe0
 80006b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80006b8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80006bc:	4619      	mov	r1, r3
 80006be:	4832      	ldr	r0, [pc, #200]	@ (8000788 <main+0x304>)
 80006c0:	f001 f868 	bl	8001794 <HAL_GPIO_Init>

  __HAL_RCC_FMC_CLK_ENABLE();
 80006c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000774 <main+0x2f0>)
 80006c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006ca:	4a2a      	ldr	r2, [pc, #168]	@ (8000774 <main+0x2f0>)
 80006cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006d0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80006d4:	4b27      	ldr	r3, [pc, #156]	@ (8000774 <main+0x2f0>)
 80006d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  FMC_SDRAM_TimingTypeDef  SDRAM_Timing = {0};
 80006e2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
 80006f2:	615a      	str	r2, [r3, #20]
 80006f4:	619a      	str	r2, [r3, #24]
  SDRAM_Timing.LoadToActiveDelay    = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	667b      	str	r3, [r7, #100]	@ 0x64
  SDRAM_Timing.ExitSelfRefreshDelay = 7;
 80006fa:	2307      	movs	r3, #7
 80006fc:	66bb      	str	r3, [r7, #104]	@ 0x68
  SDRAM_Timing.SelfRefreshTime      = 4;
 80006fe:	2304      	movs	r3, #4
 8000700:	66fb      	str	r3, [r7, #108]	@ 0x6c
  SDRAM_Timing.RowCycleDelay        = 7;
 8000702:	2307      	movs	r3, #7
 8000704:	673b      	str	r3, [r7, #112]	@ 0x70
  SDRAM_Timing.WriteRecoveryTime    = 2;
 8000706:	2302      	movs	r3, #2
 8000708:	677b      	str	r3, [r7, #116]	@ 0x74
  SDRAM_Timing.RPDelay              = 2;
 800070a:	2302      	movs	r3, #2
 800070c:	67bb      	str	r3, [r7, #120]	@ 0x78
  SDRAM_Timing.RCDDelay             = 2;
 800070e:	2302      	movs	r3, #2
 8000710:	67fb      	str	r3, [r7, #124]	@ 0x7c

  SDRAM_HandleTypeDef      hsdram = {0};
 8000712:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000716:	2234      	movs	r2, #52	@ 0x34
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f002 fc4e 	bl	8002fbc <memset>
  hsdram.Instance = FMC_SDRAM_DEVICE;
 8000720:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <main+0x308>)
 8000722:	633b      	str	r3, [r7, #48]	@ 0x30
  hsdram.Init.SDBank             = FMC_SDRAM_BANK2;
 8000724:	2301      	movs	r3, #1
 8000726:	637b      	str	r3, [r7, #52]	@ 0x34
  hsdram.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000728:	2300      	movs	r3, #0
 800072a:	63bb      	str	r3, [r7, #56]	@ 0x38
  hsdram.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800072c:	2304      	movs	r3, #4
 800072e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  hsdram.Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000730:	2320      	movs	r3, #32
 8000732:	643b      	str	r3, [r7, #64]	@ 0x40
  hsdram.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000734:	2340      	movs	r3, #64	@ 0x40
 8000736:	647b      	str	r3, [r7, #68]	@ 0x44
  hsdram.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8000738:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800073c:	64bb      	str	r3, [r7, #72]	@ 0x48
  hsdram.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	64fb      	str	r3, [r7, #76]	@ 0x4c
  hsdram.Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_3;
 8000742:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000746:	653b      	str	r3, [r7, #80]	@ 0x50
  hsdram.Init.ReadBurst          = FMC_SDRAM_RBURST_DISABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	657b      	str	r3, [r7, #84]	@ 0x54

  HAL_SDRAM_Init(&hsdram, &SDRAM_Timing);
 800074c:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8000750:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f000 fb2a 	bl	8000db0 <HAL_SDRAM_Init>
  SDRAM_Initialization_Sequence(&hsdram);
 800075c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000760:	4618      	mov	r0, r3
 8000762:	f000 fa45 	bl	8000bf0 <SDRAM_Initialization_Sequence>

  for (uint32_t i = 0; i < ARRAY_SIZE; i++) {
 8000766:	2300      	movs	r3, #0
 8000768:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800076c:	e03c      	b.n	80007e8 <main+0x364>
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00
 8000774:	58024400 	.word	0x58024400
 8000778:	58020c00 	.word	0x58020c00
 800077c:	58021000 	.word	0x58021000
 8000780:	58021400 	.word	0x58021400
 8000784:	58021800 	.word	0x58021800
 8000788:	58021c00 	.word	0x58021c00
 800078c:	52004140 	.word	0x52004140
      sram_array[i] = rand() % 100000;
 8000790:	f002 fb14 	bl	8002dbc <rand>
 8000794:	4603      	mov	r3, r0
 8000796:	4acf      	ldr	r2, [pc, #828]	@ (8000ad4 <main+0x650>)
 8000798:	fb82 1203 	smull	r1, r2, r2, r3
 800079c:	1351      	asrs	r1, r2, #13
 800079e:	17da      	asrs	r2, r3, #31
 80007a0:	1a8a      	subs	r2, r1, r2
 80007a2:	49cd      	ldr	r1, [pc, #820]	@ (8000ad8 <main+0x654>)
 80007a4:	fb01 f202 	mul.w	r2, r1, r2
 80007a8:	1a9a      	subs	r2, r3, r2
 80007aa:	4611      	mov	r1, r2
 80007ac:	4acb      	ldr	r2, [pc, #812]	@ (8000adc <main+0x658>)
 80007ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80007b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      sdram_array[i] = rand() % 100000;
 80007b6:	f002 fb01 	bl	8002dbc <rand>
 80007ba:	4603      	mov	r3, r0
 80007bc:	4ac5      	ldr	r2, [pc, #788]	@ (8000ad4 <main+0x650>)
 80007be:	fb82 1203 	smull	r1, r2, r2, r3
 80007c2:	1351      	asrs	r1, r2, #13
 80007c4:	17da      	asrs	r2, r3, #31
 80007c6:	1a8a      	subs	r2, r1, r2
 80007c8:	49c3      	ldr	r1, [pc, #780]	@ (8000ad8 <main+0x654>)
 80007ca:	fb01 f202 	mul.w	r2, r1, r2
 80007ce:	1a9a      	subs	r2, r3, r2
 80007d0:	4bc3      	ldr	r3, [pc, #780]	@ (8000ae0 <main+0x65c>)
 80007d2:	6819      	ldr	r1, [r3, #0]
 80007d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	440b      	add	r3, r1
 80007dc:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < ARRAY_SIZE; i++) {
 80007de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80007e2:	3301      	adds	r3, #1
 80007e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80007e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80007ec:	f247 522f 	movw	r2, #29999	@ 0x752f
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d9cd      	bls.n	8000790 <main+0x30c>
  __ASM volatile ("dsb 0xF":::"memory");
 80007f4:	f3bf 8f4f 	dsb	sy
}
 80007f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007fa:	f3bf 8f6f 	isb	sy
}
 80007fe:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000800:	4bb8      	ldr	r3, [pc, #736]	@ (8000ae4 <main+0x660>)
 8000802:	695b      	ldr	r3, [r3, #20]
 8000804:	4ab7      	ldr	r2, [pc, #732]	@ (8000ae4 <main+0x660>)
 8000806:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800080a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800080c:	4bb5      	ldr	r3, [pc, #724]	@ (8000ae4 <main+0x660>)
 800080e:	2200      	movs	r2, #0
 8000810:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000814:	f3bf 8f4f 	dsb	sy
}
 8000818:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800081a:	f3bf 8f6f 	isb	sy
}
 800081e:	bf00      	nop
}
 8000820:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000822:	4bb0      	ldr	r3, [pc, #704]	@ (8000ae4 <main+0x660>)
 8000824:	2200      	movs	r2, #0
 8000826:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800082a:	f3bf 8f4f 	dsb	sy
}
 800082e:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 8000830:	4bac      	ldr	r3, [pc, #688]	@ (8000ae4 <main+0x660>)
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	4aab      	ldr	r2, [pc, #684]	@ (8000ae4 <main+0x660>)
 8000836:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800083a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800083c:	f3bf 8f4f 	dsb	sy
}
 8000840:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000842:	4ba8      	ldr	r3, [pc, #672]	@ (8000ae4 <main+0x660>)
 8000844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000848:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800084c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000850:	0b5b      	lsrs	r3, r3, #13
 8000852:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000856:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800085a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800085e:	08db      	lsrs	r3, r3, #3
 8000860:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000864:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800086c:	015a      	lsls	r2, r3, #5
 800086e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000872:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000874:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8000878:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800087a:	499a      	ldr	r1, [pc, #616]	@ (8000ae4 <main+0x660>)
 800087c:	4313      	orrs	r3, r2
 800087e:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000882:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000886:	1e5a      	subs	r2, r3, #1
 8000888:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800088c:	2b00      	cmp	r3, #0
 800088e:	d1eb      	bne.n	8000868 <main+0x3e4>
    } while(sets-- != 0U);
 8000890:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000894:	1e5a      	subs	r2, r3, #1
 8000896:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1dd      	bne.n	800085a <main+0x3d6>
  __ASM volatile ("dsb 0xF":::"memory");
 800089e:	f3bf 8f4f 	dsb	sy
}
 80008a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008a4:	f3bf 8f6f 	isb	sy
}
 80008a8:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80008aa:	bf00      	nop
  uint32_t max_value;
  uint32_t stop_time;

  SCB_DisableICache();
  SCB_DisableDCache();
  start_timer();
 80008ac:	f7ff fd68 	bl	8000380 <start_timer>
  max_value = find_max((uint32_t*)sdram_array, ARRAY_SIZE);
 80008b0:	4b8b      	ldr	r3, [pc, #556]	@ (8000ae0 <main+0x65c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f247 5130 	movw	r1, #30000	@ 0x7530
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fdbb 	bl	8000434 <find_max>
 80008be:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
  stop_time = get_time();
 80008c2:	f7ff fda5 	bl	8000410 <get_time>
 80008c6:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
  stop_timer();
 80008ca:	f7ff fd8d 	bl	80003e8 <stop_timer>
  uint32_t time_sdram_no_cache_fifo = stop_time;
 80008ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80008d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  __ASM volatile ("dsb 0xF":::"memory");
 80008d6:	f3bf 8f4f 	dsb	sy
}
 80008da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008dc:	f3bf 8f6f 	isb	sy
}
 80008e0:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80008e2:	4b80      	ldr	r3, [pc, #512]	@ (8000ae4 <main+0x660>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	4a7f      	ldr	r2, [pc, #508]	@ (8000ae4 <main+0x660>)
 80008e8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80008ec:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008ee:	4b7d      	ldr	r3, [pc, #500]	@ (8000ae4 <main+0x660>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008f6:	f3bf 8f4f 	dsb	sy
}
 80008fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008fc:	f3bf 8f6f 	isb	sy
}
 8000900:	bf00      	nop
}
 8000902:	bf00      	nop

  SCB_DisableICache();
  start_timer();
 8000904:	f7ff fd3c 	bl	8000380 <start_timer>
  max_value = find_max(sram_array, ARRAY_SIZE);
 8000908:	f247 5130 	movw	r1, #30000	@ 0x7530
 800090c:	4873      	ldr	r0, [pc, #460]	@ (8000adc <main+0x658>)
 800090e:	f7ff fd91 	bl	8000434 <find_max>
 8000912:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
  stop_time = get_time();
 8000916:	f7ff fd7b 	bl	8000410 <get_time>
 800091a:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
  stop_timer();
 800091e:	f7ff fd63 	bl	80003e8 <stop_timer>
  uint32_t time_sram_no_cache = stop_time;
 8000922:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000926:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800092a:	4b6e      	ldr	r3, [pc, #440]	@ (8000ae4 <main+0x660>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000932:	2b00      	cmp	r3, #0
 8000934:	d11b      	bne.n	800096e <main+0x4ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000936:	f3bf 8f4f 	dsb	sy
}
 800093a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800093c:	f3bf 8f6f 	isb	sy
}
 8000940:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000942:	4b68      	ldr	r3, [pc, #416]	@ (8000ae4 <main+0x660>)
 8000944:	2200      	movs	r2, #0
 8000946:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800094a:	f3bf 8f4f 	dsb	sy
}
 800094e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000950:	f3bf 8f6f 	isb	sy
}
 8000954:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000956:	4b63      	ldr	r3, [pc, #396]	@ (8000ae4 <main+0x660>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	4a62      	ldr	r2, [pc, #392]	@ (8000ae4 <main+0x660>)
 800095c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000960:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000962:	f3bf 8f4f 	dsb	sy
}
 8000966:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000968:	f3bf 8f6f 	isb	sy
}
 800096c:	e000      	b.n	8000970 <main+0x4ec>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800096e:	bf00      	nop
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000970:	4b5c      	ldr	r3, [pc, #368]	@ (8000ae4 <main+0x660>)
 8000972:	2200      	movs	r2, #0
 8000974:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000978:	f3bf 8f4f 	dsb	sy
}
 800097c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 800097e:	4b59      	ldr	r3, [pc, #356]	@ (8000ae4 <main+0x660>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	4a58      	ldr	r2, [pc, #352]	@ (8000ae4 <main+0x660>)
 8000984:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000988:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800098a:	f3bf 8f4f 	dsb	sy
}
 800098e:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8000990:	4b54      	ldr	r3, [pc, #336]	@ (8000ae4 <main+0x660>)
 8000992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000996:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800099a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800099e:	0b5b      	lsrs	r3, r3, #13
 80009a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80009ac:	08db      	lsrs	r3, r3, #3
 80009ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80009b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80009ba:	015a      	lsls	r2, r3, #5
 80009bc:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80009c0:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80009c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80009c6:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80009c8:	4946      	ldr	r1, [pc, #280]	@ (8000ae4 <main+0x660>)
 80009ca:	4313      	orrs	r3, r2
 80009cc:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 80009d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80009d4:	1e5a      	subs	r2, r3, #1
 80009d6:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d1eb      	bne.n	80009b6 <main+0x532>
    } while(sets-- != 0U);
 80009de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80009e2:	1e5a      	subs	r2, r3, #1
 80009e4:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d1dd      	bne.n	80009a8 <main+0x524>
  __ASM volatile ("dsb 0xF":::"memory");
 80009ec:	f3bf 8f4f 	dsb	sy
}
 80009f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009f2:	f3bf 8f6f 	isb	sy
}
 80009f6:	bf00      	nop
}
 80009f8:	bf00      	nop

  SCB_EnableICache();
  SCB_DisableDCache();
  start_timer();
 80009fa:	f7ff fcc1 	bl	8000380 <start_timer>
  max_value = find_max((uint32_t*)sdram_array, ARRAY_SIZE);
 80009fe:	4b38      	ldr	r3, [pc, #224]	@ (8000ae0 <main+0x65c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f247 5130 	movw	r1, #30000	@ 0x7530
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fd14 	bl	8000434 <find_max>
 8000a0c:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
  stop_time = get_time();
 8000a10:	f7ff fcfe 	bl	8000410 <get_time>
 8000a14:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
  stop_timer();
 8000a18:	f7ff fce6 	bl	80003e8 <stop_timer>
  uint32_t time_sdram_cache_no_fifo = stop_time;
 8000a1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a24:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae4 <main+0x660>)
 8000a26:	695b      	ldr	r3, [r3, #20]
 8000a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d11b      	bne.n	8000a68 <main+0x5e4>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a30:	f3bf 8f4f 	dsb	sy
}
 8000a34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a36:	f3bf 8f6f 	isb	sy
}
 8000a3a:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a3c:	4b29      	ldr	r3, [pc, #164]	@ (8000ae4 <main+0x660>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a44:	f3bf 8f4f 	dsb	sy
}
 8000a48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a4a:	f3bf 8f6f 	isb	sy
}
 8000a4e:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a50:	4b24      	ldr	r3, [pc, #144]	@ (8000ae4 <main+0x660>)
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	4a23      	ldr	r2, [pc, #140]	@ (8000ae4 <main+0x660>)
 8000a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a5a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a5c:	f3bf 8f4f 	dsb	sy
}
 8000a60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a62:	f3bf 8f6f 	isb	sy
}
 8000a66:	e000      	b.n	8000a6a <main+0x5e6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a68:	bf00      	nop

  SCB_EnableICache();
  start_timer();
 8000a6a:	f7ff fc89 	bl	8000380 <start_timer>
  max_value = find_max(sram_array, ARRAY_SIZE);
 8000a6e:	f247 5130 	movw	r1, #30000	@ 0x7530
 8000a72:	481a      	ldr	r0, [pc, #104]	@ (8000adc <main+0x658>)
 8000a74:	f7ff fcde 	bl	8000434 <find_max>
 8000a78:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
  stop_time = get_time();
 8000a7c:	f7ff fcc8 	bl	8000410 <get_time>
 8000a80:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
  stop_timer();
 8000a84:	f7ff fcb0 	bl	80003e8 <stop_timer>
  uint32_t time_sram_cache = stop_time;
 8000a88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000a90:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <main+0x660>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d125      	bne.n	8000ae8 <main+0x664>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a9c:	f3bf 8f4f 	dsb	sy
}
 8000aa0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000aa2:	f3bf 8f6f 	isb	sy
}
 8000aa6:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <main+0x660>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab0:	f3bf 8f4f 	dsb	sy
}
 8000ab4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ab6:	f3bf 8f6f 	isb	sy
}
 8000aba:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000abc:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <main+0x660>)
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <main+0x660>)
 8000ac2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ac8:	f3bf 8f4f 	dsb	sy
}
 8000acc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ace:	f3bf 8f6f 	isb	sy
}
 8000ad2:	e00a      	b.n	8000aea <main+0x666>
 8000ad4:	14f8b589 	.word	0x14f8b589
 8000ad8:	000186a0 	.word	0x000186a0
 8000adc:	2400008c 	.word	0x2400008c
 8000ae0:	24000000 	.word	0x24000000
 8000ae4:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ae8:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000aea:	4b3f      	ldr	r3, [pc, #252]	@ (8000be8 <main+0x764>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d143      	bne.n	8000b7e <main+0x6fa>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000af6:	4b3c      	ldr	r3, [pc, #240]	@ (8000be8 <main+0x764>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000afe:	f3bf 8f4f 	dsb	sy
}
 8000b02:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8000b04:	4b38      	ldr	r3, [pc, #224]	@ (8000be8 <main+0x764>)
 8000b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000b12:	0b5b      	lsrs	r3, r3, #13
 8000b14:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000b2e:	015a      	lsls	r2, r3, #5
 8000b30:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000b34:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b36:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8000b3a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b3c:	492a      	ldr	r1, [pc, #168]	@ (8000be8 <main+0x764>)
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 8000b44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000b48:	1e5a      	subs	r2, r3, #1
 8000b4a:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1eb      	bne.n	8000b2a <main+0x6a6>
    } while(sets-- != 0U);
 8000b52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000b56:	1e5a      	subs	r2, r3, #1
 8000b58:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1dd      	bne.n	8000b1c <main+0x698>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b60:	f3bf 8f4f 	dsb	sy
}
 8000b64:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b66:	4b20      	ldr	r3, [pc, #128]	@ (8000be8 <main+0x764>)
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	4a1f      	ldr	r2, [pc, #124]	@ (8000be8 <main+0x764>)
 8000b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b70:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b72:	f3bf 8f4f 	dsb	sy
}
 8000b76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b78:	f3bf 8f6f 	isb	sy
}
 8000b7c:	e000      	b.n	8000b80 <main+0x6fc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b7e:	bf00      	nop

  SCB_EnableICache();
  SCB_EnableDCache();
  start_timer();
 8000b80:	f7ff fbfe 	bl	8000380 <start_timer>
  max_value = find_max((uint32_t*)sdram_array, ARRAY_SIZE);
 8000b84:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <main+0x768>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f247 5130 	movw	r1, #30000	@ 0x7530
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fc51 	bl	8000434 <find_max>
 8000b92:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
  stop_time = get_time();
 8000b96:	f7ff fc3b 	bl	8000410 <get_time>
 8000b9a:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
  stop_timer();
 8000b9e:	f7ff fc23 	bl	80003e8 <stop_timer>
  uint32_t time_sdram_cache_fifo = stop_time;
 8000ba2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000ba6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

  volatile uint32_t results[5] = {
 8000baa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8000bae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000bb6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000bbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000bca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000bce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000bd2:	f107 041c 	add.w	r4, r7, #28
 8000bd6:	f107 0594 	add.w	r5, r7, #148	@ 0x94
 8000bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bde:	682b      	ldr	r3, [r5, #0]
 8000be0:	6023      	str	r3, [r4, #0]
      time_sram_cache, // 15867
      time_sdram_cache_fifo // 17003
  };


  while (1)
 8000be2:	bf00      	nop
 8000be4:	e7fd      	b.n	8000be2 <main+0x75e>
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00
 8000bec:	24000000 	.word	0x24000000

08000bf0 <SDRAM_Initialization_Sequence>:
#define SDRAM_MODEREG_OPERATING_MODE_STANDARD    ((uint16_t)0x0000)
#define SDRAM_MODEREG_WRITEBURST_MODE_PROGRAMMED ((uint16_t)0x0000)
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

static void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  FMC_SDRAM_CommandTypeDef command;
  __IO uint32_t tmpmrd =0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]

  // 1. vklopimo uro
  command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	613b      	str	r3, [r7, #16]
  command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8000c00:	2308      	movs	r3, #8
 8000c02:	617b      	str	r3, [r7, #20]
  command.AutoRefreshNumber = 1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	61bb      	str	r3, [r7, #24]
  command.ModeRegisterDefinition = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c14:	4619      	mov	r1, r3
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 f910 	bl	8000e3c <HAL_SDRAM_SendCommand>

  // pocakamo 100 us
  HAL_Delay(1);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f000 fca5 	bl	800156c <HAL_Delay>

  // posljemo precharge all ukaz
  command.CommandMode = FMC_SDRAM_CMD_PALL;
 8000c22:	2302      	movs	r3, #2
 8000c24:	613b      	str	r3, [r7, #16]
  command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8000c26:	2308      	movs	r3, #8
 8000c28:	617b      	str	r3, [r7, #20]
  command.AutoRefreshNumber = 1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	61bb      	str	r3, [r7, #24]
  command.ModeRegisterDefinition = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f000 f8fd 	bl	8000e3c <HAL_SDRAM_SendCommand>

  // posljemo auto refresh ukaz(e)
  command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000c42:	2303      	movs	r3, #3
 8000c44:	613b      	str	r3, [r7, #16]
  command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8000c46:	2308      	movs	r3, #8
 8000c48:	617b      	str	r3, [r7, #20]
  command.AutoRefreshNumber = 8;
 8000c4a:	2308      	movs	r3, #8
 8000c4c:	61bb      	str	r3, [r7, #24]
  command.ModeRegisterDefinition = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
  HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f000 f8ed 	bl	8000e3c <HAL_SDRAM_SendCommand>

  // nastavimo mode register SDRAMa
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000c62:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8000c66:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	613b      	str	r3, [r7, #16]
  command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	617b      	str	r3, [r7, #20]
  command.AutoRefreshNumber = 1;
 8000c70:	2301      	movs	r3, #1
 8000c72:	61bb      	str	r3, [r7, #24]
  command.ModeRegisterDefinition = tmpmrd;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	61fb      	str	r3, [r7, #28]
  HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c80:	4619      	mov	r1, r3
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f000 f8da 	bl	8000e3c <HAL_SDRAM_SendCommand>

  // nastavimo stevec osvezevanja
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8000c88:	f240 6103 	movw	r1, #1539	@ 0x603
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f000 f90a 	bl	8000ea6 <HAL_SDRAM_ProgramRefreshRate>
}
 8000c92:	bf00      	nop
 8000c94:	3720      	adds	r7, #32
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b09c      	sub	sp, #112	@ 0x70
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca6:	224c      	movs	r2, #76	@ 0x4c
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f002 f986 	bl	8002fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2220      	movs	r2, #32
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f002 f980 	bl	8002fbc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cbc:	2002      	movs	r0, #2
 8000cbe:	f000 ff19 	bl	8001af4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4b28      	ldr	r3, [pc, #160]	@ (8000d68 <SystemClock_Config+0xcc>)
 8000cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cca:	4a27      	ldr	r2, [pc, #156]	@ (8000d68 <SystemClock_Config+0xcc>)
 8000ccc:	f023 0301 	bic.w	r3, r3, #1
 8000cd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000cd2:	4b25      	ldr	r3, [pc, #148]	@ (8000d68 <SystemClock_Config+0xcc>)
 8000cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	4b23      	ldr	r3, [pc, #140]	@ (8000d6c <SystemClock_Config+0xd0>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ce4:	4a21      	ldr	r2, [pc, #132]	@ (8000d6c <SystemClock_Config+0xd0>)
 8000ce6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b1f      	ldr	r3, [pc, #124]	@ (8000d6c <SystemClock_Config+0xd0>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cf8:	bf00      	nop
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d6c <SystemClock_Config+0xd0>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d06:	d1f8      	bne.n	8000cfa <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d10:	2340      	movs	r3, #64	@ 0x40
 8000d12:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 ff23 	bl	8001b68 <HAL_RCC_OscConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d28:	f000 f822 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2c:	233f      	movs	r3, #63	@ 0x3f
 8000d2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2101      	movs	r1, #1
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 fb63 	bl	800241c <HAL_RCC_ClockConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d5c:	f000 f808 	bl	8000d70 <Error_Handler>
  }
}
 8000d60:	bf00      	nop
 8000d62:	3770      	adds	r7, #112	@ 0x70
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	58000400 	.word	0x58000400
 8000d6c:	58024800 	.word	0x58024800

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <Error_Handler+0x8>

08000d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <HAL_MspInit+0x30>)
 8000d84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d88:	4a08      	ldr	r2, [pc, #32]	@ (8000dac <HAL_MspInit+0x30>)
 8000d8a:	f043 0302 	orr.w	r3, r3, #2
 8000d8e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d92:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <HAL_MspInit+0x30>)
 8000d94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	58024400 	.word	0x58024400

08000db0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d101      	bne.n	8000dc4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e02b      	b.n	8000e1c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d106      	bne.n	8000dde <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 f825 	bl	8000e28 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2202      	movs	r2, #2
 8000de2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3304      	adds	r3, #4
 8000dee:	4619      	mov	r1, r3
 8000df0:	4610      	mov	r0, r2
 8000df2:	f000 f8af 	bl	8000f54 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6818      	ldr	r0, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	6839      	ldr	r1, [r7, #0]
 8000e02:	f000 f903 	bl	800100c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8000e06:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <HAL_SDRAM_Init+0x74>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a06      	ldr	r2, [pc, #24]	@ (8000e24 <HAL_SDRAM_Init+0x74>)
 8000e0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e10:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2201      	movs	r2, #1
 8000e16:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	52004000 	.word	0x52004000

08000e28 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000e4e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8000e50:	7dfb      	ldrb	r3, [r7, #23]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d101      	bne.n	8000e5a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8000e56:	2302      	movs	r3, #2
 8000e58:	e021      	b.n	8000e9e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8000e5a:	7dfb      	ldrb	r3, [r7, #23]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d002      	beq.n	8000e66 <HAL_SDRAM_SendCommand+0x2a>
 8000e60:	7dfb      	ldrb	r3, [r7, #23]
 8000e62:	2b05      	cmp	r3, #5
 8000e64:	d118      	bne.n	8000e98 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	2202      	movs	r2, #2
 8000e6a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f932 	bl	80010e0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d104      	bne.n	8000e8e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2205      	movs	r2, #5
 8000e88:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8000e8c:	e006      	b.n	8000e9c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	2201      	movs	r2, #1
 8000e92:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8000e96:	e001      	b.n	8000e9c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e000      	b.n	8000e9e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d101      	bne.n	8000ec0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	e016      	b.n	8000eee <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d10f      	bne.n	8000eec <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2202      	movs	r2, #2
 8000ed0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	6839      	ldr	r1, [r7, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f924 	bl	8001128 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	e000      	b.n	8000eee <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000efa:	bf00      	nop
 8000efc:	e7fd      	b.n	8000efa <NMI_Handler+0x4>

08000efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f02:	bf00      	nop
 8000f04:	e7fd      	b.n	8000f02 <HardFault_Handler+0x4>

08000f06 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0a:	bf00      	nop
 8000f0c:	e7fd      	b.n	8000f0a <MemManage_Handler+0x4>

08000f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f12:	bf00      	nop
 8000f14:	e7fd      	b.n	8000f12 <BusFault_Handler+0x4>

08000f16 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1a:	bf00      	nop
 8000f1c:	e7fd      	b.n	8000f1a <UsageFault_Handler+0x4>

08000f1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4c:	f000 faee 	bl	800152c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d121      	bne.n	8000faa <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4b27      	ldr	r3, [pc, #156]	@ (8001008 <FMC_SDRAM_Init+0xb4>)
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	6851      	ldr	r1, [r2, #4]
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	6892      	ldr	r2, [r2, #8]
 8000f76:	4311      	orrs	r1, r2
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	68d2      	ldr	r2, [r2, #12]
 8000f7c:	4311      	orrs	r1, r2
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	6912      	ldr	r2, [r2, #16]
 8000f82:	4311      	orrs	r1, r2
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	6952      	ldr	r2, [r2, #20]
 8000f88:	4311      	orrs	r1, r2
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	6992      	ldr	r2, [r2, #24]
 8000f8e:	4311      	orrs	r1, r2
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	69d2      	ldr	r2, [r2, #28]
 8000f94:	4311      	orrs	r1, r2
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	6a12      	ldr	r2, [r2, #32]
 8000f9a:	4311      	orrs	r1, r2
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	e026      	b.n	8000ff8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	69d9      	ldr	r1, [r3, #28]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	6a1b      	ldr	r3, [r3, #32]
 8000fba:	4319      	orrs	r1, r3
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc0:	430b      	orrs	r3, r1
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <FMC_SDRAM_Init+0xb4>)
 8000fce:	4013      	ands	r3, r2
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	6851      	ldr	r1, [r2, #4]
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	6892      	ldr	r2, [r2, #8]
 8000fd8:	4311      	orrs	r1, r2
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	68d2      	ldr	r2, [r2, #12]
 8000fde:	4311      	orrs	r1, r2
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	6912      	ldr	r2, [r2, #16]
 8000fe4:	4311      	orrs	r1, r2
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	6952      	ldr	r2, [r2, #20]
 8000fea:	4311      	orrs	r1, r2
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	6992      	ldr	r2, [r2, #24]
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	ffff8000 	.word	0xffff8000

0800100c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d128      	bne.n	8001070 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	1e59      	subs	r1, r3, #1
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	3b01      	subs	r3, #1
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	4319      	orrs	r1, r3
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	3b01      	subs	r3, #1
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	4319      	orrs	r1, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	3b01      	subs	r3, #1
 8001046:	031b      	lsls	r3, r3, #12
 8001048:	4319      	orrs	r1, r3
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	3b01      	subs	r3, #1
 8001050:	041b      	lsls	r3, r3, #16
 8001052:	4319      	orrs	r1, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	3b01      	subs	r3, #1
 800105a:	051b      	lsls	r3, r3, #20
 800105c:	4319      	orrs	r1, r3
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	3b01      	subs	r3, #1
 8001064:	061b      	lsls	r3, r3, #24
 8001066:	430b      	orrs	r3, r1
 8001068:	431a      	orrs	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	e02d      	b.n	80010cc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	4b19      	ldr	r3, [pc, #100]	@ (80010dc <FMC_SDRAM_Timing_Init+0xd0>)
 8001076:	4013      	ands	r3, r2
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	68d2      	ldr	r2, [r2, #12]
 800107c:	3a01      	subs	r2, #1
 800107e:	0311      	lsls	r1, r2, #12
 8001080:	68ba      	ldr	r2, [r7, #8]
 8001082:	6952      	ldr	r2, [r2, #20]
 8001084:	3a01      	subs	r2, #1
 8001086:	0512      	lsls	r2, r2, #20
 8001088:	430a      	orrs	r2, r1
 800108a:	431a      	orrs	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	1e59      	subs	r1, r3, #1
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	4319      	orrs	r1, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	4319      	orrs	r1, r3
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	041b      	lsls	r3, r3, #16
 80010ba:	4319      	orrs	r1, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	061b      	lsls	r3, r3, #24
 80010c4:	430b      	orrs	r3, r1
 80010c6:	431a      	orrs	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	ff0f0fff 	.word	0xff0f0fff

080010e0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	691a      	ldr	r2, [r3, #16]
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <FMC_SDRAM_SendCommand+0x44>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	68ba      	ldr	r2, [r7, #8]
 80010f6:	6811      	ldr	r1, [r2, #0]
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	6852      	ldr	r2, [r2, #4]
 80010fc:	4311      	orrs	r1, r2
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	6892      	ldr	r2, [r2, #8]
 8001102:	3a01      	subs	r2, #1
 8001104:	0152      	lsls	r2, r2, #5
 8001106:	4311      	orrs	r1, r2
 8001108:	68ba      	ldr	r2, [r7, #8]
 800110a:	68d2      	ldr	r2, [r2, #12]
 800110c:	0252      	lsls	r2, r2, #9
 800110e:	430a      	orrs	r2, r1
 8001110:	431a      	orrs	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	ffc00000 	.word	0xffc00000

08001128 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	695a      	ldr	r2, [r3, #20]
 8001136:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8001138:	4013      	ands	r3, r2
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	0052      	lsls	r2, r2, #1
 800113e:	431a      	orrs	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	ffffc001 	.word	0xffffc001

08001158 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return 1;
 800115c:	2301      	movs	r3, #1
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <_kill>:

int _kill(int pid, int sig)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001172:	f001 ff2b 	bl	8002fcc <__errno>
 8001176:	4603      	mov	r3, r0
 8001178:	2216      	movs	r2, #22
 800117a:	601a      	str	r2, [r3, #0]
  return -1;
 800117c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <_exit>:

void _exit (int status)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001190:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ffe7 	bl	8001168 <_kill>
  while (1) {}    /* Make sure we hang here */
 800119a:	bf00      	nop
 800119c:	e7fd      	b.n	800119a <_exit+0x12>

0800119e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	60f8      	str	r0, [r7, #12]
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	e00a      	b.n	80011c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011b0:	f3af 8000 	nop.w
 80011b4:	4601      	mov	r1, r0
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	1c5a      	adds	r2, r3, #1
 80011ba:	60ba      	str	r2, [r7, #8]
 80011bc:	b2ca      	uxtb	r2, r1
 80011be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	3301      	adds	r3, #1
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	dbf0      	blt.n	80011b0 <_read+0x12>
  }

  return len;
 80011ce:	687b      	ldr	r3, [r7, #4]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	e009      	b.n	80011fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1c5a      	adds	r2, r3, #1
 80011ee:	60ba      	str	r2, [r7, #8]
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	3301      	adds	r3, #1
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	429a      	cmp	r2, r3
 8001204:	dbf1      	blt.n	80011ea <_write+0x12>
  }
  return len;
 8001206:	687b      	ldr	r3, [r7, #4]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <_close>:

int _close(int file)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001218:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001238:	605a      	str	r2, [r3, #4]
  return 0;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <_isatty>:

int _isatty(int file)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001250:	2301      	movs	r3, #1
}
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800125e:	b480      	push	{r7}
 8001260:	b085      	sub	sp, #20
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001280:	4a14      	ldr	r2, [pc, #80]	@ (80012d4 <_sbrk+0x5c>)
 8001282:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <_sbrk+0x60>)
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800128c:	4b13      	ldr	r3, [pc, #76]	@ (80012dc <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001294:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <_sbrk+0x64>)
 8001296:	4a12      	ldr	r2, [pc, #72]	@ (80012e0 <_sbrk+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129a:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d207      	bcs.n	80012b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a8:	f001 fe90 	bl	8002fcc <__errno>
 80012ac:	4603      	mov	r3, r0
 80012ae:	220c      	movs	r2, #12
 80012b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012b6:	e009      	b.n	80012cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a05      	ldr	r2, [pc, #20]	@ (80012dc <_sbrk+0x64>)
 80012c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	24080000 	.word	0x24080000
 80012d8:	00000400 	.word	0x00000400
 80012dc:	2401d54c 	.word	0x2401d54c
 80012e0:	2401d6a0 	.word	0x2401d6a0

080012e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012e8:	4b37      	ldr	r3, [pc, #220]	@ (80013c8 <SystemInit+0xe4>)
 80012ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012ee:	4a36      	ldr	r2, [pc, #216]	@ (80013c8 <SystemInit+0xe4>)
 80012f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012f8:	4b34      	ldr	r3, [pc, #208]	@ (80013cc <SystemInit+0xe8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 030f 	and.w	r3, r3, #15
 8001300:	2b06      	cmp	r3, #6
 8001302:	d807      	bhi.n	8001314 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001304:	4b31      	ldr	r3, [pc, #196]	@ (80013cc <SystemInit+0xe8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f023 030f 	bic.w	r3, r3, #15
 800130c:	4a2f      	ldr	r2, [pc, #188]	@ (80013cc <SystemInit+0xe8>)
 800130e:	f043 0307 	orr.w	r3, r3, #7
 8001312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001314:	4b2e      	ldr	r3, [pc, #184]	@ (80013d0 <SystemInit+0xec>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a2d      	ldr	r2, [pc, #180]	@ (80013d0 <SystemInit+0xec>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001320:	4b2b      	ldr	r3, [pc, #172]	@ (80013d0 <SystemInit+0xec>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001326:	4b2a      	ldr	r3, [pc, #168]	@ (80013d0 <SystemInit+0xec>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4929      	ldr	r1, [pc, #164]	@ (80013d0 <SystemInit+0xec>)
 800132c:	4b29      	ldr	r3, [pc, #164]	@ (80013d4 <SystemInit+0xf0>)
 800132e:	4013      	ands	r3, r2
 8001330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001332:	4b26      	ldr	r3, [pc, #152]	@ (80013cc <SystemInit+0xe8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d007      	beq.n	800134e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800133e:	4b23      	ldr	r3, [pc, #140]	@ (80013cc <SystemInit+0xe8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f023 030f 	bic.w	r3, r3, #15
 8001346:	4a21      	ldr	r2, [pc, #132]	@ (80013cc <SystemInit+0xe8>)
 8001348:	f043 0307 	orr.w	r3, r3, #7
 800134c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800134e:	4b20      	ldr	r3, [pc, #128]	@ (80013d0 <SystemInit+0xec>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001354:	4b1e      	ldr	r3, [pc, #120]	@ (80013d0 <SystemInit+0xec>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800135a:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <SystemInit+0xec>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001360:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <SystemInit+0xec>)
 8001362:	4a1d      	ldr	r2, [pc, #116]	@ (80013d8 <SystemInit+0xf4>)
 8001364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001366:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <SystemInit+0xec>)
 8001368:	4a1c      	ldr	r2, [pc, #112]	@ (80013dc <SystemInit+0xf8>)
 800136a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800136c:	4b18      	ldr	r3, [pc, #96]	@ (80013d0 <SystemInit+0xec>)
 800136e:	4a1c      	ldr	r2, [pc, #112]	@ (80013e0 <SystemInit+0xfc>)
 8001370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001372:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <SystemInit+0xec>)
 8001374:	2200      	movs	r2, #0
 8001376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001378:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <SystemInit+0xec>)
 800137a:	4a19      	ldr	r2, [pc, #100]	@ (80013e0 <SystemInit+0xfc>)
 800137c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800137e:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <SystemInit+0xec>)
 8001380:	2200      	movs	r2, #0
 8001382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001384:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <SystemInit+0xec>)
 8001386:	4a16      	ldr	r2, [pc, #88]	@ (80013e0 <SystemInit+0xfc>)
 8001388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800138a:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <SystemInit+0xec>)
 800138c:	2200      	movs	r2, #0
 800138e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001390:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <SystemInit+0xec>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0e      	ldr	r2, [pc, #56]	@ (80013d0 <SystemInit+0xec>)
 8001396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800139a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <SystemInit+0xec>)
 800139e:	2200      	movs	r2, #0
 80013a0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013a2:	4b10      	ldr	r3, [pc, #64]	@ (80013e4 <SystemInit+0x100>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <SystemInit+0x104>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013ae:	d202      	bcs.n	80013b6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013b0:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <SystemInit+0x108>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <SystemInit+0x10c>)
 80013b8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80013bc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	52002000 	.word	0x52002000
 80013d0:	58024400 	.word	0x58024400
 80013d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80013d8:	02020200 	.word	0x02020200
 80013dc:	01ff0000 	.word	0x01ff0000
 80013e0:	01010280 	.word	0x01010280
 80013e4:	5c001000 	.word	0x5c001000
 80013e8:	ffff0000 	.word	0xffff0000
 80013ec:	51008108 	.word	0x51008108
 80013f0:	52004000 	.word	0x52004000

080013f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800142c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013f8:	f7ff ff74 	bl	80012e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013fc:	480c      	ldr	r0, [pc, #48]	@ (8001430 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013fe:	490d      	ldr	r1, [pc, #52]	@ (8001434 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001400:	4a0d      	ldr	r2, [pc, #52]	@ (8001438 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001404:	e002      	b.n	800140c <LoopCopyDataInit>

08001406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140a:	3304      	adds	r3, #4

0800140c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800140c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001410:	d3f9      	bcc.n	8001406 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001412:	4a0a      	ldr	r2, [pc, #40]	@ (800143c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001414:	4c0a      	ldr	r4, [pc, #40]	@ (8001440 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001418:	e001      	b.n	800141e <LoopFillZerobss>

0800141a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800141c:	3204      	adds	r2, #4

0800141e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001420:	d3fb      	bcc.n	800141a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001422:	f001 fdd9 	bl	8002fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001426:	f7ff f82d 	bl	8000484 <main>
  bx  lr
 800142a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800142c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001430:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001434:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001438:	08003e94 	.word	0x08003e94
  ldr r2, =_sbss
 800143c:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001440:	2401d6a0 	.word	0x2401d6a0

08001444 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001444:	e7fe      	b.n	8001444 <ADC3_IRQHandler>
	...

08001448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144e:	2003      	movs	r0, #3
 8001450:	f000 f96e 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001454:	f001 f998 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 8001458:	4602      	mov	r2, r0
 800145a:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <HAL_Init+0x68>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	0a1b      	lsrs	r3, r3, #8
 8001460:	f003 030f 	and.w	r3, r3, #15
 8001464:	4913      	ldr	r1, [pc, #76]	@ (80014b4 <HAL_Init+0x6c>)
 8001466:	5ccb      	ldrb	r3, [r1, r3]
 8001468:	f003 031f 	and.w	r3, r3, #31
 800146c:	fa22 f303 	lsr.w	r3, r2, r3
 8001470:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001472:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <HAL_Init+0x68>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	4a0e      	ldr	r2, [pc, #56]	@ (80014b4 <HAL_Init+0x6c>)
 800147c:	5cd3      	ldrb	r3, [r2, r3]
 800147e:	f003 031f 	and.w	r3, r3, #31
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	fa22 f303 	lsr.w	r3, r2, r3
 8001488:	4a0b      	ldr	r2, [pc, #44]	@ (80014b8 <HAL_Init+0x70>)
 800148a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800148c:	4a0b      	ldr	r2, [pc, #44]	@ (80014bc <HAL_Init+0x74>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001492:	200f      	movs	r0, #15
 8001494:	f000 f814 	bl	80014c0 <HAL_InitTick>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e002      	b.n	80014a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014a2:	f7ff fc6b 	bl	8000d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	58024400 	.word	0x58024400
 80014b4:	08003d94 	.word	0x08003d94
 80014b8:	24000008 	.word	0x24000008
 80014bc:	24000004 	.word	0x24000004

080014c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014c8:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <HAL_InitTick+0x60>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e021      	b.n	8001518 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014d4:	4b13      	ldr	r3, [pc, #76]	@ (8001524 <HAL_InitTick+0x64>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <HAL_InitTick+0x60>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f945 	bl	800177a <HAL_SYSTICK_Config>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00e      	b.n	8001518 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d80a      	bhi.n	8001516 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001500:	2200      	movs	r2, #0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001508:	f000 f91d 	bl	8001746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800150c:	4a06      	ldr	r2, [pc, #24]	@ (8001528 <HAL_InitTick+0x68>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	e000      	b.n	8001518 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	24000010 	.word	0x24000010
 8001524:	24000004 	.word	0x24000004
 8001528:	2400000c 	.word	0x2400000c

0800152c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_IncTick+0x20>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <HAL_IncTick+0x24>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a04      	ldr	r2, [pc, #16]	@ (8001550 <HAL_IncTick+0x24>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	24000010 	.word	0x24000010
 8001550:	2401d550 	.word	0x2401d550

08001554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b03      	ldr	r3, [pc, #12]	@ (8001568 <HAL_GetTick+0x14>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	2401d550 	.word	0x2401d550

0800156c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001574:	f7ff ffee 	bl	8001554 <HAL_GetTick>
 8001578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001584:	d005      	beq.n	8001592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001586:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <HAL_Delay+0x44>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001592:	bf00      	nop
 8001594:	f7ff ffde 	bl	8001554 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d8f7      	bhi.n	8001594 <HAL_Delay+0x28>
  {
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	24000010 	.word	0x24000010

080015b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015b8:	4b03      	ldr	r3, [pc, #12]	@ (80015c8 <HAL_GetREVID+0x14>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	0c1b      	lsrs	r3, r3, #16
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	5c001000 	.word	0x5c001000

080015cc <__NVIC_SetPriorityGrouping>:
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015dc:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <__NVIC_SetPriorityGrouping+0x40>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015e8:	4013      	ands	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fa:	4a04      	ldr	r2, [pc, #16]	@ (800160c <__NVIC_SetPriorityGrouping+0x40>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	60d3      	str	r3, [r2, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00
 8001610:	05fa0000 	.word	0x05fa0000

08001614 <__NVIC_GetPriorityGrouping>:
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001618:	4b04      	ldr	r3, [pc, #16]	@ (800162c <__NVIC_GetPriorityGrouping+0x18>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	f003 0307 	and.w	r3, r3, #7
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_SetPriority>:
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800163c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001640:	2b00      	cmp	r3, #0
 8001642:	db0a      	blt.n	800165a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	490c      	ldr	r1, [pc, #48]	@ (800167c <__NVIC_SetPriority+0x4c>)
 800164a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800164e:	0112      	lsls	r2, r2, #4
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	440b      	add	r3, r1
 8001654:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001658:	e00a      	b.n	8001670 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4908      	ldr	r1, [pc, #32]	@ (8001680 <__NVIC_SetPriority+0x50>)
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	3b04      	subs	r3, #4
 8001668:	0112      	lsls	r2, r2, #4
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	440b      	add	r3, r1
 800166e:	761a      	strb	r2, [r3, #24]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000e100 	.word	0xe000e100
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <NVIC_EncodePriority>:
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	@ 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f1c3 0307 	rsb	r3, r3, #7
 800169e:	2b04      	cmp	r3, #4
 80016a0:	bf28      	it	cs
 80016a2:	2304      	movcs	r3, #4
 80016a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3304      	adds	r3, #4
 80016aa:	2b06      	cmp	r3, #6
 80016ac:	d902      	bls.n	80016b4 <NVIC_EncodePriority+0x30>
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3b03      	subs	r3, #3
 80016b2:	e000      	b.n	80016b6 <NVIC_EncodePriority+0x32>
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43da      	mvns	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	401a      	ands	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	43d9      	mvns	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	4313      	orrs	r3, r2
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3724      	adds	r7, #36	@ 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016fc:	d301      	bcc.n	8001702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fe:	2301      	movs	r3, #1
 8001700:	e00f      	b.n	8001722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001702:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <SysTick_Config+0x40>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170a:	210f      	movs	r1, #15
 800170c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001710:	f7ff ff8e 	bl	8001630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001714:	4b05      	ldr	r3, [pc, #20]	@ (800172c <SysTick_Config+0x40>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	4b04      	ldr	r3, [pc, #16]	@ (800172c <SysTick_Config+0x40>)
 800171c:	2207      	movs	r2, #7
 800171e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	e000e010 	.word	0xe000e010

08001730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff47 	bl	80015cc <__NVIC_SetPriorityGrouping>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001754:	f7ff ff5e 	bl	8001614 <__NVIC_GetPriorityGrouping>
 8001758:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	68b9      	ldr	r1, [r7, #8]
 800175e:	6978      	ldr	r0, [r7, #20]
 8001760:	f7ff ff90 	bl	8001684 <NVIC_EncodePriority>
 8001764:	4602      	mov	r2, r0
 8001766:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff5f 	bl	8001630 <__NVIC_SetPriority>
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff ffb2 	bl	80016ec <SysTick_Config>
 8001788:	4603      	mov	r3, r0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	@ 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80017a2:	4b89      	ldr	r3, [pc, #548]	@ (80019c8 <HAL_GPIO_Init+0x234>)
 80017a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017a6:	e194      	b.n	8001ad2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2101      	movs	r1, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8186 	beq.w	8001acc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d005      	beq.n	80017d8 <HAL_GPIO_Init+0x44>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d130      	bne.n	800183a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800180e:	2201      	movs	r2, #1
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	f003 0201 	and.w	r2, r3, #1
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b03      	cmp	r3, #3
 8001844:	d017      	beq.n	8001876 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d123      	bne.n	80018ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	08da      	lsrs	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3208      	adds	r2, #8
 800188a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	220f      	movs	r2, #15
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	691a      	ldr	r2, [r3, #16]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	08da      	lsrs	r2, r3, #3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3208      	adds	r2, #8
 80018c4:	69b9      	ldr	r1, [r7, #24]
 80018c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0203 	and.w	r2, r3, #3
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 80e0 	beq.w	8001acc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190c:	4b2f      	ldr	r3, [pc, #188]	@ (80019cc <HAL_GPIO_Init+0x238>)
 800190e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001912:	4a2e      	ldr	r2, [pc, #184]	@ (80019cc <HAL_GPIO_Init+0x238>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800191c:	4b2b      	ldr	r3, [pc, #172]	@ (80019cc <HAL_GPIO_Init+0x238>)
 800191e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800192a:	4a29      	ldr	r2, [pc, #164]	@ (80019d0 <HAL_GPIO_Init+0x23c>)
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3302      	adds	r3, #2
 8001932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	220f      	movs	r2, #15
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a20      	ldr	r2, [pc, #128]	@ (80019d4 <HAL_GPIO_Init+0x240>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d052      	beq.n	80019fc <HAL_GPIO_Init+0x268>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a1f      	ldr	r2, [pc, #124]	@ (80019d8 <HAL_GPIO_Init+0x244>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d031      	beq.n	80019c2 <HAL_GPIO_Init+0x22e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a1e      	ldr	r2, [pc, #120]	@ (80019dc <HAL_GPIO_Init+0x248>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d02b      	beq.n	80019be <HAL_GPIO_Init+0x22a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a1d      	ldr	r2, [pc, #116]	@ (80019e0 <HAL_GPIO_Init+0x24c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d025      	beq.n	80019ba <HAL_GPIO_Init+0x226>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a1c      	ldr	r2, [pc, #112]	@ (80019e4 <HAL_GPIO_Init+0x250>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d01f      	beq.n	80019b6 <HAL_GPIO_Init+0x222>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a1b      	ldr	r2, [pc, #108]	@ (80019e8 <HAL_GPIO_Init+0x254>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d019      	beq.n	80019b2 <HAL_GPIO_Init+0x21e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a1a      	ldr	r2, [pc, #104]	@ (80019ec <HAL_GPIO_Init+0x258>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d013      	beq.n	80019ae <HAL_GPIO_Init+0x21a>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a19      	ldr	r2, [pc, #100]	@ (80019f0 <HAL_GPIO_Init+0x25c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d00d      	beq.n	80019aa <HAL_GPIO_Init+0x216>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a18      	ldr	r2, [pc, #96]	@ (80019f4 <HAL_GPIO_Init+0x260>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d007      	beq.n	80019a6 <HAL_GPIO_Init+0x212>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a17      	ldr	r2, [pc, #92]	@ (80019f8 <HAL_GPIO_Init+0x264>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d101      	bne.n	80019a2 <HAL_GPIO_Init+0x20e>
 800199e:	2309      	movs	r3, #9
 80019a0:	e02d      	b.n	80019fe <HAL_GPIO_Init+0x26a>
 80019a2:	230a      	movs	r3, #10
 80019a4:	e02b      	b.n	80019fe <HAL_GPIO_Init+0x26a>
 80019a6:	2308      	movs	r3, #8
 80019a8:	e029      	b.n	80019fe <HAL_GPIO_Init+0x26a>
 80019aa:	2307      	movs	r3, #7
 80019ac:	e027      	b.n	80019fe <HAL_GPIO_Init+0x26a>
 80019ae:	2306      	movs	r3, #6
 80019b0:	e025      	b.n	80019fe <HAL_GPIO_Init+0x26a>
 80019b2:	2305      	movs	r3, #5
 80019b4:	e023      	b.n	80019fe <HAL_GPIO_Init+0x26a>
 80019b6:	2304      	movs	r3, #4
 80019b8:	e021      	b.n	80019fe <HAL_GPIO_Init+0x26a>
 80019ba:	2303      	movs	r3, #3
 80019bc:	e01f      	b.n	80019fe <HAL_GPIO_Init+0x26a>
 80019be:	2302      	movs	r3, #2
 80019c0:	e01d      	b.n	80019fe <HAL_GPIO_Init+0x26a>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e01b      	b.n	80019fe <HAL_GPIO_Init+0x26a>
 80019c6:	bf00      	nop
 80019c8:	58000080 	.word	0x58000080
 80019cc:	58024400 	.word	0x58024400
 80019d0:	58000400 	.word	0x58000400
 80019d4:	58020000 	.word	0x58020000
 80019d8:	58020400 	.word	0x58020400
 80019dc:	58020800 	.word	0x58020800
 80019e0:	58020c00 	.word	0x58020c00
 80019e4:	58021000 	.word	0x58021000
 80019e8:	58021400 	.word	0x58021400
 80019ec:	58021800 	.word	0x58021800
 80019f0:	58021c00 	.word	0x58021c00
 80019f4:	58022000 	.word	0x58022000
 80019f8:	58022400 	.word	0x58022400
 80019fc:	2300      	movs	r3, #0
 80019fe:	69fa      	ldr	r2, [r7, #28]
 8001a00:	f002 0203 	and.w	r2, r2, #3
 8001a04:	0092      	lsls	r2, r2, #2
 8001a06:	4093      	lsls	r3, r2
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a0e:	4938      	ldr	r1, [pc, #224]	@ (8001af0 <HAL_GPIO_Init+0x35c>)
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	3302      	adds	r3, #2
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f47f ae63 	bne.w	80017a8 <HAL_GPIO_Init+0x14>
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	bf00      	nop
 8001ae6:	3724      	adds	r7, #36	@ 0x24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	58000400 	.word	0x58000400

08001af4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001afc:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <HAL_PWREx_ConfigSupply+0x70>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d00a      	beq.n	8001b1e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001b08:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <HAL_PWREx_ConfigSupply+0x70>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d001      	beq.n	8001b1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e01f      	b.n	8001b5a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e01d      	b.n	8001b5a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001b1e:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <HAL_PWREx_ConfigSupply+0x70>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	f023 0207 	bic.w	r2, r3, #7
 8001b26:	490f      	ldr	r1, [pc, #60]	@ (8001b64 <HAL_PWREx_ConfigSupply+0x70>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001b2e:	f7ff fd11 	bl	8001554 <HAL_GetTick>
 8001b32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b34:	e009      	b.n	8001b4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b36:	f7ff fd0d 	bl	8001554 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b44:	d901      	bls.n	8001b4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e007      	b.n	8001b5a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b4a:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <HAL_PWREx_ConfigSupply+0x70>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b56:	d1ee      	bne.n	8001b36 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	58024800 	.word	0x58024800

08001b68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08c      	sub	sp, #48	@ 0x30
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d102      	bne.n	8001b7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	f000 bc48 	b.w	800240c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 8088 	beq.w	8001c9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b8a:	4b99      	ldr	r3, [pc, #612]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b94:	4b96      	ldr	r3, [pc, #600]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b98:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b9c:	2b10      	cmp	r3, #16
 8001b9e:	d007      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x48>
 8001ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ba2:	2b18      	cmp	r3, #24
 8001ba4:	d111      	bne.n	8001bca <HAL_RCC_OscConfig+0x62>
 8001ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d10c      	bne.n	8001bca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb0:	4b8f      	ldr	r3, [pc, #572]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d06d      	beq.n	8001c98 <HAL_RCC_OscConfig+0x130>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d169      	bne.n	8001c98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	f000 bc21 	b.w	800240c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bd2:	d106      	bne.n	8001be2 <HAL_RCC_OscConfig+0x7a>
 8001bd4:	4b86      	ldr	r3, [pc, #536]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a85      	ldr	r2, [pc, #532]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001bda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	e02e      	b.n	8001c40 <HAL_RCC_OscConfig+0xd8>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x9c>
 8001bea:	4b81      	ldr	r3, [pc, #516]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a80      	ldr	r2, [pc, #512]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001bf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	4b7e      	ldr	r3, [pc, #504]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a7d      	ldr	r2, [pc, #500]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001bfc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	e01d      	b.n	8001c40 <HAL_RCC_OscConfig+0xd8>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0xc0>
 8001c0e:	4b78      	ldr	r3, [pc, #480]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a77      	ldr	r2, [pc, #476]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b75      	ldr	r3, [pc, #468]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a74      	ldr	r2, [pc, #464]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e00b      	b.n	8001c40 <HAL_RCC_OscConfig+0xd8>
 8001c28:	4b71      	ldr	r3, [pc, #452]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a70      	ldr	r2, [pc, #448]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b6e      	ldr	r3, [pc, #440]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a6d      	ldr	r2, [pc, #436]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001c3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d013      	beq.n	8001c70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7ff fc84 	bl	8001554 <HAL_GetTick>
 8001c4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c50:	f7ff fc80 	bl	8001554 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	@ 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e3d4      	b.n	800240c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c62:	4b63      	ldr	r3, [pc, #396]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0xe8>
 8001c6e:	e014      	b.n	8001c9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff fc70 	bl	8001554 <HAL_GetTick>
 8001c74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c78:	f7ff fc6c 	bl	8001554 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	@ 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e3c0      	b.n	800240c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c8a:	4b59      	ldr	r3, [pc, #356]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x110>
 8001c96:	e000      	b.n	8001c9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 80ca 	beq.w	8001e3c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ca8:	4b51      	ldr	r3, [pc, #324]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cb0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cb2:	4b4f      	ldr	r3, [pc, #316]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d007      	beq.n	8001cce <HAL_RCC_OscConfig+0x166>
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	2b18      	cmp	r3, #24
 8001cc2:	d156      	bne.n	8001d72 <HAL_RCC_OscConfig+0x20a>
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d151      	bne.n	8001d72 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cce:	4b48      	ldr	r3, [pc, #288]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d005      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x17e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e392      	b.n	800240c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ce6:	4b42      	ldr	r3, [pc, #264]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 0219 	bic.w	r2, r3, #25
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	493f      	ldr	r1, [pc, #252]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf8:	f7ff fc2c 	bl	8001554 <HAL_GetTick>
 8001cfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d00:	f7ff fc28 	bl	8001554 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e37c      	b.n	800240c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d12:	4b37      	ldr	r3, [pc, #220]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1e:	f7ff fc49 	bl	80015b4 <HAL_GetREVID>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d817      	bhi.n	8001d5c <HAL_RCC_OscConfig+0x1f4>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	2b40      	cmp	r3, #64	@ 0x40
 8001d32:	d108      	bne.n	8001d46 <HAL_RCC_OscConfig+0x1de>
 8001d34:	4b2e      	ldr	r3, [pc, #184]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d42:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d44:	e07a      	b.n	8001e3c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d46:	4b2a      	ldr	r3, [pc, #168]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	031b      	lsls	r3, r3, #12
 8001d54:	4926      	ldr	r1, [pc, #152]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d5a:	e06f      	b.n	8001e3c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	4b24      	ldr	r3, [pc, #144]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	061b      	lsls	r3, r3, #24
 8001d6a:	4921      	ldr	r1, [pc, #132]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d70:	e064      	b.n	8001e3c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d047      	beq.n	8001e0a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 0219 	bic.w	r2, r3, #25
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	491a      	ldr	r1, [pc, #104]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fbe2 	bl	8001554 <HAL_GetTick>
 8001d90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d94:	f7ff fbde 	bl	8001554 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e332      	b.n	800240c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001da6:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db2:	f7ff fbff 	bl	80015b4 <HAL_GetREVID>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d819      	bhi.n	8001df4 <HAL_RCC_OscConfig+0x28c>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	2b40      	cmp	r3, #64	@ 0x40
 8001dc6:	d108      	bne.n	8001dda <HAL_RCC_OscConfig+0x272>
 8001dc8:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001dd0:	4a07      	ldr	r2, [pc, #28]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001dd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dd6:	6053      	str	r3, [r2, #4]
 8001dd8:	e030      	b.n	8001e3c <HAL_RCC_OscConfig+0x2d4>
 8001dda:	4b05      	ldr	r3, [pc, #20]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	031b      	lsls	r3, r3, #12
 8001de8:	4901      	ldr	r1, [pc, #4]	@ (8001df0 <HAL_RCC_OscConfig+0x288>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	604b      	str	r3, [r1, #4]
 8001dee:	e025      	b.n	8001e3c <HAL_RCC_OscConfig+0x2d4>
 8001df0:	58024400 	.word	0x58024400
 8001df4:	4b9a      	ldr	r3, [pc, #616]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	061b      	lsls	r3, r3, #24
 8001e02:	4997      	ldr	r1, [pc, #604]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
 8001e08:	e018      	b.n	8001e3c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e0a:	4b95      	ldr	r3, [pc, #596]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a94      	ldr	r2, [pc, #592]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e16:	f7ff fb9d 	bl	8001554 <HAL_GetTick>
 8001e1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1e:	f7ff fb99 	bl	8001554 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e2ed      	b.n	800240c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e30:	4b8b      	ldr	r3, [pc, #556]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1f0      	bne.n	8001e1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 80a9 	beq.w	8001f9c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e4a:	4b85      	ldr	r3, [pc, #532]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e52:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e54:	4b82      	ldr	r3, [pc, #520]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e58:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d007      	beq.n	8001e70 <HAL_RCC_OscConfig+0x308>
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	2b18      	cmp	r3, #24
 8001e64:	d13a      	bne.n	8001edc <HAL_RCC_OscConfig+0x374>
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d135      	bne.n	8001edc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e70:	4b7b      	ldr	r3, [pc, #492]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <HAL_RCC_OscConfig+0x320>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	2b80      	cmp	r3, #128	@ 0x80
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e2c1      	b.n	800240c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e88:	f7ff fb94 	bl	80015b4 <HAL_GetREVID>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d817      	bhi.n	8001ec6 <HAL_RCC_OscConfig+0x35e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	d108      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x348>
 8001e9e:	4b70      	ldr	r3, [pc, #448]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001ea6:	4a6e      	ldr	r2, [pc, #440]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001ea8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001eac:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001eae:	e075      	b.n	8001f9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001eb0:	4b6b      	ldr	r3, [pc, #428]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	069b      	lsls	r3, r3, #26
 8001ebe:	4968      	ldr	r1, [pc, #416]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ec4:	e06a      	b.n	8001f9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ec6:	4b66      	ldr	r3, [pc, #408]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	061b      	lsls	r3, r3, #24
 8001ed4:	4962      	ldr	r1, [pc, #392]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001eda:	e05f      	b.n	8001f9c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d042      	beq.n	8001f6a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ee4:	4b5e      	ldr	r3, [pc, #376]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a5d      	ldr	r2, [pc, #372]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001eea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fb30 	bl	8001554 <HAL_GetTick>
 8001ef4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ef8:	f7ff fb2c 	bl	8001554 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e280      	b.n	800240c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f0a:	4b55      	ldr	r3, [pc, #340]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f16:	f7ff fb4d 	bl	80015b4 <HAL_GetREVID>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d817      	bhi.n	8001f54 <HAL_RCC_OscConfig+0x3ec>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	2b20      	cmp	r3, #32
 8001f2a:	d108      	bne.n	8001f3e <HAL_RCC_OscConfig+0x3d6>
 8001f2c:	4b4c      	ldr	r3, [pc, #304]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001f34:	4a4a      	ldr	r2, [pc, #296]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001f36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f3a:	6053      	str	r3, [r2, #4]
 8001f3c:	e02e      	b.n	8001f9c <HAL_RCC_OscConfig+0x434>
 8001f3e:	4b48      	ldr	r3, [pc, #288]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	069b      	lsls	r3, r3, #26
 8001f4c:	4944      	ldr	r1, [pc, #272]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	604b      	str	r3, [r1, #4]
 8001f52:	e023      	b.n	8001f9c <HAL_RCC_OscConfig+0x434>
 8001f54:	4b42      	ldr	r3, [pc, #264]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	061b      	lsls	r3, r3, #24
 8001f62:	493f      	ldr	r1, [pc, #252]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60cb      	str	r3, [r1, #12]
 8001f68:	e018      	b.n	8001f9c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f6a:	4b3d      	ldr	r3, [pc, #244]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a3c      	ldr	r2, [pc, #240]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001f70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7ff faed 	bl	8001554 <HAL_GetTick>
 8001f7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f7e:	f7ff fae9 	bl	8001554 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e23d      	b.n	800240c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f90:	4b33      	ldr	r3, [pc, #204]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f0      	bne.n	8001f7e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d036      	beq.n	8002016 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d019      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001fb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fb4:	4a2a      	ldr	r2, [pc, #168]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbc:	f7ff faca 	bl	8001554 <HAL_GetTick>
 8001fc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc4:	f7ff fac6 	bl	8001554 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e21a      	b.n	800240c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fd6:	4b22      	ldr	r3, [pc, #136]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001fd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x45c>
 8001fe2:	e018      	b.n	8002016 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001fe6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8001fea:	f023 0301 	bic.w	r3, r3, #1
 8001fee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff0:	f7ff fab0 	bl	8001554 <HAL_GetTick>
 8001ff4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff8:	f7ff faac 	bl	8001554 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e200      	b.n	800240c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800200a:	4b15      	ldr	r3, [pc, #84]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 800200c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0320 	and.w	r3, r3, #32
 800201e:	2b00      	cmp	r3, #0
 8002020:	d039      	beq.n	8002096 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d01c      	beq.n	8002064 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800202a:	4b0d      	ldr	r3, [pc, #52]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a0c      	ldr	r2, [pc, #48]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8002030:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002034:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002036:	f7ff fa8d 	bl	8001554 <HAL_GetTick>
 800203a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800203e:	f7ff fa89 	bl	8001554 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e1dd      	b.n	800240c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002050:	4b03      	ldr	r3, [pc, #12]	@ (8002060 <HAL_RCC_OscConfig+0x4f8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x4d6>
 800205c:	e01b      	b.n	8002096 <HAL_RCC_OscConfig+0x52e>
 800205e:	bf00      	nop
 8002060:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002064:	4b9b      	ldr	r3, [pc, #620]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a9a      	ldr	r2, [pc, #616]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 800206a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800206e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002070:	f7ff fa70 	bl	8001554 <HAL_GetTick>
 8002074:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002078:	f7ff fa6c 	bl	8001554 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e1c0      	b.n	800240c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800208a:	4b92      	ldr	r3, [pc, #584]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 8081 	beq.w	80021a6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020a4:	4b8c      	ldr	r3, [pc, #560]	@ (80022d8 <HAL_RCC_OscConfig+0x770>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a8b      	ldr	r2, [pc, #556]	@ (80022d8 <HAL_RCC_OscConfig+0x770>)
 80020aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020b0:	f7ff fa50 	bl	8001554 <HAL_GetTick>
 80020b4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b8:	f7ff fa4c 	bl	8001554 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	@ 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e1a0      	b.n	800240c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020ca:	4b83      	ldr	r3, [pc, #524]	@ (80022d8 <HAL_RCC_OscConfig+0x770>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d106      	bne.n	80020ec <HAL_RCC_OscConfig+0x584>
 80020de:	4b7d      	ldr	r3, [pc, #500]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e2:	4a7c      	ldr	r2, [pc, #496]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ea:	e02d      	b.n	8002148 <HAL_RCC_OscConfig+0x5e0>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10c      	bne.n	800210e <HAL_RCC_OscConfig+0x5a6>
 80020f4:	4b77      	ldr	r3, [pc, #476]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 80020f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f8:	4a76      	ldr	r2, [pc, #472]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002100:	4b74      	ldr	r3, [pc, #464]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 8002102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002104:	4a73      	ldr	r2, [pc, #460]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 8002106:	f023 0304 	bic.w	r3, r3, #4
 800210a:	6713      	str	r3, [r2, #112]	@ 0x70
 800210c:	e01c      	b.n	8002148 <HAL_RCC_OscConfig+0x5e0>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b05      	cmp	r3, #5
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x5c8>
 8002116:	4b6f      	ldr	r3, [pc, #444]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211a:	4a6e      	ldr	r2, [pc, #440]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 800211c:	f043 0304 	orr.w	r3, r3, #4
 8002120:	6713      	str	r3, [r2, #112]	@ 0x70
 8002122:	4b6c      	ldr	r3, [pc, #432]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002126:	4a6b      	ldr	r2, [pc, #428]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6713      	str	r3, [r2, #112]	@ 0x70
 800212e:	e00b      	b.n	8002148 <HAL_RCC_OscConfig+0x5e0>
 8002130:	4b68      	ldr	r3, [pc, #416]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002134:	4a67      	ldr	r2, [pc, #412]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 8002136:	f023 0301 	bic.w	r3, r3, #1
 800213a:	6713      	str	r3, [r2, #112]	@ 0x70
 800213c:	4b65      	ldr	r3, [pc, #404]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002140:	4a64      	ldr	r2, [pc, #400]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 8002142:	f023 0304 	bic.w	r3, r3, #4
 8002146:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d015      	beq.n	800217c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002150:	f7ff fa00 	bl	8001554 <HAL_GetTick>
 8002154:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002156:	e00a      	b.n	800216e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002158:	f7ff f9fc 	bl	8001554 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e14e      	b.n	800240c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800216e:	4b59      	ldr	r3, [pc, #356]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0ee      	beq.n	8002158 <HAL_RCC_OscConfig+0x5f0>
 800217a:	e014      	b.n	80021a6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217c:	f7ff f9ea 	bl	8001554 <HAL_GetTick>
 8002180:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002182:	e00a      	b.n	800219a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002184:	f7ff f9e6 	bl	8001554 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e138      	b.n	800240c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800219a:	4b4e      	ldr	r3, [pc, #312]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1ee      	bne.n	8002184 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 812d 	beq.w	800240a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80021b0:	4b48      	ldr	r3, [pc, #288]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021b8:	2b18      	cmp	r3, #24
 80021ba:	f000 80bd 	beq.w	8002338 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	f040 809e 	bne.w	8002304 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c8:	4b42      	ldr	r3, [pc, #264]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a41      	ldr	r2, [pc, #260]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 80021ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7ff f9be 	bl	8001554 <HAL_GetTick>
 80021d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021dc:	f7ff f9ba 	bl	8001554 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e10e      	b.n	800240c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021ee:	4b39      	ldr	r3, [pc, #228]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021fa:	4b36      	ldr	r3, [pc, #216]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 80021fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021fe:	4b37      	ldr	r3, [pc, #220]	@ (80022dc <HAL_RCC_OscConfig+0x774>)
 8002200:	4013      	ands	r3, r2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800220a:	0112      	lsls	r2, r2, #4
 800220c:	430a      	orrs	r2, r1
 800220e:	4931      	ldr	r1, [pc, #196]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 8002210:	4313      	orrs	r3, r2
 8002212:	628b      	str	r3, [r1, #40]	@ 0x28
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002218:	3b01      	subs	r3, #1
 800221a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002222:	3b01      	subs	r3, #1
 8002224:	025b      	lsls	r3, r3, #9
 8002226:	b29b      	uxth	r3, r3
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800222e:	3b01      	subs	r3, #1
 8002230:	041b      	lsls	r3, r3, #16
 8002232:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800223c:	3b01      	subs	r3, #1
 800223e:	061b      	lsls	r3, r3, #24
 8002240:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002244:	4923      	ldr	r1, [pc, #140]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 8002246:	4313      	orrs	r3, r2
 8002248:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800224a:	4b22      	ldr	r3, [pc, #136]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 800224c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224e:	4a21      	ldr	r2, [pc, #132]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002256:	4b1f      	ldr	r3, [pc, #124]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 8002258:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800225a:	4b21      	ldr	r3, [pc, #132]	@ (80022e0 <HAL_RCC_OscConfig+0x778>)
 800225c:	4013      	ands	r3, r2
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002262:	00d2      	lsls	r2, r2, #3
 8002264:	491b      	ldr	r1, [pc, #108]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 8002266:	4313      	orrs	r3, r2
 8002268:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800226a:	4b1a      	ldr	r3, [pc, #104]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 800226c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226e:	f023 020c 	bic.w	r2, r3, #12
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	4917      	ldr	r1, [pc, #92]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 8002278:	4313      	orrs	r3, r2
 800227a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800227c:	4b15      	ldr	r3, [pc, #84]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 800227e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002280:	f023 0202 	bic.w	r2, r3, #2
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002288:	4912      	ldr	r1, [pc, #72]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 800228a:	4313      	orrs	r3, r2
 800228c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800228e:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 8002290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002292:	4a10      	ldr	r2, [pc, #64]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002298:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800229a:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 800229c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229e:	4a0d      	ldr	r2, [pc, #52]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80022a6:	4b0b      	ldr	r3, [pc, #44]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 80022a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022aa:	4a0a      	ldr	r2, [pc, #40]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 80022ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80022b2:	4b08      	ldr	r3, [pc, #32]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 80022b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b6:	4a07      	ldr	r2, [pc, #28]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022be:	4b05      	ldr	r3, [pc, #20]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a04      	ldr	r2, [pc, #16]	@ (80022d4 <HAL_RCC_OscConfig+0x76c>)
 80022c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ca:	f7ff f943 	bl	8001554 <HAL_GetTick>
 80022ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022d0:	e011      	b.n	80022f6 <HAL_RCC_OscConfig+0x78e>
 80022d2:	bf00      	nop
 80022d4:	58024400 	.word	0x58024400
 80022d8:	58024800 	.word	0x58024800
 80022dc:	fffffc0c 	.word	0xfffffc0c
 80022e0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e4:	f7ff f936 	bl	8001554 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e08a      	b.n	800240c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022f6:	4b47      	ldr	r3, [pc, #284]	@ (8002414 <HAL_RCC_OscConfig+0x8ac>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0x77c>
 8002302:	e082      	b.n	800240a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002304:	4b43      	ldr	r3, [pc, #268]	@ (8002414 <HAL_RCC_OscConfig+0x8ac>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a42      	ldr	r2, [pc, #264]	@ (8002414 <HAL_RCC_OscConfig+0x8ac>)
 800230a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800230e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7ff f920 	bl	8001554 <HAL_GetTick>
 8002314:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002318:	f7ff f91c 	bl	8001554 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e070      	b.n	800240c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800232a:	4b3a      	ldr	r3, [pc, #232]	@ (8002414 <HAL_RCC_OscConfig+0x8ac>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x7b0>
 8002336:	e068      	b.n	800240a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002338:	4b36      	ldr	r3, [pc, #216]	@ (8002414 <HAL_RCC_OscConfig+0x8ac>)
 800233a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800233e:	4b35      	ldr	r3, [pc, #212]	@ (8002414 <HAL_RCC_OscConfig+0x8ac>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002348:	2b01      	cmp	r3, #1
 800234a:	d031      	beq.n	80023b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	f003 0203 	and.w	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d12a      	bne.n	80023b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d122      	bne.n	80023b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002374:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002376:	429a      	cmp	r2, r3
 8002378:	d11a      	bne.n	80023b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	0a5b      	lsrs	r3, r3, #9
 800237e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002386:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002388:	429a      	cmp	r2, r3
 800238a:	d111      	bne.n	80023b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	0c1b      	lsrs	r3, r3, #16
 8002390:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002398:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800239a:	429a      	cmp	r2, r3
 800239c:	d108      	bne.n	80023b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	0e1b      	lsrs	r3, r3, #24
 80023a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e02b      	b.n	800240c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80023b4:	4b17      	ldr	r3, [pc, #92]	@ (8002414 <HAL_RCC_OscConfig+0x8ac>)
 80023b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b8:	08db      	lsrs	r3, r3, #3
 80023ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023be:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d01f      	beq.n	800240a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80023ca:	4b12      	ldr	r3, [pc, #72]	@ (8002414 <HAL_RCC_OscConfig+0x8ac>)
 80023cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ce:	4a11      	ldr	r2, [pc, #68]	@ (8002414 <HAL_RCC_OscConfig+0x8ac>)
 80023d0:	f023 0301 	bic.w	r3, r3, #1
 80023d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023d6:	f7ff f8bd 	bl	8001554 <HAL_GetTick>
 80023da:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80023dc:	bf00      	nop
 80023de:	f7ff f8b9 	bl	8001554 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d0f9      	beq.n	80023de <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <HAL_RCC_OscConfig+0x8ac>)
 80023ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002418 <HAL_RCC_OscConfig+0x8b0>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023f6:	00d2      	lsls	r2, r2, #3
 80023f8:	4906      	ldr	r1, [pc, #24]	@ (8002414 <HAL_RCC_OscConfig+0x8ac>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80023fe:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <HAL_RCC_OscConfig+0x8ac>)
 8002400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002402:	4a04      	ldr	r2, [pc, #16]	@ (8002414 <HAL_RCC_OscConfig+0x8ac>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3730      	adds	r7, #48	@ 0x30
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	58024400 	.word	0x58024400
 8002418:	ffff0007 	.word	0xffff0007

0800241c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e19c      	b.n	800276a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002430:	4b8a      	ldr	r3, [pc, #552]	@ (800265c <HAL_RCC_ClockConfig+0x240>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d910      	bls.n	8002460 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b87      	ldr	r3, [pc, #540]	@ (800265c <HAL_RCC_ClockConfig+0x240>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 020f 	bic.w	r2, r3, #15
 8002446:	4985      	ldr	r1, [pc, #532]	@ (800265c <HAL_RCC_ClockConfig+0x240>)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	4b83      	ldr	r3, [pc, #524]	@ (800265c <HAL_RCC_ClockConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e184      	b.n	800276a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d010      	beq.n	800248e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	4b7b      	ldr	r3, [pc, #492]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002478:	429a      	cmp	r2, r3
 800247a:	d908      	bls.n	800248e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800247c:	4b78      	ldr	r3, [pc, #480]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	4975      	ldr	r1, [pc, #468]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 800248a:	4313      	orrs	r3, r2
 800248c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d010      	beq.n	80024bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	4b70      	ldr	r3, [pc, #448]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d908      	bls.n	80024bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	496a      	ldr	r1, [pc, #424]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d010      	beq.n	80024ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699a      	ldr	r2, [r3, #24]
 80024cc:	4b64      	ldr	r3, [pc, #400]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d908      	bls.n	80024ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024d8:	4b61      	ldr	r3, [pc, #388]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	495e      	ldr	r1, [pc, #376]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d010      	beq.n	8002518 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	4b59      	ldr	r3, [pc, #356]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002502:	429a      	cmp	r2, r3
 8002504:	d908      	bls.n	8002518 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002506:	4b56      	ldr	r3, [pc, #344]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	4953      	ldr	r1, [pc, #332]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 8002514:	4313      	orrs	r3, r2
 8002516:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d010      	beq.n	8002546 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	4b4d      	ldr	r3, [pc, #308]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	429a      	cmp	r2, r3
 8002532:	d908      	bls.n	8002546 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002534:	4b4a      	ldr	r3, [pc, #296]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f023 020f 	bic.w	r2, r3, #15
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4947      	ldr	r1, [pc, #284]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 8002542:	4313      	orrs	r3, r2
 8002544:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d055      	beq.n	80025fe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002552:	4b43      	ldr	r3, [pc, #268]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	4940      	ldr	r1, [pc, #256]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 8002560:	4313      	orrs	r3, r2
 8002562:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b02      	cmp	r3, #2
 800256a:	d107      	bne.n	800257c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800256c:	4b3c      	ldr	r3, [pc, #240]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d121      	bne.n	80025bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0f6      	b.n	800276a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b03      	cmp	r3, #3
 8002582:	d107      	bne.n	8002594 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002584:	4b36      	ldr	r3, [pc, #216]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d115      	bne.n	80025bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0ea      	b.n	800276a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d107      	bne.n	80025ac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800259c:	4b30      	ldr	r3, [pc, #192]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d109      	bne.n	80025bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0de      	b.n	800276a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0d6      	b.n	800276a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025bc:	4b28      	ldr	r3, [pc, #160]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	f023 0207 	bic.w	r2, r3, #7
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4925      	ldr	r1, [pc, #148]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ce:	f7fe ffc1 	bl	8001554 <HAL_GetTick>
 80025d2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d6:	f7fe ffbd 	bl	8001554 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e0be      	b.n	800276a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d1eb      	bne.n	80025d6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d010      	beq.n	800262c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	4b14      	ldr	r3, [pc, #80]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	429a      	cmp	r2, r3
 8002618:	d208      	bcs.n	800262c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800261a:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f023 020f 	bic.w	r2, r3, #15
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	490e      	ldr	r1, [pc, #56]	@ (8002660 <HAL_RCC_ClockConfig+0x244>)
 8002628:	4313      	orrs	r3, r2
 800262a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800262c:	4b0b      	ldr	r3, [pc, #44]	@ (800265c <HAL_RCC_ClockConfig+0x240>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d214      	bcs.n	8002664 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b08      	ldr	r3, [pc, #32]	@ (800265c <HAL_RCC_ClockConfig+0x240>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 020f 	bic.w	r2, r3, #15
 8002642:	4906      	ldr	r1, [pc, #24]	@ (800265c <HAL_RCC_ClockConfig+0x240>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b04      	ldr	r3, [pc, #16]	@ (800265c <HAL_RCC_ClockConfig+0x240>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d005      	beq.n	8002664 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e086      	b.n	800276a <HAL_RCC_ClockConfig+0x34e>
 800265c:	52002000 	.word	0x52002000
 8002660:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d010      	beq.n	8002692 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	4b3f      	ldr	r3, [pc, #252]	@ (8002774 <HAL_RCC_ClockConfig+0x358>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800267c:	429a      	cmp	r2, r3
 800267e:	d208      	bcs.n	8002692 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002680:	4b3c      	ldr	r3, [pc, #240]	@ (8002774 <HAL_RCC_ClockConfig+0x358>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	4939      	ldr	r1, [pc, #228]	@ (8002774 <HAL_RCC_ClockConfig+0x358>)
 800268e:	4313      	orrs	r3, r2
 8002690:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d010      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	4b34      	ldr	r3, [pc, #208]	@ (8002774 <HAL_RCC_ClockConfig+0x358>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d208      	bcs.n	80026c0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026ae:	4b31      	ldr	r3, [pc, #196]	@ (8002774 <HAL_RCC_ClockConfig+0x358>)
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	492e      	ldr	r1, [pc, #184]	@ (8002774 <HAL_RCC_ClockConfig+0x358>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d010      	beq.n	80026ee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699a      	ldr	r2, [r3, #24]
 80026d0:	4b28      	ldr	r3, [pc, #160]	@ (8002774 <HAL_RCC_ClockConfig+0x358>)
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80026d8:	429a      	cmp	r2, r3
 80026da:	d208      	bcs.n	80026ee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026dc:	4b25      	ldr	r3, [pc, #148]	@ (8002774 <HAL_RCC_ClockConfig+0x358>)
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	4922      	ldr	r1, [pc, #136]	@ (8002774 <HAL_RCC_ClockConfig+0x358>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d010      	beq.n	800271c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69da      	ldr	r2, [r3, #28]
 80026fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002774 <HAL_RCC_ClockConfig+0x358>)
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002706:	429a      	cmp	r2, r3
 8002708:	d208      	bcs.n	800271c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800270a:	4b1a      	ldr	r3, [pc, #104]	@ (8002774 <HAL_RCC_ClockConfig+0x358>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4917      	ldr	r1, [pc, #92]	@ (8002774 <HAL_RCC_ClockConfig+0x358>)
 8002718:	4313      	orrs	r3, r2
 800271a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800271c:	f000 f834 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 8002720:	4602      	mov	r2, r0
 8002722:	4b14      	ldr	r3, [pc, #80]	@ (8002774 <HAL_RCC_ClockConfig+0x358>)
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	4912      	ldr	r1, [pc, #72]	@ (8002778 <HAL_RCC_ClockConfig+0x35c>)
 800272e:	5ccb      	ldrb	r3, [r1, r3]
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
 8002738:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800273a:	4b0e      	ldr	r3, [pc, #56]	@ (8002774 <HAL_RCC_ClockConfig+0x358>)
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	4a0d      	ldr	r2, [pc, #52]	@ (8002778 <HAL_RCC_ClockConfig+0x35c>)
 8002744:	5cd3      	ldrb	r3, [r2, r3]
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	fa22 f303 	lsr.w	r3, r2, r3
 8002750:	4a0a      	ldr	r2, [pc, #40]	@ (800277c <HAL_RCC_ClockConfig+0x360>)
 8002752:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002754:	4a0a      	ldr	r2, [pc, #40]	@ (8002780 <HAL_RCC_ClockConfig+0x364>)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800275a:	4b0a      	ldr	r3, [pc, #40]	@ (8002784 <HAL_RCC_ClockConfig+0x368>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe feae 	bl	80014c0 <HAL_InitTick>
 8002764:	4603      	mov	r3, r0
 8002766:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002768:	7bfb      	ldrb	r3, [r7, #15]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	58024400 	.word	0x58024400
 8002778:	08003d94 	.word	0x08003d94
 800277c:	24000008 	.word	0x24000008
 8002780:	24000004 	.word	0x24000004
 8002784:	2400000c 	.word	0x2400000c

08002788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002788:	b480      	push	{r7}
 800278a:	b089      	sub	sp, #36	@ 0x24
 800278c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800278e:	4bb3      	ldr	r3, [pc, #716]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002796:	2b18      	cmp	r3, #24
 8002798:	f200 8155 	bhi.w	8002a46 <HAL_RCC_GetSysClockFreq+0x2be>
 800279c:	a201      	add	r2, pc, #4	@ (adr r2, 80027a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800279e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a2:	bf00      	nop
 80027a4:	08002809 	.word	0x08002809
 80027a8:	08002a47 	.word	0x08002a47
 80027ac:	08002a47 	.word	0x08002a47
 80027b0:	08002a47 	.word	0x08002a47
 80027b4:	08002a47 	.word	0x08002a47
 80027b8:	08002a47 	.word	0x08002a47
 80027bc:	08002a47 	.word	0x08002a47
 80027c0:	08002a47 	.word	0x08002a47
 80027c4:	0800282f 	.word	0x0800282f
 80027c8:	08002a47 	.word	0x08002a47
 80027cc:	08002a47 	.word	0x08002a47
 80027d0:	08002a47 	.word	0x08002a47
 80027d4:	08002a47 	.word	0x08002a47
 80027d8:	08002a47 	.word	0x08002a47
 80027dc:	08002a47 	.word	0x08002a47
 80027e0:	08002a47 	.word	0x08002a47
 80027e4:	08002835 	.word	0x08002835
 80027e8:	08002a47 	.word	0x08002a47
 80027ec:	08002a47 	.word	0x08002a47
 80027f0:	08002a47 	.word	0x08002a47
 80027f4:	08002a47 	.word	0x08002a47
 80027f8:	08002a47 	.word	0x08002a47
 80027fc:	08002a47 	.word	0x08002a47
 8002800:	08002a47 	.word	0x08002a47
 8002804:	0800283b 	.word	0x0800283b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002808:	4b94      	ldr	r3, [pc, #592]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b00      	cmp	r3, #0
 8002812:	d009      	beq.n	8002828 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002814:	4b91      	ldr	r3, [pc, #580]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	08db      	lsrs	r3, r3, #3
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	4a90      	ldr	r2, [pc, #576]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002820:	fa22 f303 	lsr.w	r3, r2, r3
 8002824:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002826:	e111      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002828:	4b8d      	ldr	r3, [pc, #564]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800282a:	61bb      	str	r3, [r7, #24]
      break;
 800282c:	e10e      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800282e:	4b8d      	ldr	r3, [pc, #564]	@ (8002a64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002830:	61bb      	str	r3, [r7, #24]
      break;
 8002832:	e10b      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002834:	4b8c      	ldr	r3, [pc, #560]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002836:	61bb      	str	r3, [r7, #24]
      break;
 8002838:	e108      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800283a:	4b88      	ldr	r3, [pc, #544]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800283c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002844:	4b85      	ldr	r3, [pc, #532]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800284e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002850:	4b82      	ldr	r3, [pc, #520]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800285a:	4b80      	ldr	r3, [pc, #512]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800285c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800285e:	08db      	lsrs	r3, r3, #3
 8002860:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	fb02 f303 	mul.w	r3, r2, r3
 800286a:	ee07 3a90 	vmov	s15, r3
 800286e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002872:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80e1 	beq.w	8002a40 <HAL_RCC_GetSysClockFreq+0x2b8>
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2b02      	cmp	r3, #2
 8002882:	f000 8083 	beq.w	800298c <HAL_RCC_GetSysClockFreq+0x204>
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b02      	cmp	r3, #2
 800288a:	f200 80a1 	bhi.w	80029d0 <HAL_RCC_GetSysClockFreq+0x248>
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0x114>
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d056      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x1c0>
 800289a:	e099      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800289c:	4b6f      	ldr	r3, [pc, #444]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d02d      	beq.n	8002904 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80028a8:	4b6c      	ldr	r3, [pc, #432]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	08db      	lsrs	r3, r3, #3
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	4a6b      	ldr	r2, [pc, #428]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
 80028b8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	ee07 3a90 	vmov	s15, r3
 80028c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	ee07 3a90 	vmov	s15, r3
 80028ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028d2:	4b62      	ldr	r3, [pc, #392]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028da:	ee07 3a90 	vmov	s15, r3
 80028de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80028e6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002a6c <HAL_RCC_GetSysClockFreq+0x2e4>
 80028ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002902:	e087      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	ee07 3a90 	vmov	s15, r3
 800290a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800290e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002a70 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002916:	4b51      	ldr	r3, [pc, #324]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002926:	ed97 6a02 	vldr	s12, [r7, #8]
 800292a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002a6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800292e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002936:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800293a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800293e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002942:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002946:	e065      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	ee07 3a90 	vmov	s15, r3
 800294e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002952:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002a74 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800295a:	4b40      	ldr	r3, [pc, #256]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002962:	ee07 3a90 	vmov	s15, r3
 8002966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800296a:	ed97 6a02 	vldr	s12, [r7, #8]
 800296e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002a6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800297a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800297e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002986:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800298a:	e043      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002996:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002a78 <HAL_RCC_GetSysClockFreq+0x2f0>
 800299a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800299e:	4b2f      	ldr	r3, [pc, #188]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029a6:	ee07 3a90 	vmov	s15, r3
 80029aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80029b2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002a6c <HAL_RCC_GetSysClockFreq+0x2e4>
 80029b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029ce:	e021      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	ee07 3a90 	vmov	s15, r3
 80029d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029da:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002a74 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029e2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ea:	ee07 3a90 	vmov	s15, r3
 80029ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80029f6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002a6c <HAL_RCC_GetSysClockFreq+0x2e4>
 80029fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a12:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002a14:	4b11      	ldr	r3, [pc, #68]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a18:	0a5b      	lsrs	r3, r3, #9
 8002a1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a1e:	3301      	adds	r3, #1
 8002a20:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	ee07 3a90 	vmov	s15, r3
 8002a28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a38:	ee17 3a90 	vmov	r3, s15
 8002a3c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002a3e:	e005      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61bb      	str	r3, [r7, #24]
      break;
 8002a44:	e002      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002a46:	4b07      	ldr	r3, [pc, #28]	@ (8002a64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a48:	61bb      	str	r3, [r7, #24]
      break;
 8002a4a:	bf00      	nop
  }

  return sysclockfreq;
 8002a4c:	69bb      	ldr	r3, [r7, #24]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3724      	adds	r7, #36	@ 0x24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	58024400 	.word	0x58024400
 8002a60:	03d09000 	.word	0x03d09000
 8002a64:	003d0900 	.word	0x003d0900
 8002a68:	017d7840 	.word	0x017d7840
 8002a6c:	46000000 	.word	0x46000000
 8002a70:	4c742400 	.word	0x4c742400
 8002a74:	4a742400 	.word	0x4a742400
 8002a78:	4bbebc20 	.word	0x4bbebc20

08002a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e049      	b.n	8002b22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d106      	bne.n	8002aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f841 	bl	8002b2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4610      	mov	r0, r2
 8002abc:	f000 f8d8 	bl	8002c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d001      	beq.n	8002b58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e04c      	b.n	8002bf2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a26      	ldr	r2, [pc, #152]	@ (8002c00 <HAL_TIM_Base_Start+0xc0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d022      	beq.n	8002bb0 <HAL_TIM_Base_Start+0x70>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b72:	d01d      	beq.n	8002bb0 <HAL_TIM_Base_Start+0x70>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a22      	ldr	r2, [pc, #136]	@ (8002c04 <HAL_TIM_Base_Start+0xc4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d018      	beq.n	8002bb0 <HAL_TIM_Base_Start+0x70>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a21      	ldr	r2, [pc, #132]	@ (8002c08 <HAL_TIM_Base_Start+0xc8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d013      	beq.n	8002bb0 <HAL_TIM_Base_Start+0x70>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8002c0c <HAL_TIM_Base_Start+0xcc>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00e      	beq.n	8002bb0 <HAL_TIM_Base_Start+0x70>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a1e      	ldr	r2, [pc, #120]	@ (8002c10 <HAL_TIM_Base_Start+0xd0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d009      	beq.n	8002bb0 <HAL_TIM_Base_Start+0x70>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1c      	ldr	r2, [pc, #112]	@ (8002c14 <HAL_TIM_Base_Start+0xd4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d004      	beq.n	8002bb0 <HAL_TIM_Base_Start+0x70>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1b      	ldr	r2, [pc, #108]	@ (8002c18 <HAL_TIM_Base_Start+0xd8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d115      	bne.n	8002bdc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	4b19      	ldr	r3, [pc, #100]	@ (8002c1c <HAL_TIM_Base_Start+0xdc>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b06      	cmp	r3, #6
 8002bc0:	d015      	beq.n	8002bee <HAL_TIM_Base_Start+0xae>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc8:	d011      	beq.n	8002bee <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 0201 	orr.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bda:	e008      	b.n	8002bee <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	e000      	b.n	8002bf0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40010000 	.word	0x40010000
 8002c04:	40000400 	.word	0x40000400
 8002c08:	40000800 	.word	0x40000800
 8002c0c:	40000c00 	.word	0x40000c00
 8002c10:	40010400 	.word	0x40010400
 8002c14:	40001800 	.word	0x40001800
 8002c18:	40014000 	.word	0x40014000
 8002c1c:	00010007 	.word	0x00010007

08002c20 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6a1a      	ldr	r2, [r3, #32]
 8002c2e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10f      	bne.n	8002c58 <HAL_TIM_Base_Stop+0x38>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6a1a      	ldr	r2, [r3, #32]
 8002c3e:	f240 4344 	movw	r3, #1092	@ 0x444
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d107      	bne.n	8002c58 <HAL_TIM_Base_Stop+0x38>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a46      	ldr	r2, [pc, #280]	@ (8002d9c <TIM_Base_SetConfig+0x12c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d013      	beq.n	8002cb0 <TIM_Base_SetConfig+0x40>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c8e:	d00f      	beq.n	8002cb0 <TIM_Base_SetConfig+0x40>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a43      	ldr	r2, [pc, #268]	@ (8002da0 <TIM_Base_SetConfig+0x130>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00b      	beq.n	8002cb0 <TIM_Base_SetConfig+0x40>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a42      	ldr	r2, [pc, #264]	@ (8002da4 <TIM_Base_SetConfig+0x134>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d007      	beq.n	8002cb0 <TIM_Base_SetConfig+0x40>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a41      	ldr	r2, [pc, #260]	@ (8002da8 <TIM_Base_SetConfig+0x138>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d003      	beq.n	8002cb0 <TIM_Base_SetConfig+0x40>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a40      	ldr	r2, [pc, #256]	@ (8002dac <TIM_Base_SetConfig+0x13c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d108      	bne.n	8002cc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a35      	ldr	r2, [pc, #212]	@ (8002d9c <TIM_Base_SetConfig+0x12c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d01f      	beq.n	8002d0a <TIM_Base_SetConfig+0x9a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cd0:	d01b      	beq.n	8002d0a <TIM_Base_SetConfig+0x9a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a32      	ldr	r2, [pc, #200]	@ (8002da0 <TIM_Base_SetConfig+0x130>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d017      	beq.n	8002d0a <TIM_Base_SetConfig+0x9a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a31      	ldr	r2, [pc, #196]	@ (8002da4 <TIM_Base_SetConfig+0x134>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <TIM_Base_SetConfig+0x9a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a30      	ldr	r2, [pc, #192]	@ (8002da8 <TIM_Base_SetConfig+0x138>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00f      	beq.n	8002d0a <TIM_Base_SetConfig+0x9a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a2f      	ldr	r2, [pc, #188]	@ (8002dac <TIM_Base_SetConfig+0x13c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00b      	beq.n	8002d0a <TIM_Base_SetConfig+0x9a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a2e      	ldr	r2, [pc, #184]	@ (8002db0 <TIM_Base_SetConfig+0x140>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d007      	beq.n	8002d0a <TIM_Base_SetConfig+0x9a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a2d      	ldr	r2, [pc, #180]	@ (8002db4 <TIM_Base_SetConfig+0x144>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d003      	beq.n	8002d0a <TIM_Base_SetConfig+0x9a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a2c      	ldr	r2, [pc, #176]	@ (8002db8 <TIM_Base_SetConfig+0x148>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d108      	bne.n	8002d1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a16      	ldr	r2, [pc, #88]	@ (8002d9c <TIM_Base_SetConfig+0x12c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00f      	beq.n	8002d68 <TIM_Base_SetConfig+0xf8>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a18      	ldr	r2, [pc, #96]	@ (8002dac <TIM_Base_SetConfig+0x13c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d00b      	beq.n	8002d68 <TIM_Base_SetConfig+0xf8>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a17      	ldr	r2, [pc, #92]	@ (8002db0 <TIM_Base_SetConfig+0x140>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d007      	beq.n	8002d68 <TIM_Base_SetConfig+0xf8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a16      	ldr	r2, [pc, #88]	@ (8002db4 <TIM_Base_SetConfig+0x144>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d003      	beq.n	8002d68 <TIM_Base_SetConfig+0xf8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a15      	ldr	r2, [pc, #84]	@ (8002db8 <TIM_Base_SetConfig+0x148>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d103      	bne.n	8002d70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d105      	bne.n	8002d8e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f023 0201 	bic.w	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	611a      	str	r2, [r3, #16]
  }
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	40000400 	.word	0x40000400
 8002da4:	40000800 	.word	0x40000800
 8002da8:	40000c00 	.word	0x40000c00
 8002dac:	40010400 	.word	0x40010400
 8002db0:	40014000 	.word	0x40014000
 8002db4:	40014400 	.word	0x40014400
 8002db8:	40014800 	.word	0x40014800

08002dbc <rand>:
 8002dbc:	4b16      	ldr	r3, [pc, #88]	@ (8002e18 <rand+0x5c>)
 8002dbe:	b510      	push	{r4, lr}
 8002dc0:	681c      	ldr	r4, [r3, #0]
 8002dc2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002dc4:	b9b3      	cbnz	r3, 8002df4 <rand+0x38>
 8002dc6:	2018      	movs	r0, #24
 8002dc8:	f000 f94c 	bl	8003064 <malloc>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	6320      	str	r0, [r4, #48]	@ 0x30
 8002dd0:	b920      	cbnz	r0, 8002ddc <rand+0x20>
 8002dd2:	4b12      	ldr	r3, [pc, #72]	@ (8002e1c <rand+0x60>)
 8002dd4:	4812      	ldr	r0, [pc, #72]	@ (8002e20 <rand+0x64>)
 8002dd6:	2152      	movs	r1, #82	@ 0x52
 8002dd8:	f000 f926 	bl	8003028 <__assert_func>
 8002ddc:	4911      	ldr	r1, [pc, #68]	@ (8002e24 <rand+0x68>)
 8002dde:	4b12      	ldr	r3, [pc, #72]	@ (8002e28 <rand+0x6c>)
 8002de0:	e9c0 1300 	strd	r1, r3, [r0]
 8002de4:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <rand+0x70>)
 8002de6:	6083      	str	r3, [r0, #8]
 8002de8:	230b      	movs	r3, #11
 8002dea:	8183      	strh	r3, [r0, #12]
 8002dec:	2100      	movs	r1, #0
 8002dee:	2001      	movs	r0, #1
 8002df0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002df4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002df6:	480e      	ldr	r0, [pc, #56]	@ (8002e30 <rand+0x74>)
 8002df8:	690b      	ldr	r3, [r1, #16]
 8002dfa:	694c      	ldr	r4, [r1, #20]
 8002dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002e34 <rand+0x78>)
 8002dfe:	4358      	muls	r0, r3
 8002e00:	fb02 0004 	mla	r0, r2, r4, r0
 8002e04:	fba3 3202 	umull	r3, r2, r3, r2
 8002e08:	3301      	adds	r3, #1
 8002e0a:	eb40 0002 	adc.w	r0, r0, r2
 8002e0e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8002e12:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002e16:	bd10      	pop	{r4, pc}
 8002e18:	24000020 	.word	0x24000020
 8002e1c:	08003da4 	.word	0x08003da4
 8002e20:	08003dbb 	.word	0x08003dbb
 8002e24:	abcd330e 	.word	0xabcd330e
 8002e28:	e66d1234 	.word	0xe66d1234
 8002e2c:	0005deec 	.word	0x0005deec
 8002e30:	5851f42d 	.word	0x5851f42d
 8002e34:	4c957f2d 	.word	0x4c957f2d

08002e38 <std>:
 8002e38:	2300      	movs	r3, #0
 8002e3a:	b510      	push	{r4, lr}
 8002e3c:	4604      	mov	r4, r0
 8002e3e:	e9c0 3300 	strd	r3, r3, [r0]
 8002e42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e46:	6083      	str	r3, [r0, #8]
 8002e48:	8181      	strh	r1, [r0, #12]
 8002e4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002e4c:	81c2      	strh	r2, [r0, #14]
 8002e4e:	6183      	str	r3, [r0, #24]
 8002e50:	4619      	mov	r1, r3
 8002e52:	2208      	movs	r2, #8
 8002e54:	305c      	adds	r0, #92	@ 0x5c
 8002e56:	f000 f8b1 	bl	8002fbc <memset>
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e90 <std+0x58>)
 8002e5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e94 <std+0x5c>)
 8002e60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002e62:	4b0d      	ldr	r3, [pc, #52]	@ (8002e98 <std+0x60>)
 8002e64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002e66:	4b0d      	ldr	r3, [pc, #52]	@ (8002e9c <std+0x64>)
 8002e68:	6323      	str	r3, [r4, #48]	@ 0x30
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea0 <std+0x68>)
 8002e6c:	6224      	str	r4, [r4, #32]
 8002e6e:	429c      	cmp	r4, r3
 8002e70:	d006      	beq.n	8002e80 <std+0x48>
 8002e72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002e76:	4294      	cmp	r4, r2
 8002e78:	d002      	beq.n	8002e80 <std+0x48>
 8002e7a:	33d0      	adds	r3, #208	@ 0xd0
 8002e7c:	429c      	cmp	r4, r3
 8002e7e:	d105      	bne.n	8002e8c <std+0x54>
 8002e80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e88:	f000 b8ca 	b.w	8003020 <__retarget_lock_init_recursive>
 8002e8c:	bd10      	pop	{r4, pc}
 8002e8e:	bf00      	nop
 8002e90:	08003329 	.word	0x08003329
 8002e94:	0800334b 	.word	0x0800334b
 8002e98:	08003383 	.word	0x08003383
 8002e9c:	080033a7 	.word	0x080033a7
 8002ea0:	2401d554 	.word	0x2401d554

08002ea4 <stdio_exit_handler>:
 8002ea4:	4a02      	ldr	r2, [pc, #8]	@ (8002eb0 <stdio_exit_handler+0xc>)
 8002ea6:	4903      	ldr	r1, [pc, #12]	@ (8002eb4 <stdio_exit_handler+0x10>)
 8002ea8:	4803      	ldr	r0, [pc, #12]	@ (8002eb8 <stdio_exit_handler+0x14>)
 8002eaa:	f000 b869 	b.w	8002f80 <_fwalk_sglue>
 8002eae:	bf00      	nop
 8002eb0:	24000014 	.word	0x24000014
 8002eb4:	080032c1 	.word	0x080032c1
 8002eb8:	24000024 	.word	0x24000024

08002ebc <cleanup_stdio>:
 8002ebc:	6841      	ldr	r1, [r0, #4]
 8002ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef0 <cleanup_stdio+0x34>)
 8002ec0:	4299      	cmp	r1, r3
 8002ec2:	b510      	push	{r4, lr}
 8002ec4:	4604      	mov	r4, r0
 8002ec6:	d001      	beq.n	8002ecc <cleanup_stdio+0x10>
 8002ec8:	f000 f9fa 	bl	80032c0 <_fflush_r>
 8002ecc:	68a1      	ldr	r1, [r4, #8]
 8002ece:	4b09      	ldr	r3, [pc, #36]	@ (8002ef4 <cleanup_stdio+0x38>)
 8002ed0:	4299      	cmp	r1, r3
 8002ed2:	d002      	beq.n	8002eda <cleanup_stdio+0x1e>
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	f000 f9f3 	bl	80032c0 <_fflush_r>
 8002eda:	68e1      	ldr	r1, [r4, #12]
 8002edc:	4b06      	ldr	r3, [pc, #24]	@ (8002ef8 <cleanup_stdio+0x3c>)
 8002ede:	4299      	cmp	r1, r3
 8002ee0:	d004      	beq.n	8002eec <cleanup_stdio+0x30>
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ee8:	f000 b9ea 	b.w	80032c0 <_fflush_r>
 8002eec:	bd10      	pop	{r4, pc}
 8002eee:	bf00      	nop
 8002ef0:	2401d554 	.word	0x2401d554
 8002ef4:	2401d5bc 	.word	0x2401d5bc
 8002ef8:	2401d624 	.word	0x2401d624

08002efc <global_stdio_init.part.0>:
 8002efc:	b510      	push	{r4, lr}
 8002efe:	4b0b      	ldr	r3, [pc, #44]	@ (8002f2c <global_stdio_init.part.0+0x30>)
 8002f00:	4c0b      	ldr	r4, [pc, #44]	@ (8002f30 <global_stdio_init.part.0+0x34>)
 8002f02:	4a0c      	ldr	r2, [pc, #48]	@ (8002f34 <global_stdio_init.part.0+0x38>)
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	4620      	mov	r0, r4
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2104      	movs	r1, #4
 8002f0c:	f7ff ff94 	bl	8002e38 <std>
 8002f10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002f14:	2201      	movs	r2, #1
 8002f16:	2109      	movs	r1, #9
 8002f18:	f7ff ff8e 	bl	8002e38 <std>
 8002f1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002f20:	2202      	movs	r2, #2
 8002f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f26:	2112      	movs	r1, #18
 8002f28:	f7ff bf86 	b.w	8002e38 <std>
 8002f2c:	2401d68c 	.word	0x2401d68c
 8002f30:	2401d554 	.word	0x2401d554
 8002f34:	08002ea5 	.word	0x08002ea5

08002f38 <__sfp_lock_acquire>:
 8002f38:	4801      	ldr	r0, [pc, #4]	@ (8002f40 <__sfp_lock_acquire+0x8>)
 8002f3a:	f000 b872 	b.w	8003022 <__retarget_lock_acquire_recursive>
 8002f3e:	bf00      	nop
 8002f40:	2401d691 	.word	0x2401d691

08002f44 <__sfp_lock_release>:
 8002f44:	4801      	ldr	r0, [pc, #4]	@ (8002f4c <__sfp_lock_release+0x8>)
 8002f46:	f000 b86d 	b.w	8003024 <__retarget_lock_release_recursive>
 8002f4a:	bf00      	nop
 8002f4c:	2401d691 	.word	0x2401d691

08002f50 <__sinit>:
 8002f50:	b510      	push	{r4, lr}
 8002f52:	4604      	mov	r4, r0
 8002f54:	f7ff fff0 	bl	8002f38 <__sfp_lock_acquire>
 8002f58:	6a23      	ldr	r3, [r4, #32]
 8002f5a:	b11b      	cbz	r3, 8002f64 <__sinit+0x14>
 8002f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f60:	f7ff bff0 	b.w	8002f44 <__sfp_lock_release>
 8002f64:	4b04      	ldr	r3, [pc, #16]	@ (8002f78 <__sinit+0x28>)
 8002f66:	6223      	str	r3, [r4, #32]
 8002f68:	4b04      	ldr	r3, [pc, #16]	@ (8002f7c <__sinit+0x2c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f5      	bne.n	8002f5c <__sinit+0xc>
 8002f70:	f7ff ffc4 	bl	8002efc <global_stdio_init.part.0>
 8002f74:	e7f2      	b.n	8002f5c <__sinit+0xc>
 8002f76:	bf00      	nop
 8002f78:	08002ebd 	.word	0x08002ebd
 8002f7c:	2401d68c 	.word	0x2401d68c

08002f80 <_fwalk_sglue>:
 8002f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f84:	4607      	mov	r7, r0
 8002f86:	4688      	mov	r8, r1
 8002f88:	4614      	mov	r4, r2
 8002f8a:	2600      	movs	r6, #0
 8002f8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f90:	f1b9 0901 	subs.w	r9, r9, #1
 8002f94:	d505      	bpl.n	8002fa2 <_fwalk_sglue+0x22>
 8002f96:	6824      	ldr	r4, [r4, #0]
 8002f98:	2c00      	cmp	r4, #0
 8002f9a:	d1f7      	bne.n	8002f8c <_fwalk_sglue+0xc>
 8002f9c:	4630      	mov	r0, r6
 8002f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fa2:	89ab      	ldrh	r3, [r5, #12]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d907      	bls.n	8002fb8 <_fwalk_sglue+0x38>
 8002fa8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002fac:	3301      	adds	r3, #1
 8002fae:	d003      	beq.n	8002fb8 <_fwalk_sglue+0x38>
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	4638      	mov	r0, r7
 8002fb4:	47c0      	blx	r8
 8002fb6:	4306      	orrs	r6, r0
 8002fb8:	3568      	adds	r5, #104	@ 0x68
 8002fba:	e7e9      	b.n	8002f90 <_fwalk_sglue+0x10>

08002fbc <memset>:
 8002fbc:	4402      	add	r2, r0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d100      	bne.n	8002fc6 <memset+0xa>
 8002fc4:	4770      	bx	lr
 8002fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fca:	e7f9      	b.n	8002fc0 <memset+0x4>

08002fcc <__errno>:
 8002fcc:	4b01      	ldr	r3, [pc, #4]	@ (8002fd4 <__errno+0x8>)
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	24000020 	.word	0x24000020

08002fd8 <__libc_init_array>:
 8002fd8:	b570      	push	{r4, r5, r6, lr}
 8002fda:	4d0d      	ldr	r5, [pc, #52]	@ (8003010 <__libc_init_array+0x38>)
 8002fdc:	4c0d      	ldr	r4, [pc, #52]	@ (8003014 <__libc_init_array+0x3c>)
 8002fde:	1b64      	subs	r4, r4, r5
 8002fe0:	10a4      	asrs	r4, r4, #2
 8002fe2:	2600      	movs	r6, #0
 8002fe4:	42a6      	cmp	r6, r4
 8002fe6:	d109      	bne.n	8002ffc <__libc_init_array+0x24>
 8002fe8:	4d0b      	ldr	r5, [pc, #44]	@ (8003018 <__libc_init_array+0x40>)
 8002fea:	4c0c      	ldr	r4, [pc, #48]	@ (800301c <__libc_init_array+0x44>)
 8002fec:	f000 fec6 	bl	8003d7c <_init>
 8002ff0:	1b64      	subs	r4, r4, r5
 8002ff2:	10a4      	asrs	r4, r4, #2
 8002ff4:	2600      	movs	r6, #0
 8002ff6:	42a6      	cmp	r6, r4
 8002ff8:	d105      	bne.n	8003006 <__libc_init_array+0x2e>
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
 8002ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003000:	4798      	blx	r3
 8003002:	3601      	adds	r6, #1
 8003004:	e7ee      	b.n	8002fe4 <__libc_init_array+0xc>
 8003006:	f855 3b04 	ldr.w	r3, [r5], #4
 800300a:	4798      	blx	r3
 800300c:	3601      	adds	r6, #1
 800300e:	e7f2      	b.n	8002ff6 <__libc_init_array+0x1e>
 8003010:	08003e8c 	.word	0x08003e8c
 8003014:	08003e8c 	.word	0x08003e8c
 8003018:	08003e8c 	.word	0x08003e8c
 800301c:	08003e90 	.word	0x08003e90

08003020 <__retarget_lock_init_recursive>:
 8003020:	4770      	bx	lr

08003022 <__retarget_lock_acquire_recursive>:
 8003022:	4770      	bx	lr

08003024 <__retarget_lock_release_recursive>:
 8003024:	4770      	bx	lr
	...

08003028 <__assert_func>:
 8003028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800302a:	4614      	mov	r4, r2
 800302c:	461a      	mov	r2, r3
 800302e:	4b09      	ldr	r3, [pc, #36]	@ (8003054 <__assert_func+0x2c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4605      	mov	r5, r0
 8003034:	68d8      	ldr	r0, [r3, #12]
 8003036:	b954      	cbnz	r4, 800304e <__assert_func+0x26>
 8003038:	4b07      	ldr	r3, [pc, #28]	@ (8003058 <__assert_func+0x30>)
 800303a:	461c      	mov	r4, r3
 800303c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003040:	9100      	str	r1, [sp, #0]
 8003042:	462b      	mov	r3, r5
 8003044:	4905      	ldr	r1, [pc, #20]	@ (800305c <__assert_func+0x34>)
 8003046:	f000 f9b3 	bl	80033b0 <fiprintf>
 800304a:	f000 fa19 	bl	8003480 <abort>
 800304e:	4b04      	ldr	r3, [pc, #16]	@ (8003060 <__assert_func+0x38>)
 8003050:	e7f4      	b.n	800303c <__assert_func+0x14>
 8003052:	bf00      	nop
 8003054:	24000020 	.word	0x24000020
 8003058:	08003e4e 	.word	0x08003e4e
 800305c:	08003e20 	.word	0x08003e20
 8003060:	08003e13 	.word	0x08003e13

08003064 <malloc>:
 8003064:	4b02      	ldr	r3, [pc, #8]	@ (8003070 <malloc+0xc>)
 8003066:	4601      	mov	r1, r0
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	f000 b825 	b.w	80030b8 <_malloc_r>
 800306e:	bf00      	nop
 8003070:	24000020 	.word	0x24000020

08003074 <sbrk_aligned>:
 8003074:	b570      	push	{r4, r5, r6, lr}
 8003076:	4e0f      	ldr	r6, [pc, #60]	@ (80030b4 <sbrk_aligned+0x40>)
 8003078:	460c      	mov	r4, r1
 800307a:	6831      	ldr	r1, [r6, #0]
 800307c:	4605      	mov	r5, r0
 800307e:	b911      	cbnz	r1, 8003086 <sbrk_aligned+0x12>
 8003080:	f000 f9dc 	bl	800343c <_sbrk_r>
 8003084:	6030      	str	r0, [r6, #0]
 8003086:	4621      	mov	r1, r4
 8003088:	4628      	mov	r0, r5
 800308a:	f000 f9d7 	bl	800343c <_sbrk_r>
 800308e:	1c43      	adds	r3, r0, #1
 8003090:	d103      	bne.n	800309a <sbrk_aligned+0x26>
 8003092:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003096:	4620      	mov	r0, r4
 8003098:	bd70      	pop	{r4, r5, r6, pc}
 800309a:	1cc4      	adds	r4, r0, #3
 800309c:	f024 0403 	bic.w	r4, r4, #3
 80030a0:	42a0      	cmp	r0, r4
 80030a2:	d0f8      	beq.n	8003096 <sbrk_aligned+0x22>
 80030a4:	1a21      	subs	r1, r4, r0
 80030a6:	4628      	mov	r0, r5
 80030a8:	f000 f9c8 	bl	800343c <_sbrk_r>
 80030ac:	3001      	adds	r0, #1
 80030ae:	d1f2      	bne.n	8003096 <sbrk_aligned+0x22>
 80030b0:	e7ef      	b.n	8003092 <sbrk_aligned+0x1e>
 80030b2:	bf00      	nop
 80030b4:	2401d694 	.word	0x2401d694

080030b8 <_malloc_r>:
 80030b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030bc:	1ccd      	adds	r5, r1, #3
 80030be:	f025 0503 	bic.w	r5, r5, #3
 80030c2:	3508      	adds	r5, #8
 80030c4:	2d0c      	cmp	r5, #12
 80030c6:	bf38      	it	cc
 80030c8:	250c      	movcc	r5, #12
 80030ca:	2d00      	cmp	r5, #0
 80030cc:	4606      	mov	r6, r0
 80030ce:	db01      	blt.n	80030d4 <_malloc_r+0x1c>
 80030d0:	42a9      	cmp	r1, r5
 80030d2:	d904      	bls.n	80030de <_malloc_r+0x26>
 80030d4:	230c      	movs	r3, #12
 80030d6:	6033      	str	r3, [r6, #0]
 80030d8:	2000      	movs	r0, #0
 80030da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80031b4 <_malloc_r+0xfc>
 80030e2:	f000 f915 	bl	8003310 <__malloc_lock>
 80030e6:	f8d8 3000 	ldr.w	r3, [r8]
 80030ea:	461c      	mov	r4, r3
 80030ec:	bb44      	cbnz	r4, 8003140 <_malloc_r+0x88>
 80030ee:	4629      	mov	r1, r5
 80030f0:	4630      	mov	r0, r6
 80030f2:	f7ff ffbf 	bl	8003074 <sbrk_aligned>
 80030f6:	1c43      	adds	r3, r0, #1
 80030f8:	4604      	mov	r4, r0
 80030fa:	d158      	bne.n	80031ae <_malloc_r+0xf6>
 80030fc:	f8d8 4000 	ldr.w	r4, [r8]
 8003100:	4627      	mov	r7, r4
 8003102:	2f00      	cmp	r7, #0
 8003104:	d143      	bne.n	800318e <_malloc_r+0xd6>
 8003106:	2c00      	cmp	r4, #0
 8003108:	d04b      	beq.n	80031a2 <_malloc_r+0xea>
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	4639      	mov	r1, r7
 800310e:	4630      	mov	r0, r6
 8003110:	eb04 0903 	add.w	r9, r4, r3
 8003114:	f000 f992 	bl	800343c <_sbrk_r>
 8003118:	4581      	cmp	r9, r0
 800311a:	d142      	bne.n	80031a2 <_malloc_r+0xea>
 800311c:	6821      	ldr	r1, [r4, #0]
 800311e:	1a6d      	subs	r5, r5, r1
 8003120:	4629      	mov	r1, r5
 8003122:	4630      	mov	r0, r6
 8003124:	f7ff ffa6 	bl	8003074 <sbrk_aligned>
 8003128:	3001      	adds	r0, #1
 800312a:	d03a      	beq.n	80031a2 <_malloc_r+0xea>
 800312c:	6823      	ldr	r3, [r4, #0]
 800312e:	442b      	add	r3, r5
 8003130:	6023      	str	r3, [r4, #0]
 8003132:	f8d8 3000 	ldr.w	r3, [r8]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	bb62      	cbnz	r2, 8003194 <_malloc_r+0xdc>
 800313a:	f8c8 7000 	str.w	r7, [r8]
 800313e:	e00f      	b.n	8003160 <_malloc_r+0xa8>
 8003140:	6822      	ldr	r2, [r4, #0]
 8003142:	1b52      	subs	r2, r2, r5
 8003144:	d420      	bmi.n	8003188 <_malloc_r+0xd0>
 8003146:	2a0b      	cmp	r2, #11
 8003148:	d917      	bls.n	800317a <_malloc_r+0xc2>
 800314a:	1961      	adds	r1, r4, r5
 800314c:	42a3      	cmp	r3, r4
 800314e:	6025      	str	r5, [r4, #0]
 8003150:	bf18      	it	ne
 8003152:	6059      	strne	r1, [r3, #4]
 8003154:	6863      	ldr	r3, [r4, #4]
 8003156:	bf08      	it	eq
 8003158:	f8c8 1000 	streq.w	r1, [r8]
 800315c:	5162      	str	r2, [r4, r5]
 800315e:	604b      	str	r3, [r1, #4]
 8003160:	4630      	mov	r0, r6
 8003162:	f000 f8db 	bl	800331c <__malloc_unlock>
 8003166:	f104 000b 	add.w	r0, r4, #11
 800316a:	1d23      	adds	r3, r4, #4
 800316c:	f020 0007 	bic.w	r0, r0, #7
 8003170:	1ac2      	subs	r2, r0, r3
 8003172:	bf1c      	itt	ne
 8003174:	1a1b      	subne	r3, r3, r0
 8003176:	50a3      	strne	r3, [r4, r2]
 8003178:	e7af      	b.n	80030da <_malloc_r+0x22>
 800317a:	6862      	ldr	r2, [r4, #4]
 800317c:	42a3      	cmp	r3, r4
 800317e:	bf0c      	ite	eq
 8003180:	f8c8 2000 	streq.w	r2, [r8]
 8003184:	605a      	strne	r2, [r3, #4]
 8003186:	e7eb      	b.n	8003160 <_malloc_r+0xa8>
 8003188:	4623      	mov	r3, r4
 800318a:	6864      	ldr	r4, [r4, #4]
 800318c:	e7ae      	b.n	80030ec <_malloc_r+0x34>
 800318e:	463c      	mov	r4, r7
 8003190:	687f      	ldr	r7, [r7, #4]
 8003192:	e7b6      	b.n	8003102 <_malloc_r+0x4a>
 8003194:	461a      	mov	r2, r3
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	42a3      	cmp	r3, r4
 800319a:	d1fb      	bne.n	8003194 <_malloc_r+0xdc>
 800319c:	2300      	movs	r3, #0
 800319e:	6053      	str	r3, [r2, #4]
 80031a0:	e7de      	b.n	8003160 <_malloc_r+0xa8>
 80031a2:	230c      	movs	r3, #12
 80031a4:	6033      	str	r3, [r6, #0]
 80031a6:	4630      	mov	r0, r6
 80031a8:	f000 f8b8 	bl	800331c <__malloc_unlock>
 80031ac:	e794      	b.n	80030d8 <_malloc_r+0x20>
 80031ae:	6005      	str	r5, [r0, #0]
 80031b0:	e7d6      	b.n	8003160 <_malloc_r+0xa8>
 80031b2:	bf00      	nop
 80031b4:	2401d698 	.word	0x2401d698

080031b8 <__sflush_r>:
 80031b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80031bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031c0:	0716      	lsls	r6, r2, #28
 80031c2:	4605      	mov	r5, r0
 80031c4:	460c      	mov	r4, r1
 80031c6:	d454      	bmi.n	8003272 <__sflush_r+0xba>
 80031c8:	684b      	ldr	r3, [r1, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	dc02      	bgt.n	80031d4 <__sflush_r+0x1c>
 80031ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	dd48      	ble.n	8003266 <__sflush_r+0xae>
 80031d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80031d6:	2e00      	cmp	r6, #0
 80031d8:	d045      	beq.n	8003266 <__sflush_r+0xae>
 80031da:	2300      	movs	r3, #0
 80031dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80031e0:	682f      	ldr	r7, [r5, #0]
 80031e2:	6a21      	ldr	r1, [r4, #32]
 80031e4:	602b      	str	r3, [r5, #0]
 80031e6:	d030      	beq.n	800324a <__sflush_r+0x92>
 80031e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80031ea:	89a3      	ldrh	r3, [r4, #12]
 80031ec:	0759      	lsls	r1, r3, #29
 80031ee:	d505      	bpl.n	80031fc <__sflush_r+0x44>
 80031f0:	6863      	ldr	r3, [r4, #4]
 80031f2:	1ad2      	subs	r2, r2, r3
 80031f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80031f6:	b10b      	cbz	r3, 80031fc <__sflush_r+0x44>
 80031f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80031fa:	1ad2      	subs	r2, r2, r3
 80031fc:	2300      	movs	r3, #0
 80031fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003200:	6a21      	ldr	r1, [r4, #32]
 8003202:	4628      	mov	r0, r5
 8003204:	47b0      	blx	r6
 8003206:	1c43      	adds	r3, r0, #1
 8003208:	89a3      	ldrh	r3, [r4, #12]
 800320a:	d106      	bne.n	800321a <__sflush_r+0x62>
 800320c:	6829      	ldr	r1, [r5, #0]
 800320e:	291d      	cmp	r1, #29
 8003210:	d82b      	bhi.n	800326a <__sflush_r+0xb2>
 8003212:	4a2a      	ldr	r2, [pc, #168]	@ (80032bc <__sflush_r+0x104>)
 8003214:	410a      	asrs	r2, r1
 8003216:	07d6      	lsls	r6, r2, #31
 8003218:	d427      	bmi.n	800326a <__sflush_r+0xb2>
 800321a:	2200      	movs	r2, #0
 800321c:	6062      	str	r2, [r4, #4]
 800321e:	04d9      	lsls	r1, r3, #19
 8003220:	6922      	ldr	r2, [r4, #16]
 8003222:	6022      	str	r2, [r4, #0]
 8003224:	d504      	bpl.n	8003230 <__sflush_r+0x78>
 8003226:	1c42      	adds	r2, r0, #1
 8003228:	d101      	bne.n	800322e <__sflush_r+0x76>
 800322a:	682b      	ldr	r3, [r5, #0]
 800322c:	b903      	cbnz	r3, 8003230 <__sflush_r+0x78>
 800322e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003230:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003232:	602f      	str	r7, [r5, #0]
 8003234:	b1b9      	cbz	r1, 8003266 <__sflush_r+0xae>
 8003236:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800323a:	4299      	cmp	r1, r3
 800323c:	d002      	beq.n	8003244 <__sflush_r+0x8c>
 800323e:	4628      	mov	r0, r5
 8003240:	f000 f926 	bl	8003490 <_free_r>
 8003244:	2300      	movs	r3, #0
 8003246:	6363      	str	r3, [r4, #52]	@ 0x34
 8003248:	e00d      	b.n	8003266 <__sflush_r+0xae>
 800324a:	2301      	movs	r3, #1
 800324c:	4628      	mov	r0, r5
 800324e:	47b0      	blx	r6
 8003250:	4602      	mov	r2, r0
 8003252:	1c50      	adds	r0, r2, #1
 8003254:	d1c9      	bne.n	80031ea <__sflush_r+0x32>
 8003256:	682b      	ldr	r3, [r5, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0c6      	beq.n	80031ea <__sflush_r+0x32>
 800325c:	2b1d      	cmp	r3, #29
 800325e:	d001      	beq.n	8003264 <__sflush_r+0xac>
 8003260:	2b16      	cmp	r3, #22
 8003262:	d11e      	bne.n	80032a2 <__sflush_r+0xea>
 8003264:	602f      	str	r7, [r5, #0]
 8003266:	2000      	movs	r0, #0
 8003268:	e022      	b.n	80032b0 <__sflush_r+0xf8>
 800326a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800326e:	b21b      	sxth	r3, r3
 8003270:	e01b      	b.n	80032aa <__sflush_r+0xf2>
 8003272:	690f      	ldr	r7, [r1, #16]
 8003274:	2f00      	cmp	r7, #0
 8003276:	d0f6      	beq.n	8003266 <__sflush_r+0xae>
 8003278:	0793      	lsls	r3, r2, #30
 800327a:	680e      	ldr	r6, [r1, #0]
 800327c:	bf08      	it	eq
 800327e:	694b      	ldreq	r3, [r1, #20]
 8003280:	600f      	str	r7, [r1, #0]
 8003282:	bf18      	it	ne
 8003284:	2300      	movne	r3, #0
 8003286:	eba6 0807 	sub.w	r8, r6, r7
 800328a:	608b      	str	r3, [r1, #8]
 800328c:	f1b8 0f00 	cmp.w	r8, #0
 8003290:	dde9      	ble.n	8003266 <__sflush_r+0xae>
 8003292:	6a21      	ldr	r1, [r4, #32]
 8003294:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003296:	4643      	mov	r3, r8
 8003298:	463a      	mov	r2, r7
 800329a:	4628      	mov	r0, r5
 800329c:	47b0      	blx	r6
 800329e:	2800      	cmp	r0, #0
 80032a0:	dc08      	bgt.n	80032b4 <__sflush_r+0xfc>
 80032a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032aa:	81a3      	strh	r3, [r4, #12]
 80032ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032b4:	4407      	add	r7, r0
 80032b6:	eba8 0800 	sub.w	r8, r8, r0
 80032ba:	e7e7      	b.n	800328c <__sflush_r+0xd4>
 80032bc:	dfbffffe 	.word	0xdfbffffe

080032c0 <_fflush_r>:
 80032c0:	b538      	push	{r3, r4, r5, lr}
 80032c2:	690b      	ldr	r3, [r1, #16]
 80032c4:	4605      	mov	r5, r0
 80032c6:	460c      	mov	r4, r1
 80032c8:	b913      	cbnz	r3, 80032d0 <_fflush_r+0x10>
 80032ca:	2500      	movs	r5, #0
 80032cc:	4628      	mov	r0, r5
 80032ce:	bd38      	pop	{r3, r4, r5, pc}
 80032d0:	b118      	cbz	r0, 80032da <_fflush_r+0x1a>
 80032d2:	6a03      	ldr	r3, [r0, #32]
 80032d4:	b90b      	cbnz	r3, 80032da <_fflush_r+0x1a>
 80032d6:	f7ff fe3b 	bl	8002f50 <__sinit>
 80032da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f3      	beq.n	80032ca <_fflush_r+0xa>
 80032e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80032e4:	07d0      	lsls	r0, r2, #31
 80032e6:	d404      	bmi.n	80032f2 <_fflush_r+0x32>
 80032e8:	0599      	lsls	r1, r3, #22
 80032ea:	d402      	bmi.n	80032f2 <_fflush_r+0x32>
 80032ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032ee:	f7ff fe98 	bl	8003022 <__retarget_lock_acquire_recursive>
 80032f2:	4628      	mov	r0, r5
 80032f4:	4621      	mov	r1, r4
 80032f6:	f7ff ff5f 	bl	80031b8 <__sflush_r>
 80032fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80032fc:	07da      	lsls	r2, r3, #31
 80032fe:	4605      	mov	r5, r0
 8003300:	d4e4      	bmi.n	80032cc <_fflush_r+0xc>
 8003302:	89a3      	ldrh	r3, [r4, #12]
 8003304:	059b      	lsls	r3, r3, #22
 8003306:	d4e1      	bmi.n	80032cc <_fflush_r+0xc>
 8003308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800330a:	f7ff fe8b 	bl	8003024 <__retarget_lock_release_recursive>
 800330e:	e7dd      	b.n	80032cc <_fflush_r+0xc>

08003310 <__malloc_lock>:
 8003310:	4801      	ldr	r0, [pc, #4]	@ (8003318 <__malloc_lock+0x8>)
 8003312:	f7ff be86 	b.w	8003022 <__retarget_lock_acquire_recursive>
 8003316:	bf00      	nop
 8003318:	2401d690 	.word	0x2401d690

0800331c <__malloc_unlock>:
 800331c:	4801      	ldr	r0, [pc, #4]	@ (8003324 <__malloc_unlock+0x8>)
 800331e:	f7ff be81 	b.w	8003024 <__retarget_lock_release_recursive>
 8003322:	bf00      	nop
 8003324:	2401d690 	.word	0x2401d690

08003328 <__sread>:
 8003328:	b510      	push	{r4, lr}
 800332a:	460c      	mov	r4, r1
 800332c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003330:	f000 f872 	bl	8003418 <_read_r>
 8003334:	2800      	cmp	r0, #0
 8003336:	bfab      	itete	ge
 8003338:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800333a:	89a3      	ldrhlt	r3, [r4, #12]
 800333c:	181b      	addge	r3, r3, r0
 800333e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003342:	bfac      	ite	ge
 8003344:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003346:	81a3      	strhlt	r3, [r4, #12]
 8003348:	bd10      	pop	{r4, pc}

0800334a <__swrite>:
 800334a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800334e:	461f      	mov	r7, r3
 8003350:	898b      	ldrh	r3, [r1, #12]
 8003352:	05db      	lsls	r3, r3, #23
 8003354:	4605      	mov	r5, r0
 8003356:	460c      	mov	r4, r1
 8003358:	4616      	mov	r6, r2
 800335a:	d505      	bpl.n	8003368 <__swrite+0x1e>
 800335c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003360:	2302      	movs	r3, #2
 8003362:	2200      	movs	r2, #0
 8003364:	f000 f846 	bl	80033f4 <_lseek_r>
 8003368:	89a3      	ldrh	r3, [r4, #12]
 800336a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800336e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003372:	81a3      	strh	r3, [r4, #12]
 8003374:	4632      	mov	r2, r6
 8003376:	463b      	mov	r3, r7
 8003378:	4628      	mov	r0, r5
 800337a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800337e:	f000 b86d 	b.w	800345c <_write_r>

08003382 <__sseek>:
 8003382:	b510      	push	{r4, lr}
 8003384:	460c      	mov	r4, r1
 8003386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800338a:	f000 f833 	bl	80033f4 <_lseek_r>
 800338e:	1c43      	adds	r3, r0, #1
 8003390:	89a3      	ldrh	r3, [r4, #12]
 8003392:	bf15      	itete	ne
 8003394:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003396:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800339a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800339e:	81a3      	strheq	r3, [r4, #12]
 80033a0:	bf18      	it	ne
 80033a2:	81a3      	strhne	r3, [r4, #12]
 80033a4:	bd10      	pop	{r4, pc}

080033a6 <__sclose>:
 80033a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033aa:	f000 b813 	b.w	80033d4 <_close_r>
	...

080033b0 <fiprintf>:
 80033b0:	b40e      	push	{r1, r2, r3}
 80033b2:	b503      	push	{r0, r1, lr}
 80033b4:	4601      	mov	r1, r0
 80033b6:	ab03      	add	r3, sp, #12
 80033b8:	4805      	ldr	r0, [pc, #20]	@ (80033d0 <fiprintf+0x20>)
 80033ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80033be:	6800      	ldr	r0, [r0, #0]
 80033c0:	9301      	str	r3, [sp, #4]
 80033c2:	f000 f8d9 	bl	8003578 <_vfiprintf_r>
 80033c6:	b002      	add	sp, #8
 80033c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80033cc:	b003      	add	sp, #12
 80033ce:	4770      	bx	lr
 80033d0:	24000020 	.word	0x24000020

080033d4 <_close_r>:
 80033d4:	b538      	push	{r3, r4, r5, lr}
 80033d6:	4d06      	ldr	r5, [pc, #24]	@ (80033f0 <_close_r+0x1c>)
 80033d8:	2300      	movs	r3, #0
 80033da:	4604      	mov	r4, r0
 80033dc:	4608      	mov	r0, r1
 80033de:	602b      	str	r3, [r5, #0]
 80033e0:	f7fd ff16 	bl	8001210 <_close>
 80033e4:	1c43      	adds	r3, r0, #1
 80033e6:	d102      	bne.n	80033ee <_close_r+0x1a>
 80033e8:	682b      	ldr	r3, [r5, #0]
 80033ea:	b103      	cbz	r3, 80033ee <_close_r+0x1a>
 80033ec:	6023      	str	r3, [r4, #0]
 80033ee:	bd38      	pop	{r3, r4, r5, pc}
 80033f0:	2401d69c 	.word	0x2401d69c

080033f4 <_lseek_r>:
 80033f4:	b538      	push	{r3, r4, r5, lr}
 80033f6:	4d07      	ldr	r5, [pc, #28]	@ (8003414 <_lseek_r+0x20>)
 80033f8:	4604      	mov	r4, r0
 80033fa:	4608      	mov	r0, r1
 80033fc:	4611      	mov	r1, r2
 80033fe:	2200      	movs	r2, #0
 8003400:	602a      	str	r2, [r5, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	f7fd ff2b 	bl	800125e <_lseek>
 8003408:	1c43      	adds	r3, r0, #1
 800340a:	d102      	bne.n	8003412 <_lseek_r+0x1e>
 800340c:	682b      	ldr	r3, [r5, #0]
 800340e:	b103      	cbz	r3, 8003412 <_lseek_r+0x1e>
 8003410:	6023      	str	r3, [r4, #0]
 8003412:	bd38      	pop	{r3, r4, r5, pc}
 8003414:	2401d69c 	.word	0x2401d69c

08003418 <_read_r>:
 8003418:	b538      	push	{r3, r4, r5, lr}
 800341a:	4d07      	ldr	r5, [pc, #28]	@ (8003438 <_read_r+0x20>)
 800341c:	4604      	mov	r4, r0
 800341e:	4608      	mov	r0, r1
 8003420:	4611      	mov	r1, r2
 8003422:	2200      	movs	r2, #0
 8003424:	602a      	str	r2, [r5, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	f7fd feb9 	bl	800119e <_read>
 800342c:	1c43      	adds	r3, r0, #1
 800342e:	d102      	bne.n	8003436 <_read_r+0x1e>
 8003430:	682b      	ldr	r3, [r5, #0]
 8003432:	b103      	cbz	r3, 8003436 <_read_r+0x1e>
 8003434:	6023      	str	r3, [r4, #0]
 8003436:	bd38      	pop	{r3, r4, r5, pc}
 8003438:	2401d69c 	.word	0x2401d69c

0800343c <_sbrk_r>:
 800343c:	b538      	push	{r3, r4, r5, lr}
 800343e:	4d06      	ldr	r5, [pc, #24]	@ (8003458 <_sbrk_r+0x1c>)
 8003440:	2300      	movs	r3, #0
 8003442:	4604      	mov	r4, r0
 8003444:	4608      	mov	r0, r1
 8003446:	602b      	str	r3, [r5, #0]
 8003448:	f7fd ff16 	bl	8001278 <_sbrk>
 800344c:	1c43      	adds	r3, r0, #1
 800344e:	d102      	bne.n	8003456 <_sbrk_r+0x1a>
 8003450:	682b      	ldr	r3, [r5, #0]
 8003452:	b103      	cbz	r3, 8003456 <_sbrk_r+0x1a>
 8003454:	6023      	str	r3, [r4, #0]
 8003456:	bd38      	pop	{r3, r4, r5, pc}
 8003458:	2401d69c 	.word	0x2401d69c

0800345c <_write_r>:
 800345c:	b538      	push	{r3, r4, r5, lr}
 800345e:	4d07      	ldr	r5, [pc, #28]	@ (800347c <_write_r+0x20>)
 8003460:	4604      	mov	r4, r0
 8003462:	4608      	mov	r0, r1
 8003464:	4611      	mov	r1, r2
 8003466:	2200      	movs	r2, #0
 8003468:	602a      	str	r2, [r5, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	f7fd feb4 	bl	80011d8 <_write>
 8003470:	1c43      	adds	r3, r0, #1
 8003472:	d102      	bne.n	800347a <_write_r+0x1e>
 8003474:	682b      	ldr	r3, [r5, #0]
 8003476:	b103      	cbz	r3, 800347a <_write_r+0x1e>
 8003478:	6023      	str	r3, [r4, #0]
 800347a:	bd38      	pop	{r3, r4, r5, pc}
 800347c:	2401d69c 	.word	0x2401d69c

08003480 <abort>:
 8003480:	b508      	push	{r3, lr}
 8003482:	2006      	movs	r0, #6
 8003484:	f000 fc5e 	bl	8003d44 <raise>
 8003488:	2001      	movs	r0, #1
 800348a:	f7fd fe7d 	bl	8001188 <_exit>
	...

08003490 <_free_r>:
 8003490:	b538      	push	{r3, r4, r5, lr}
 8003492:	4605      	mov	r5, r0
 8003494:	2900      	cmp	r1, #0
 8003496:	d041      	beq.n	800351c <_free_r+0x8c>
 8003498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800349c:	1f0c      	subs	r4, r1, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	bfb8      	it	lt
 80034a2:	18e4      	addlt	r4, r4, r3
 80034a4:	f7ff ff34 	bl	8003310 <__malloc_lock>
 80034a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003520 <_free_r+0x90>)
 80034aa:	6813      	ldr	r3, [r2, #0]
 80034ac:	b933      	cbnz	r3, 80034bc <_free_r+0x2c>
 80034ae:	6063      	str	r3, [r4, #4]
 80034b0:	6014      	str	r4, [r2, #0]
 80034b2:	4628      	mov	r0, r5
 80034b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034b8:	f7ff bf30 	b.w	800331c <__malloc_unlock>
 80034bc:	42a3      	cmp	r3, r4
 80034be:	d908      	bls.n	80034d2 <_free_r+0x42>
 80034c0:	6820      	ldr	r0, [r4, #0]
 80034c2:	1821      	adds	r1, r4, r0
 80034c4:	428b      	cmp	r3, r1
 80034c6:	bf01      	itttt	eq
 80034c8:	6819      	ldreq	r1, [r3, #0]
 80034ca:	685b      	ldreq	r3, [r3, #4]
 80034cc:	1809      	addeq	r1, r1, r0
 80034ce:	6021      	streq	r1, [r4, #0]
 80034d0:	e7ed      	b.n	80034ae <_free_r+0x1e>
 80034d2:	461a      	mov	r2, r3
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	b10b      	cbz	r3, 80034dc <_free_r+0x4c>
 80034d8:	42a3      	cmp	r3, r4
 80034da:	d9fa      	bls.n	80034d2 <_free_r+0x42>
 80034dc:	6811      	ldr	r1, [r2, #0]
 80034de:	1850      	adds	r0, r2, r1
 80034e0:	42a0      	cmp	r0, r4
 80034e2:	d10b      	bne.n	80034fc <_free_r+0x6c>
 80034e4:	6820      	ldr	r0, [r4, #0]
 80034e6:	4401      	add	r1, r0
 80034e8:	1850      	adds	r0, r2, r1
 80034ea:	4283      	cmp	r3, r0
 80034ec:	6011      	str	r1, [r2, #0]
 80034ee:	d1e0      	bne.n	80034b2 <_free_r+0x22>
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	6053      	str	r3, [r2, #4]
 80034f6:	4408      	add	r0, r1
 80034f8:	6010      	str	r0, [r2, #0]
 80034fa:	e7da      	b.n	80034b2 <_free_r+0x22>
 80034fc:	d902      	bls.n	8003504 <_free_r+0x74>
 80034fe:	230c      	movs	r3, #12
 8003500:	602b      	str	r3, [r5, #0]
 8003502:	e7d6      	b.n	80034b2 <_free_r+0x22>
 8003504:	6820      	ldr	r0, [r4, #0]
 8003506:	1821      	adds	r1, r4, r0
 8003508:	428b      	cmp	r3, r1
 800350a:	bf04      	itt	eq
 800350c:	6819      	ldreq	r1, [r3, #0]
 800350e:	685b      	ldreq	r3, [r3, #4]
 8003510:	6063      	str	r3, [r4, #4]
 8003512:	bf04      	itt	eq
 8003514:	1809      	addeq	r1, r1, r0
 8003516:	6021      	streq	r1, [r4, #0]
 8003518:	6054      	str	r4, [r2, #4]
 800351a:	e7ca      	b.n	80034b2 <_free_r+0x22>
 800351c:	bd38      	pop	{r3, r4, r5, pc}
 800351e:	bf00      	nop
 8003520:	2401d698 	.word	0x2401d698

08003524 <__sfputc_r>:
 8003524:	6893      	ldr	r3, [r2, #8]
 8003526:	3b01      	subs	r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	b410      	push	{r4}
 800352c:	6093      	str	r3, [r2, #8]
 800352e:	da08      	bge.n	8003542 <__sfputc_r+0x1e>
 8003530:	6994      	ldr	r4, [r2, #24]
 8003532:	42a3      	cmp	r3, r4
 8003534:	db01      	blt.n	800353a <__sfputc_r+0x16>
 8003536:	290a      	cmp	r1, #10
 8003538:	d103      	bne.n	8003542 <__sfputc_r+0x1e>
 800353a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800353e:	f000 bac1 	b.w	8003ac4 <__swbuf_r>
 8003542:	6813      	ldr	r3, [r2, #0]
 8003544:	1c58      	adds	r0, r3, #1
 8003546:	6010      	str	r0, [r2, #0]
 8003548:	7019      	strb	r1, [r3, #0]
 800354a:	4608      	mov	r0, r1
 800354c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003550:	4770      	bx	lr

08003552 <__sfputs_r>:
 8003552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003554:	4606      	mov	r6, r0
 8003556:	460f      	mov	r7, r1
 8003558:	4614      	mov	r4, r2
 800355a:	18d5      	adds	r5, r2, r3
 800355c:	42ac      	cmp	r4, r5
 800355e:	d101      	bne.n	8003564 <__sfputs_r+0x12>
 8003560:	2000      	movs	r0, #0
 8003562:	e007      	b.n	8003574 <__sfputs_r+0x22>
 8003564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003568:	463a      	mov	r2, r7
 800356a:	4630      	mov	r0, r6
 800356c:	f7ff ffda 	bl	8003524 <__sfputc_r>
 8003570:	1c43      	adds	r3, r0, #1
 8003572:	d1f3      	bne.n	800355c <__sfputs_r+0xa>
 8003574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003578 <_vfiprintf_r>:
 8003578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800357c:	460d      	mov	r5, r1
 800357e:	b09d      	sub	sp, #116	@ 0x74
 8003580:	4614      	mov	r4, r2
 8003582:	4698      	mov	r8, r3
 8003584:	4606      	mov	r6, r0
 8003586:	b118      	cbz	r0, 8003590 <_vfiprintf_r+0x18>
 8003588:	6a03      	ldr	r3, [r0, #32]
 800358a:	b90b      	cbnz	r3, 8003590 <_vfiprintf_r+0x18>
 800358c:	f7ff fce0 	bl	8002f50 <__sinit>
 8003590:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003592:	07d9      	lsls	r1, r3, #31
 8003594:	d405      	bmi.n	80035a2 <_vfiprintf_r+0x2a>
 8003596:	89ab      	ldrh	r3, [r5, #12]
 8003598:	059a      	lsls	r2, r3, #22
 800359a:	d402      	bmi.n	80035a2 <_vfiprintf_r+0x2a>
 800359c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800359e:	f7ff fd40 	bl	8003022 <__retarget_lock_acquire_recursive>
 80035a2:	89ab      	ldrh	r3, [r5, #12]
 80035a4:	071b      	lsls	r3, r3, #28
 80035a6:	d501      	bpl.n	80035ac <_vfiprintf_r+0x34>
 80035a8:	692b      	ldr	r3, [r5, #16]
 80035aa:	b99b      	cbnz	r3, 80035d4 <_vfiprintf_r+0x5c>
 80035ac:	4629      	mov	r1, r5
 80035ae:	4630      	mov	r0, r6
 80035b0:	f000 fac6 	bl	8003b40 <__swsetup_r>
 80035b4:	b170      	cbz	r0, 80035d4 <_vfiprintf_r+0x5c>
 80035b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80035b8:	07dc      	lsls	r4, r3, #31
 80035ba:	d504      	bpl.n	80035c6 <_vfiprintf_r+0x4e>
 80035bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035c0:	b01d      	add	sp, #116	@ 0x74
 80035c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035c6:	89ab      	ldrh	r3, [r5, #12]
 80035c8:	0598      	lsls	r0, r3, #22
 80035ca:	d4f7      	bmi.n	80035bc <_vfiprintf_r+0x44>
 80035cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80035ce:	f7ff fd29 	bl	8003024 <__retarget_lock_release_recursive>
 80035d2:	e7f3      	b.n	80035bc <_vfiprintf_r+0x44>
 80035d4:	2300      	movs	r3, #0
 80035d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80035d8:	2320      	movs	r3, #32
 80035da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80035de:	f8cd 800c 	str.w	r8, [sp, #12]
 80035e2:	2330      	movs	r3, #48	@ 0x30
 80035e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003794 <_vfiprintf_r+0x21c>
 80035e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80035ec:	f04f 0901 	mov.w	r9, #1
 80035f0:	4623      	mov	r3, r4
 80035f2:	469a      	mov	sl, r3
 80035f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035f8:	b10a      	cbz	r2, 80035fe <_vfiprintf_r+0x86>
 80035fa:	2a25      	cmp	r2, #37	@ 0x25
 80035fc:	d1f9      	bne.n	80035f2 <_vfiprintf_r+0x7a>
 80035fe:	ebba 0b04 	subs.w	fp, sl, r4
 8003602:	d00b      	beq.n	800361c <_vfiprintf_r+0xa4>
 8003604:	465b      	mov	r3, fp
 8003606:	4622      	mov	r2, r4
 8003608:	4629      	mov	r1, r5
 800360a:	4630      	mov	r0, r6
 800360c:	f7ff ffa1 	bl	8003552 <__sfputs_r>
 8003610:	3001      	adds	r0, #1
 8003612:	f000 80a7 	beq.w	8003764 <_vfiprintf_r+0x1ec>
 8003616:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003618:	445a      	add	r2, fp
 800361a:	9209      	str	r2, [sp, #36]	@ 0x24
 800361c:	f89a 3000 	ldrb.w	r3, [sl]
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 809f 	beq.w	8003764 <_vfiprintf_r+0x1ec>
 8003626:	2300      	movs	r3, #0
 8003628:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800362c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003630:	f10a 0a01 	add.w	sl, sl, #1
 8003634:	9304      	str	r3, [sp, #16]
 8003636:	9307      	str	r3, [sp, #28]
 8003638:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800363c:	931a      	str	r3, [sp, #104]	@ 0x68
 800363e:	4654      	mov	r4, sl
 8003640:	2205      	movs	r2, #5
 8003642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003646:	4853      	ldr	r0, [pc, #332]	@ (8003794 <_vfiprintf_r+0x21c>)
 8003648:	f7fc fe4a 	bl	80002e0 <memchr>
 800364c:	9a04      	ldr	r2, [sp, #16]
 800364e:	b9d8      	cbnz	r0, 8003688 <_vfiprintf_r+0x110>
 8003650:	06d1      	lsls	r1, r2, #27
 8003652:	bf44      	itt	mi
 8003654:	2320      	movmi	r3, #32
 8003656:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800365a:	0713      	lsls	r3, r2, #28
 800365c:	bf44      	itt	mi
 800365e:	232b      	movmi	r3, #43	@ 0x2b
 8003660:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003664:	f89a 3000 	ldrb.w	r3, [sl]
 8003668:	2b2a      	cmp	r3, #42	@ 0x2a
 800366a:	d015      	beq.n	8003698 <_vfiprintf_r+0x120>
 800366c:	9a07      	ldr	r2, [sp, #28]
 800366e:	4654      	mov	r4, sl
 8003670:	2000      	movs	r0, #0
 8003672:	f04f 0c0a 	mov.w	ip, #10
 8003676:	4621      	mov	r1, r4
 8003678:	f811 3b01 	ldrb.w	r3, [r1], #1
 800367c:	3b30      	subs	r3, #48	@ 0x30
 800367e:	2b09      	cmp	r3, #9
 8003680:	d94b      	bls.n	800371a <_vfiprintf_r+0x1a2>
 8003682:	b1b0      	cbz	r0, 80036b2 <_vfiprintf_r+0x13a>
 8003684:	9207      	str	r2, [sp, #28]
 8003686:	e014      	b.n	80036b2 <_vfiprintf_r+0x13a>
 8003688:	eba0 0308 	sub.w	r3, r0, r8
 800368c:	fa09 f303 	lsl.w	r3, r9, r3
 8003690:	4313      	orrs	r3, r2
 8003692:	9304      	str	r3, [sp, #16]
 8003694:	46a2      	mov	sl, r4
 8003696:	e7d2      	b.n	800363e <_vfiprintf_r+0xc6>
 8003698:	9b03      	ldr	r3, [sp, #12]
 800369a:	1d19      	adds	r1, r3, #4
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	9103      	str	r1, [sp, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bfbb      	ittet	lt
 80036a4:	425b      	neglt	r3, r3
 80036a6:	f042 0202 	orrlt.w	r2, r2, #2
 80036aa:	9307      	strge	r3, [sp, #28]
 80036ac:	9307      	strlt	r3, [sp, #28]
 80036ae:	bfb8      	it	lt
 80036b0:	9204      	strlt	r2, [sp, #16]
 80036b2:	7823      	ldrb	r3, [r4, #0]
 80036b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80036b6:	d10a      	bne.n	80036ce <_vfiprintf_r+0x156>
 80036b8:	7863      	ldrb	r3, [r4, #1]
 80036ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80036bc:	d132      	bne.n	8003724 <_vfiprintf_r+0x1ac>
 80036be:	9b03      	ldr	r3, [sp, #12]
 80036c0:	1d1a      	adds	r2, r3, #4
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	9203      	str	r2, [sp, #12]
 80036c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80036ca:	3402      	adds	r4, #2
 80036cc:	9305      	str	r3, [sp, #20]
 80036ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80037a4 <_vfiprintf_r+0x22c>
 80036d2:	7821      	ldrb	r1, [r4, #0]
 80036d4:	2203      	movs	r2, #3
 80036d6:	4650      	mov	r0, sl
 80036d8:	f7fc fe02 	bl	80002e0 <memchr>
 80036dc:	b138      	cbz	r0, 80036ee <_vfiprintf_r+0x176>
 80036de:	9b04      	ldr	r3, [sp, #16]
 80036e0:	eba0 000a 	sub.w	r0, r0, sl
 80036e4:	2240      	movs	r2, #64	@ 0x40
 80036e6:	4082      	lsls	r2, r0
 80036e8:	4313      	orrs	r3, r2
 80036ea:	3401      	adds	r4, #1
 80036ec:	9304      	str	r3, [sp, #16]
 80036ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036f2:	4829      	ldr	r0, [pc, #164]	@ (8003798 <_vfiprintf_r+0x220>)
 80036f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80036f8:	2206      	movs	r2, #6
 80036fa:	f7fc fdf1 	bl	80002e0 <memchr>
 80036fe:	2800      	cmp	r0, #0
 8003700:	d03f      	beq.n	8003782 <_vfiprintf_r+0x20a>
 8003702:	4b26      	ldr	r3, [pc, #152]	@ (800379c <_vfiprintf_r+0x224>)
 8003704:	bb1b      	cbnz	r3, 800374e <_vfiprintf_r+0x1d6>
 8003706:	9b03      	ldr	r3, [sp, #12]
 8003708:	3307      	adds	r3, #7
 800370a:	f023 0307 	bic.w	r3, r3, #7
 800370e:	3308      	adds	r3, #8
 8003710:	9303      	str	r3, [sp, #12]
 8003712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003714:	443b      	add	r3, r7
 8003716:	9309      	str	r3, [sp, #36]	@ 0x24
 8003718:	e76a      	b.n	80035f0 <_vfiprintf_r+0x78>
 800371a:	fb0c 3202 	mla	r2, ip, r2, r3
 800371e:	460c      	mov	r4, r1
 8003720:	2001      	movs	r0, #1
 8003722:	e7a8      	b.n	8003676 <_vfiprintf_r+0xfe>
 8003724:	2300      	movs	r3, #0
 8003726:	3401      	adds	r4, #1
 8003728:	9305      	str	r3, [sp, #20]
 800372a:	4619      	mov	r1, r3
 800372c:	f04f 0c0a 	mov.w	ip, #10
 8003730:	4620      	mov	r0, r4
 8003732:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003736:	3a30      	subs	r2, #48	@ 0x30
 8003738:	2a09      	cmp	r2, #9
 800373a:	d903      	bls.n	8003744 <_vfiprintf_r+0x1cc>
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0c6      	beq.n	80036ce <_vfiprintf_r+0x156>
 8003740:	9105      	str	r1, [sp, #20]
 8003742:	e7c4      	b.n	80036ce <_vfiprintf_r+0x156>
 8003744:	fb0c 2101 	mla	r1, ip, r1, r2
 8003748:	4604      	mov	r4, r0
 800374a:	2301      	movs	r3, #1
 800374c:	e7f0      	b.n	8003730 <_vfiprintf_r+0x1b8>
 800374e:	ab03      	add	r3, sp, #12
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	462a      	mov	r2, r5
 8003754:	4b12      	ldr	r3, [pc, #72]	@ (80037a0 <_vfiprintf_r+0x228>)
 8003756:	a904      	add	r1, sp, #16
 8003758:	4630      	mov	r0, r6
 800375a:	f3af 8000 	nop.w
 800375e:	4607      	mov	r7, r0
 8003760:	1c78      	adds	r0, r7, #1
 8003762:	d1d6      	bne.n	8003712 <_vfiprintf_r+0x19a>
 8003764:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003766:	07d9      	lsls	r1, r3, #31
 8003768:	d405      	bmi.n	8003776 <_vfiprintf_r+0x1fe>
 800376a:	89ab      	ldrh	r3, [r5, #12]
 800376c:	059a      	lsls	r2, r3, #22
 800376e:	d402      	bmi.n	8003776 <_vfiprintf_r+0x1fe>
 8003770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003772:	f7ff fc57 	bl	8003024 <__retarget_lock_release_recursive>
 8003776:	89ab      	ldrh	r3, [r5, #12]
 8003778:	065b      	lsls	r3, r3, #25
 800377a:	f53f af1f 	bmi.w	80035bc <_vfiprintf_r+0x44>
 800377e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003780:	e71e      	b.n	80035c0 <_vfiprintf_r+0x48>
 8003782:	ab03      	add	r3, sp, #12
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	462a      	mov	r2, r5
 8003788:	4b05      	ldr	r3, [pc, #20]	@ (80037a0 <_vfiprintf_r+0x228>)
 800378a:	a904      	add	r1, sp, #16
 800378c:	4630      	mov	r0, r6
 800378e:	f000 f879 	bl	8003884 <_printf_i>
 8003792:	e7e4      	b.n	800375e <_vfiprintf_r+0x1e6>
 8003794:	08003e4f 	.word	0x08003e4f
 8003798:	08003e59 	.word	0x08003e59
 800379c:	00000000 	.word	0x00000000
 80037a0:	08003553 	.word	0x08003553
 80037a4:	08003e55 	.word	0x08003e55

080037a8 <_printf_common>:
 80037a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037ac:	4616      	mov	r6, r2
 80037ae:	4698      	mov	r8, r3
 80037b0:	688a      	ldr	r2, [r1, #8]
 80037b2:	690b      	ldr	r3, [r1, #16]
 80037b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80037b8:	4293      	cmp	r3, r2
 80037ba:	bfb8      	it	lt
 80037bc:	4613      	movlt	r3, r2
 80037be:	6033      	str	r3, [r6, #0]
 80037c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80037c4:	4607      	mov	r7, r0
 80037c6:	460c      	mov	r4, r1
 80037c8:	b10a      	cbz	r2, 80037ce <_printf_common+0x26>
 80037ca:	3301      	adds	r3, #1
 80037cc:	6033      	str	r3, [r6, #0]
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	0699      	lsls	r1, r3, #26
 80037d2:	bf42      	ittt	mi
 80037d4:	6833      	ldrmi	r3, [r6, #0]
 80037d6:	3302      	addmi	r3, #2
 80037d8:	6033      	strmi	r3, [r6, #0]
 80037da:	6825      	ldr	r5, [r4, #0]
 80037dc:	f015 0506 	ands.w	r5, r5, #6
 80037e0:	d106      	bne.n	80037f0 <_printf_common+0x48>
 80037e2:	f104 0a19 	add.w	sl, r4, #25
 80037e6:	68e3      	ldr	r3, [r4, #12]
 80037e8:	6832      	ldr	r2, [r6, #0]
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	42ab      	cmp	r3, r5
 80037ee:	dc26      	bgt.n	800383e <_printf_common+0x96>
 80037f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80037f4:	6822      	ldr	r2, [r4, #0]
 80037f6:	3b00      	subs	r3, #0
 80037f8:	bf18      	it	ne
 80037fa:	2301      	movne	r3, #1
 80037fc:	0692      	lsls	r2, r2, #26
 80037fe:	d42b      	bmi.n	8003858 <_printf_common+0xb0>
 8003800:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003804:	4641      	mov	r1, r8
 8003806:	4638      	mov	r0, r7
 8003808:	47c8      	blx	r9
 800380a:	3001      	adds	r0, #1
 800380c:	d01e      	beq.n	800384c <_printf_common+0xa4>
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	6922      	ldr	r2, [r4, #16]
 8003812:	f003 0306 	and.w	r3, r3, #6
 8003816:	2b04      	cmp	r3, #4
 8003818:	bf02      	ittt	eq
 800381a:	68e5      	ldreq	r5, [r4, #12]
 800381c:	6833      	ldreq	r3, [r6, #0]
 800381e:	1aed      	subeq	r5, r5, r3
 8003820:	68a3      	ldr	r3, [r4, #8]
 8003822:	bf0c      	ite	eq
 8003824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003828:	2500      	movne	r5, #0
 800382a:	4293      	cmp	r3, r2
 800382c:	bfc4      	itt	gt
 800382e:	1a9b      	subgt	r3, r3, r2
 8003830:	18ed      	addgt	r5, r5, r3
 8003832:	2600      	movs	r6, #0
 8003834:	341a      	adds	r4, #26
 8003836:	42b5      	cmp	r5, r6
 8003838:	d11a      	bne.n	8003870 <_printf_common+0xc8>
 800383a:	2000      	movs	r0, #0
 800383c:	e008      	b.n	8003850 <_printf_common+0xa8>
 800383e:	2301      	movs	r3, #1
 8003840:	4652      	mov	r2, sl
 8003842:	4641      	mov	r1, r8
 8003844:	4638      	mov	r0, r7
 8003846:	47c8      	blx	r9
 8003848:	3001      	adds	r0, #1
 800384a:	d103      	bne.n	8003854 <_printf_common+0xac>
 800384c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003854:	3501      	adds	r5, #1
 8003856:	e7c6      	b.n	80037e6 <_printf_common+0x3e>
 8003858:	18e1      	adds	r1, r4, r3
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	2030      	movs	r0, #48	@ 0x30
 800385e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003862:	4422      	add	r2, r4
 8003864:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003868:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800386c:	3302      	adds	r3, #2
 800386e:	e7c7      	b.n	8003800 <_printf_common+0x58>
 8003870:	2301      	movs	r3, #1
 8003872:	4622      	mov	r2, r4
 8003874:	4641      	mov	r1, r8
 8003876:	4638      	mov	r0, r7
 8003878:	47c8      	blx	r9
 800387a:	3001      	adds	r0, #1
 800387c:	d0e6      	beq.n	800384c <_printf_common+0xa4>
 800387e:	3601      	adds	r6, #1
 8003880:	e7d9      	b.n	8003836 <_printf_common+0x8e>
	...

08003884 <_printf_i>:
 8003884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003888:	7e0f      	ldrb	r7, [r1, #24]
 800388a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800388c:	2f78      	cmp	r7, #120	@ 0x78
 800388e:	4691      	mov	r9, r2
 8003890:	4680      	mov	r8, r0
 8003892:	460c      	mov	r4, r1
 8003894:	469a      	mov	sl, r3
 8003896:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800389a:	d807      	bhi.n	80038ac <_printf_i+0x28>
 800389c:	2f62      	cmp	r7, #98	@ 0x62
 800389e:	d80a      	bhi.n	80038b6 <_printf_i+0x32>
 80038a0:	2f00      	cmp	r7, #0
 80038a2:	f000 80d2 	beq.w	8003a4a <_printf_i+0x1c6>
 80038a6:	2f58      	cmp	r7, #88	@ 0x58
 80038a8:	f000 80b9 	beq.w	8003a1e <_printf_i+0x19a>
 80038ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80038b4:	e03a      	b.n	800392c <_printf_i+0xa8>
 80038b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80038ba:	2b15      	cmp	r3, #21
 80038bc:	d8f6      	bhi.n	80038ac <_printf_i+0x28>
 80038be:	a101      	add	r1, pc, #4	@ (adr r1, 80038c4 <_printf_i+0x40>)
 80038c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038c4:	0800391d 	.word	0x0800391d
 80038c8:	08003931 	.word	0x08003931
 80038cc:	080038ad 	.word	0x080038ad
 80038d0:	080038ad 	.word	0x080038ad
 80038d4:	080038ad 	.word	0x080038ad
 80038d8:	080038ad 	.word	0x080038ad
 80038dc:	08003931 	.word	0x08003931
 80038e0:	080038ad 	.word	0x080038ad
 80038e4:	080038ad 	.word	0x080038ad
 80038e8:	080038ad 	.word	0x080038ad
 80038ec:	080038ad 	.word	0x080038ad
 80038f0:	08003a31 	.word	0x08003a31
 80038f4:	0800395b 	.word	0x0800395b
 80038f8:	080039eb 	.word	0x080039eb
 80038fc:	080038ad 	.word	0x080038ad
 8003900:	080038ad 	.word	0x080038ad
 8003904:	08003a53 	.word	0x08003a53
 8003908:	080038ad 	.word	0x080038ad
 800390c:	0800395b 	.word	0x0800395b
 8003910:	080038ad 	.word	0x080038ad
 8003914:	080038ad 	.word	0x080038ad
 8003918:	080039f3 	.word	0x080039f3
 800391c:	6833      	ldr	r3, [r6, #0]
 800391e:	1d1a      	adds	r2, r3, #4
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6032      	str	r2, [r6, #0]
 8003924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003928:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800392c:	2301      	movs	r3, #1
 800392e:	e09d      	b.n	8003a6c <_printf_i+0x1e8>
 8003930:	6833      	ldr	r3, [r6, #0]
 8003932:	6820      	ldr	r0, [r4, #0]
 8003934:	1d19      	adds	r1, r3, #4
 8003936:	6031      	str	r1, [r6, #0]
 8003938:	0606      	lsls	r6, r0, #24
 800393a:	d501      	bpl.n	8003940 <_printf_i+0xbc>
 800393c:	681d      	ldr	r5, [r3, #0]
 800393e:	e003      	b.n	8003948 <_printf_i+0xc4>
 8003940:	0645      	lsls	r5, r0, #25
 8003942:	d5fb      	bpl.n	800393c <_printf_i+0xb8>
 8003944:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003948:	2d00      	cmp	r5, #0
 800394a:	da03      	bge.n	8003954 <_printf_i+0xd0>
 800394c:	232d      	movs	r3, #45	@ 0x2d
 800394e:	426d      	negs	r5, r5
 8003950:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003954:	4859      	ldr	r0, [pc, #356]	@ (8003abc <_printf_i+0x238>)
 8003956:	230a      	movs	r3, #10
 8003958:	e011      	b.n	800397e <_printf_i+0xfa>
 800395a:	6821      	ldr	r1, [r4, #0]
 800395c:	6833      	ldr	r3, [r6, #0]
 800395e:	0608      	lsls	r0, r1, #24
 8003960:	f853 5b04 	ldr.w	r5, [r3], #4
 8003964:	d402      	bmi.n	800396c <_printf_i+0xe8>
 8003966:	0649      	lsls	r1, r1, #25
 8003968:	bf48      	it	mi
 800396a:	b2ad      	uxthmi	r5, r5
 800396c:	2f6f      	cmp	r7, #111	@ 0x6f
 800396e:	4853      	ldr	r0, [pc, #332]	@ (8003abc <_printf_i+0x238>)
 8003970:	6033      	str	r3, [r6, #0]
 8003972:	bf14      	ite	ne
 8003974:	230a      	movne	r3, #10
 8003976:	2308      	moveq	r3, #8
 8003978:	2100      	movs	r1, #0
 800397a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800397e:	6866      	ldr	r6, [r4, #4]
 8003980:	60a6      	str	r6, [r4, #8]
 8003982:	2e00      	cmp	r6, #0
 8003984:	bfa2      	ittt	ge
 8003986:	6821      	ldrge	r1, [r4, #0]
 8003988:	f021 0104 	bicge.w	r1, r1, #4
 800398c:	6021      	strge	r1, [r4, #0]
 800398e:	b90d      	cbnz	r5, 8003994 <_printf_i+0x110>
 8003990:	2e00      	cmp	r6, #0
 8003992:	d04b      	beq.n	8003a2c <_printf_i+0x1a8>
 8003994:	4616      	mov	r6, r2
 8003996:	fbb5 f1f3 	udiv	r1, r5, r3
 800399a:	fb03 5711 	mls	r7, r3, r1, r5
 800399e:	5dc7      	ldrb	r7, [r0, r7]
 80039a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039a4:	462f      	mov	r7, r5
 80039a6:	42bb      	cmp	r3, r7
 80039a8:	460d      	mov	r5, r1
 80039aa:	d9f4      	bls.n	8003996 <_printf_i+0x112>
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d10b      	bne.n	80039c8 <_printf_i+0x144>
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	07df      	lsls	r7, r3, #31
 80039b4:	d508      	bpl.n	80039c8 <_printf_i+0x144>
 80039b6:	6923      	ldr	r3, [r4, #16]
 80039b8:	6861      	ldr	r1, [r4, #4]
 80039ba:	4299      	cmp	r1, r3
 80039bc:	bfde      	ittt	le
 80039be:	2330      	movle	r3, #48	@ 0x30
 80039c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039c4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80039c8:	1b92      	subs	r2, r2, r6
 80039ca:	6122      	str	r2, [r4, #16]
 80039cc:	f8cd a000 	str.w	sl, [sp]
 80039d0:	464b      	mov	r3, r9
 80039d2:	aa03      	add	r2, sp, #12
 80039d4:	4621      	mov	r1, r4
 80039d6:	4640      	mov	r0, r8
 80039d8:	f7ff fee6 	bl	80037a8 <_printf_common>
 80039dc:	3001      	adds	r0, #1
 80039de:	d14a      	bne.n	8003a76 <_printf_i+0x1f2>
 80039e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039e4:	b004      	add	sp, #16
 80039e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ea:	6823      	ldr	r3, [r4, #0]
 80039ec:	f043 0320 	orr.w	r3, r3, #32
 80039f0:	6023      	str	r3, [r4, #0]
 80039f2:	4833      	ldr	r0, [pc, #204]	@ (8003ac0 <_printf_i+0x23c>)
 80039f4:	2778      	movs	r7, #120	@ 0x78
 80039f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	6831      	ldr	r1, [r6, #0]
 80039fe:	061f      	lsls	r7, r3, #24
 8003a00:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a04:	d402      	bmi.n	8003a0c <_printf_i+0x188>
 8003a06:	065f      	lsls	r7, r3, #25
 8003a08:	bf48      	it	mi
 8003a0a:	b2ad      	uxthmi	r5, r5
 8003a0c:	6031      	str	r1, [r6, #0]
 8003a0e:	07d9      	lsls	r1, r3, #31
 8003a10:	bf44      	itt	mi
 8003a12:	f043 0320 	orrmi.w	r3, r3, #32
 8003a16:	6023      	strmi	r3, [r4, #0]
 8003a18:	b11d      	cbz	r5, 8003a22 <_printf_i+0x19e>
 8003a1a:	2310      	movs	r3, #16
 8003a1c:	e7ac      	b.n	8003978 <_printf_i+0xf4>
 8003a1e:	4827      	ldr	r0, [pc, #156]	@ (8003abc <_printf_i+0x238>)
 8003a20:	e7e9      	b.n	80039f6 <_printf_i+0x172>
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	f023 0320 	bic.w	r3, r3, #32
 8003a28:	6023      	str	r3, [r4, #0]
 8003a2a:	e7f6      	b.n	8003a1a <_printf_i+0x196>
 8003a2c:	4616      	mov	r6, r2
 8003a2e:	e7bd      	b.n	80039ac <_printf_i+0x128>
 8003a30:	6833      	ldr	r3, [r6, #0]
 8003a32:	6825      	ldr	r5, [r4, #0]
 8003a34:	6961      	ldr	r1, [r4, #20]
 8003a36:	1d18      	adds	r0, r3, #4
 8003a38:	6030      	str	r0, [r6, #0]
 8003a3a:	062e      	lsls	r6, r5, #24
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	d501      	bpl.n	8003a44 <_printf_i+0x1c0>
 8003a40:	6019      	str	r1, [r3, #0]
 8003a42:	e002      	b.n	8003a4a <_printf_i+0x1c6>
 8003a44:	0668      	lsls	r0, r5, #25
 8003a46:	d5fb      	bpl.n	8003a40 <_printf_i+0x1bc>
 8003a48:	8019      	strh	r1, [r3, #0]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	6123      	str	r3, [r4, #16]
 8003a4e:	4616      	mov	r6, r2
 8003a50:	e7bc      	b.n	80039cc <_printf_i+0x148>
 8003a52:	6833      	ldr	r3, [r6, #0]
 8003a54:	1d1a      	adds	r2, r3, #4
 8003a56:	6032      	str	r2, [r6, #0]
 8003a58:	681e      	ldr	r6, [r3, #0]
 8003a5a:	6862      	ldr	r2, [r4, #4]
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4630      	mov	r0, r6
 8003a60:	f7fc fc3e 	bl	80002e0 <memchr>
 8003a64:	b108      	cbz	r0, 8003a6a <_printf_i+0x1e6>
 8003a66:	1b80      	subs	r0, r0, r6
 8003a68:	6060      	str	r0, [r4, #4]
 8003a6a:	6863      	ldr	r3, [r4, #4]
 8003a6c:	6123      	str	r3, [r4, #16]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a74:	e7aa      	b.n	80039cc <_printf_i+0x148>
 8003a76:	6923      	ldr	r3, [r4, #16]
 8003a78:	4632      	mov	r2, r6
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	4640      	mov	r0, r8
 8003a7e:	47d0      	blx	sl
 8003a80:	3001      	adds	r0, #1
 8003a82:	d0ad      	beq.n	80039e0 <_printf_i+0x15c>
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	079b      	lsls	r3, r3, #30
 8003a88:	d413      	bmi.n	8003ab2 <_printf_i+0x22e>
 8003a8a:	68e0      	ldr	r0, [r4, #12]
 8003a8c:	9b03      	ldr	r3, [sp, #12]
 8003a8e:	4298      	cmp	r0, r3
 8003a90:	bfb8      	it	lt
 8003a92:	4618      	movlt	r0, r3
 8003a94:	e7a6      	b.n	80039e4 <_printf_i+0x160>
 8003a96:	2301      	movs	r3, #1
 8003a98:	4632      	mov	r2, r6
 8003a9a:	4649      	mov	r1, r9
 8003a9c:	4640      	mov	r0, r8
 8003a9e:	47d0      	blx	sl
 8003aa0:	3001      	adds	r0, #1
 8003aa2:	d09d      	beq.n	80039e0 <_printf_i+0x15c>
 8003aa4:	3501      	adds	r5, #1
 8003aa6:	68e3      	ldr	r3, [r4, #12]
 8003aa8:	9903      	ldr	r1, [sp, #12]
 8003aaa:	1a5b      	subs	r3, r3, r1
 8003aac:	42ab      	cmp	r3, r5
 8003aae:	dcf2      	bgt.n	8003a96 <_printf_i+0x212>
 8003ab0:	e7eb      	b.n	8003a8a <_printf_i+0x206>
 8003ab2:	2500      	movs	r5, #0
 8003ab4:	f104 0619 	add.w	r6, r4, #25
 8003ab8:	e7f5      	b.n	8003aa6 <_printf_i+0x222>
 8003aba:	bf00      	nop
 8003abc:	08003e60 	.word	0x08003e60
 8003ac0:	08003e71 	.word	0x08003e71

08003ac4 <__swbuf_r>:
 8003ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac6:	460e      	mov	r6, r1
 8003ac8:	4614      	mov	r4, r2
 8003aca:	4605      	mov	r5, r0
 8003acc:	b118      	cbz	r0, 8003ad6 <__swbuf_r+0x12>
 8003ace:	6a03      	ldr	r3, [r0, #32]
 8003ad0:	b90b      	cbnz	r3, 8003ad6 <__swbuf_r+0x12>
 8003ad2:	f7ff fa3d 	bl	8002f50 <__sinit>
 8003ad6:	69a3      	ldr	r3, [r4, #24]
 8003ad8:	60a3      	str	r3, [r4, #8]
 8003ada:	89a3      	ldrh	r3, [r4, #12]
 8003adc:	071a      	lsls	r2, r3, #28
 8003ade:	d501      	bpl.n	8003ae4 <__swbuf_r+0x20>
 8003ae0:	6923      	ldr	r3, [r4, #16]
 8003ae2:	b943      	cbnz	r3, 8003af6 <__swbuf_r+0x32>
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	f000 f82a 	bl	8003b40 <__swsetup_r>
 8003aec:	b118      	cbz	r0, 8003af6 <__swbuf_r+0x32>
 8003aee:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003af2:	4638      	mov	r0, r7
 8003af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	6922      	ldr	r2, [r4, #16]
 8003afa:	1a98      	subs	r0, r3, r2
 8003afc:	6963      	ldr	r3, [r4, #20]
 8003afe:	b2f6      	uxtb	r6, r6
 8003b00:	4283      	cmp	r3, r0
 8003b02:	4637      	mov	r7, r6
 8003b04:	dc05      	bgt.n	8003b12 <__swbuf_r+0x4e>
 8003b06:	4621      	mov	r1, r4
 8003b08:	4628      	mov	r0, r5
 8003b0a:	f7ff fbd9 	bl	80032c0 <_fflush_r>
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d1ed      	bne.n	8003aee <__swbuf_r+0x2a>
 8003b12:	68a3      	ldr	r3, [r4, #8]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	60a3      	str	r3, [r4, #8]
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	6022      	str	r2, [r4, #0]
 8003b1e:	701e      	strb	r6, [r3, #0]
 8003b20:	6962      	ldr	r2, [r4, #20]
 8003b22:	1c43      	adds	r3, r0, #1
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d004      	beq.n	8003b32 <__swbuf_r+0x6e>
 8003b28:	89a3      	ldrh	r3, [r4, #12]
 8003b2a:	07db      	lsls	r3, r3, #31
 8003b2c:	d5e1      	bpl.n	8003af2 <__swbuf_r+0x2e>
 8003b2e:	2e0a      	cmp	r6, #10
 8003b30:	d1df      	bne.n	8003af2 <__swbuf_r+0x2e>
 8003b32:	4621      	mov	r1, r4
 8003b34:	4628      	mov	r0, r5
 8003b36:	f7ff fbc3 	bl	80032c0 <_fflush_r>
 8003b3a:	2800      	cmp	r0, #0
 8003b3c:	d0d9      	beq.n	8003af2 <__swbuf_r+0x2e>
 8003b3e:	e7d6      	b.n	8003aee <__swbuf_r+0x2a>

08003b40 <__swsetup_r>:
 8003b40:	b538      	push	{r3, r4, r5, lr}
 8003b42:	4b29      	ldr	r3, [pc, #164]	@ (8003be8 <__swsetup_r+0xa8>)
 8003b44:	4605      	mov	r5, r0
 8003b46:	6818      	ldr	r0, [r3, #0]
 8003b48:	460c      	mov	r4, r1
 8003b4a:	b118      	cbz	r0, 8003b54 <__swsetup_r+0x14>
 8003b4c:	6a03      	ldr	r3, [r0, #32]
 8003b4e:	b90b      	cbnz	r3, 8003b54 <__swsetup_r+0x14>
 8003b50:	f7ff f9fe 	bl	8002f50 <__sinit>
 8003b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b58:	0719      	lsls	r1, r3, #28
 8003b5a:	d422      	bmi.n	8003ba2 <__swsetup_r+0x62>
 8003b5c:	06da      	lsls	r2, r3, #27
 8003b5e:	d407      	bmi.n	8003b70 <__swsetup_r+0x30>
 8003b60:	2209      	movs	r2, #9
 8003b62:	602a      	str	r2, [r5, #0]
 8003b64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b68:	81a3      	strh	r3, [r4, #12]
 8003b6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b6e:	e033      	b.n	8003bd8 <__swsetup_r+0x98>
 8003b70:	0758      	lsls	r0, r3, #29
 8003b72:	d512      	bpl.n	8003b9a <__swsetup_r+0x5a>
 8003b74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b76:	b141      	cbz	r1, 8003b8a <__swsetup_r+0x4a>
 8003b78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b7c:	4299      	cmp	r1, r3
 8003b7e:	d002      	beq.n	8003b86 <__swsetup_r+0x46>
 8003b80:	4628      	mov	r0, r5
 8003b82:	f7ff fc85 	bl	8003490 <_free_r>
 8003b86:	2300      	movs	r3, #0
 8003b88:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b8a:	89a3      	ldrh	r3, [r4, #12]
 8003b8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003b90:	81a3      	strh	r3, [r4, #12]
 8003b92:	2300      	movs	r3, #0
 8003b94:	6063      	str	r3, [r4, #4]
 8003b96:	6923      	ldr	r3, [r4, #16]
 8003b98:	6023      	str	r3, [r4, #0]
 8003b9a:	89a3      	ldrh	r3, [r4, #12]
 8003b9c:	f043 0308 	orr.w	r3, r3, #8
 8003ba0:	81a3      	strh	r3, [r4, #12]
 8003ba2:	6923      	ldr	r3, [r4, #16]
 8003ba4:	b94b      	cbnz	r3, 8003bba <__swsetup_r+0x7a>
 8003ba6:	89a3      	ldrh	r3, [r4, #12]
 8003ba8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bb0:	d003      	beq.n	8003bba <__swsetup_r+0x7a>
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	4628      	mov	r0, r5
 8003bb6:	f000 f83f 	bl	8003c38 <__smakebuf_r>
 8003bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bbe:	f013 0201 	ands.w	r2, r3, #1
 8003bc2:	d00a      	beq.n	8003bda <__swsetup_r+0x9a>
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	60a2      	str	r2, [r4, #8]
 8003bc8:	6962      	ldr	r2, [r4, #20]
 8003bca:	4252      	negs	r2, r2
 8003bcc:	61a2      	str	r2, [r4, #24]
 8003bce:	6922      	ldr	r2, [r4, #16]
 8003bd0:	b942      	cbnz	r2, 8003be4 <__swsetup_r+0xa4>
 8003bd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003bd6:	d1c5      	bne.n	8003b64 <__swsetup_r+0x24>
 8003bd8:	bd38      	pop	{r3, r4, r5, pc}
 8003bda:	0799      	lsls	r1, r3, #30
 8003bdc:	bf58      	it	pl
 8003bde:	6962      	ldrpl	r2, [r4, #20]
 8003be0:	60a2      	str	r2, [r4, #8]
 8003be2:	e7f4      	b.n	8003bce <__swsetup_r+0x8e>
 8003be4:	2000      	movs	r0, #0
 8003be6:	e7f7      	b.n	8003bd8 <__swsetup_r+0x98>
 8003be8:	24000020 	.word	0x24000020

08003bec <__swhatbuf_r>:
 8003bec:	b570      	push	{r4, r5, r6, lr}
 8003bee:	460c      	mov	r4, r1
 8003bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bf4:	2900      	cmp	r1, #0
 8003bf6:	b096      	sub	sp, #88	@ 0x58
 8003bf8:	4615      	mov	r5, r2
 8003bfa:	461e      	mov	r6, r3
 8003bfc:	da0d      	bge.n	8003c1a <__swhatbuf_r+0x2e>
 8003bfe:	89a3      	ldrh	r3, [r4, #12]
 8003c00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003c04:	f04f 0100 	mov.w	r1, #0
 8003c08:	bf14      	ite	ne
 8003c0a:	2340      	movne	r3, #64	@ 0x40
 8003c0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003c10:	2000      	movs	r0, #0
 8003c12:	6031      	str	r1, [r6, #0]
 8003c14:	602b      	str	r3, [r5, #0]
 8003c16:	b016      	add	sp, #88	@ 0x58
 8003c18:	bd70      	pop	{r4, r5, r6, pc}
 8003c1a:	466a      	mov	r2, sp
 8003c1c:	f000 f848 	bl	8003cb0 <_fstat_r>
 8003c20:	2800      	cmp	r0, #0
 8003c22:	dbec      	blt.n	8003bfe <__swhatbuf_r+0x12>
 8003c24:	9901      	ldr	r1, [sp, #4]
 8003c26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003c2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003c2e:	4259      	negs	r1, r3
 8003c30:	4159      	adcs	r1, r3
 8003c32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c36:	e7eb      	b.n	8003c10 <__swhatbuf_r+0x24>

08003c38 <__smakebuf_r>:
 8003c38:	898b      	ldrh	r3, [r1, #12]
 8003c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c3c:	079d      	lsls	r5, r3, #30
 8003c3e:	4606      	mov	r6, r0
 8003c40:	460c      	mov	r4, r1
 8003c42:	d507      	bpl.n	8003c54 <__smakebuf_r+0x1c>
 8003c44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003c48:	6023      	str	r3, [r4, #0]
 8003c4a:	6123      	str	r3, [r4, #16]
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	6163      	str	r3, [r4, #20]
 8003c50:	b003      	add	sp, #12
 8003c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c54:	ab01      	add	r3, sp, #4
 8003c56:	466a      	mov	r2, sp
 8003c58:	f7ff ffc8 	bl	8003bec <__swhatbuf_r>
 8003c5c:	9f00      	ldr	r7, [sp, #0]
 8003c5e:	4605      	mov	r5, r0
 8003c60:	4639      	mov	r1, r7
 8003c62:	4630      	mov	r0, r6
 8003c64:	f7ff fa28 	bl	80030b8 <_malloc_r>
 8003c68:	b948      	cbnz	r0, 8003c7e <__smakebuf_r+0x46>
 8003c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c6e:	059a      	lsls	r2, r3, #22
 8003c70:	d4ee      	bmi.n	8003c50 <__smakebuf_r+0x18>
 8003c72:	f023 0303 	bic.w	r3, r3, #3
 8003c76:	f043 0302 	orr.w	r3, r3, #2
 8003c7a:	81a3      	strh	r3, [r4, #12]
 8003c7c:	e7e2      	b.n	8003c44 <__smakebuf_r+0xc>
 8003c7e:	89a3      	ldrh	r3, [r4, #12]
 8003c80:	6020      	str	r0, [r4, #0]
 8003c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c86:	81a3      	strh	r3, [r4, #12]
 8003c88:	9b01      	ldr	r3, [sp, #4]
 8003c8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003c8e:	b15b      	cbz	r3, 8003ca8 <__smakebuf_r+0x70>
 8003c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c94:	4630      	mov	r0, r6
 8003c96:	f000 f81d 	bl	8003cd4 <_isatty_r>
 8003c9a:	b128      	cbz	r0, 8003ca8 <__smakebuf_r+0x70>
 8003c9c:	89a3      	ldrh	r3, [r4, #12]
 8003c9e:	f023 0303 	bic.w	r3, r3, #3
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	81a3      	strh	r3, [r4, #12]
 8003ca8:	89a3      	ldrh	r3, [r4, #12]
 8003caa:	431d      	orrs	r5, r3
 8003cac:	81a5      	strh	r5, [r4, #12]
 8003cae:	e7cf      	b.n	8003c50 <__smakebuf_r+0x18>

08003cb0 <_fstat_r>:
 8003cb0:	b538      	push	{r3, r4, r5, lr}
 8003cb2:	4d07      	ldr	r5, [pc, #28]	@ (8003cd0 <_fstat_r+0x20>)
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	4604      	mov	r4, r0
 8003cb8:	4608      	mov	r0, r1
 8003cba:	4611      	mov	r1, r2
 8003cbc:	602b      	str	r3, [r5, #0]
 8003cbe:	f7fd fab3 	bl	8001228 <_fstat>
 8003cc2:	1c43      	adds	r3, r0, #1
 8003cc4:	d102      	bne.n	8003ccc <_fstat_r+0x1c>
 8003cc6:	682b      	ldr	r3, [r5, #0]
 8003cc8:	b103      	cbz	r3, 8003ccc <_fstat_r+0x1c>
 8003cca:	6023      	str	r3, [r4, #0]
 8003ccc:	bd38      	pop	{r3, r4, r5, pc}
 8003cce:	bf00      	nop
 8003cd0:	2401d69c 	.word	0x2401d69c

08003cd4 <_isatty_r>:
 8003cd4:	b538      	push	{r3, r4, r5, lr}
 8003cd6:	4d06      	ldr	r5, [pc, #24]	@ (8003cf0 <_isatty_r+0x1c>)
 8003cd8:	2300      	movs	r3, #0
 8003cda:	4604      	mov	r4, r0
 8003cdc:	4608      	mov	r0, r1
 8003cde:	602b      	str	r3, [r5, #0]
 8003ce0:	f7fd fab2 	bl	8001248 <_isatty>
 8003ce4:	1c43      	adds	r3, r0, #1
 8003ce6:	d102      	bne.n	8003cee <_isatty_r+0x1a>
 8003ce8:	682b      	ldr	r3, [r5, #0]
 8003cea:	b103      	cbz	r3, 8003cee <_isatty_r+0x1a>
 8003cec:	6023      	str	r3, [r4, #0]
 8003cee:	bd38      	pop	{r3, r4, r5, pc}
 8003cf0:	2401d69c 	.word	0x2401d69c

08003cf4 <_raise_r>:
 8003cf4:	291f      	cmp	r1, #31
 8003cf6:	b538      	push	{r3, r4, r5, lr}
 8003cf8:	4605      	mov	r5, r0
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	d904      	bls.n	8003d08 <_raise_r+0x14>
 8003cfe:	2316      	movs	r3, #22
 8003d00:	6003      	str	r3, [r0, #0]
 8003d02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d06:	bd38      	pop	{r3, r4, r5, pc}
 8003d08:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003d0a:	b112      	cbz	r2, 8003d12 <_raise_r+0x1e>
 8003d0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003d10:	b94b      	cbnz	r3, 8003d26 <_raise_r+0x32>
 8003d12:	4628      	mov	r0, r5
 8003d14:	f000 f830 	bl	8003d78 <_getpid_r>
 8003d18:	4622      	mov	r2, r4
 8003d1a:	4601      	mov	r1, r0
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d22:	f000 b817 	b.w	8003d54 <_kill_r>
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d00a      	beq.n	8003d40 <_raise_r+0x4c>
 8003d2a:	1c59      	adds	r1, r3, #1
 8003d2c:	d103      	bne.n	8003d36 <_raise_r+0x42>
 8003d2e:	2316      	movs	r3, #22
 8003d30:	6003      	str	r3, [r0, #0]
 8003d32:	2001      	movs	r0, #1
 8003d34:	e7e7      	b.n	8003d06 <_raise_r+0x12>
 8003d36:	2100      	movs	r1, #0
 8003d38:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	4798      	blx	r3
 8003d40:	2000      	movs	r0, #0
 8003d42:	e7e0      	b.n	8003d06 <_raise_r+0x12>

08003d44 <raise>:
 8003d44:	4b02      	ldr	r3, [pc, #8]	@ (8003d50 <raise+0xc>)
 8003d46:	4601      	mov	r1, r0
 8003d48:	6818      	ldr	r0, [r3, #0]
 8003d4a:	f7ff bfd3 	b.w	8003cf4 <_raise_r>
 8003d4e:	bf00      	nop
 8003d50:	24000020 	.word	0x24000020

08003d54 <_kill_r>:
 8003d54:	b538      	push	{r3, r4, r5, lr}
 8003d56:	4d07      	ldr	r5, [pc, #28]	@ (8003d74 <_kill_r+0x20>)
 8003d58:	2300      	movs	r3, #0
 8003d5a:	4604      	mov	r4, r0
 8003d5c:	4608      	mov	r0, r1
 8003d5e:	4611      	mov	r1, r2
 8003d60:	602b      	str	r3, [r5, #0]
 8003d62:	f7fd fa01 	bl	8001168 <_kill>
 8003d66:	1c43      	adds	r3, r0, #1
 8003d68:	d102      	bne.n	8003d70 <_kill_r+0x1c>
 8003d6a:	682b      	ldr	r3, [r5, #0]
 8003d6c:	b103      	cbz	r3, 8003d70 <_kill_r+0x1c>
 8003d6e:	6023      	str	r3, [r4, #0]
 8003d70:	bd38      	pop	{r3, r4, r5, pc}
 8003d72:	bf00      	nop
 8003d74:	2401d69c 	.word	0x2401d69c

08003d78 <_getpid_r>:
 8003d78:	f7fd b9ee 	b.w	8001158 <_getpid>

08003d7c <_init>:
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7e:	bf00      	nop
 8003d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d82:	bc08      	pop	{r3}
 8003d84:	469e      	mov	lr, r3
 8003d86:	4770      	bx	lr

08003d88 <_fini>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	bf00      	nop
 8003d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8e:	bc08      	pop	{r3}
 8003d90:	469e      	mov	lr, r3
 8003d92:	4770      	bx	lr
